// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace es_config {
constexpr Configuration::Configuration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vendor_(nullptr)
  , log_(nullptr)
  , ble_(nullptr)
  , wifi_(nullptr)
  , ap_(nullptr)
  , g4_(nullptr)
  , eth_(nullptr)
  , ntp_(nullptr)
  , gpio_(nullptr)
  , ocpp_(nullptr)
  , ota_(nullptr)
  , uart_(nullptr)
  , network_(nullptr)
  , workmode_(nullptr)
  , charger_(nullptr){}
struct ConfigurationDefaultTypeInternal {
  constexpr ConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigurationDefaultTypeInternal() {}
  union {
    Configuration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigurationDefaultTypeInternal _Configuration_default_instance_;
constexpr Vendor::Vendor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vendor_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vendor_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VendorDefaultTypeInternal {
  constexpr VendorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VendorDefaultTypeInternal() {}
  union {
    Vendor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VendorDefaultTypeInternal _Vendor_default_instance_;
constexpr LogConfig::LogConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_size_limit_(0u)
  , file_number_limit_(0u)
  , total_size_limit_(0u){}
struct LogConfigDefaultTypeInternal {
  constexpr LogConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogConfigDefaultTypeInternal() {}
  union {
    LogConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogConfigDefaultTypeInternal _LogConfig_default_instance_;
constexpr BleConfig::BleConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enable_(false){}
struct BleConfigDefaultTypeInternal {
  constexpr BleConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BleConfigDefaultTypeInternal() {}
  union {
    BleConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BleConfigDefaultTypeInternal _BleConfig_default_instance_;
constexpr WiFiConfig::WiFiConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ssid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encryption_(0)

  , protocol_(0)

  , enable_(false){}
struct WiFiConfigDefaultTypeInternal {
  constexpr WiFiConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WiFiConfigDefaultTypeInternal() {}
  union {
    WiFiConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WiFiConfigDefaultTypeInternal _WiFiConfig_default_instance_;
constexpr ApConfig::ApConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ssid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encryption_(0)

  , protocol_(0)

  , enable_(false){}
struct ApConfigDefaultTypeInternal {
  constexpr ApConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApConfigDefaultTypeInternal() {}
  union {
    ApConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApConfigDefaultTypeInternal _ApConfig_default_instance_;
constexpr G4Config::G4Config(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , config_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reset_gpio_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , at_port_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_(false){}
struct G4ConfigDefaultTypeInternal {
  constexpr G4ConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~G4ConfigDefaultTypeInternal() {}
  union {
    G4Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT G4ConfigDefaultTypeInternal _G4Config_default_instance_;
constexpr EthConfig::EthConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : static_dns_()
  , static_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , static_gateway_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , static_netmask_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_(false)
  , dhcp_(false){}
struct EthConfigDefaultTypeInternal {
  constexpr EthConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EthConfigDefaultTypeInternal() {}
  union {
    EthConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EthConfigDefaultTypeInternal _EthConfig_default_instance_;
constexpr NtpConfig::NtpConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_list_()
  , interval_(0u)
  , enable_(false){}
struct NtpConfigDefaultTypeInternal {
  constexpr NtpConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NtpConfigDefaultTypeInternal() {}
  union {
    NtpConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NtpConfigDefaultTypeInternal _NtpConfig_default_instance_;
constexpr GpioConfig_GpioPin::GpioConfig_GpioPin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : number_(0u)
  , is_output_(false)
  , is_on1off0_(false){}
struct GpioConfig_GpioPinDefaultTypeInternal {
  constexpr GpioConfig_GpioPinDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpioConfig_GpioPinDefaultTypeInternal() {}
  union {
    GpioConfig_GpioPin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpioConfig_GpioPinDefaultTypeInternal _GpioConfig_GpioPin_default_instance_;
constexpr GpioConfig::GpioConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : g4_reset_(nullptr)
  , sys_reset_(nullptr)
  , ems_rw_485_(nullptr){}
struct GpioConfigDefaultTypeInternal {
  constexpr GpioConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpioConfigDefaultTypeInternal() {}
  union {
    GpioConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpioConfigDefaultTypeInternal _GpioConfig_default_instance_;
constexpr OcppConfig::OcppConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cert_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0u)
  , profile_(0u)
  , enable_(false){}
struct OcppConfigDefaultTypeInternal {
  constexpr OcppConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OcppConfigDefaultTypeInternal() {}
  union {
    OcppConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OcppConfigDefaultTypeInternal _OcppConfig_default_instance_;
constexpr OtaConfig::OtaConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : download_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cert_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_(false){}
struct OtaConfigDefaultTypeInternal {
  constexpr OtaConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OtaConfigDefaultTypeInternal() {}
  union {
    OtaConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OtaConfigDefaultTypeInternal _OtaConfig_default_instance_;
constexpr UartConfig_UartSetting::UartConfig_UartSetting(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rw_485_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , baudrate_(0)

  , bsize_(0u)
  , parity_(0)

  , stopbit_(0)

  , is_485_(false){}
struct UartConfig_UartSettingDefaultTypeInternal {
  constexpr UartConfig_UartSettingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UartConfig_UartSettingDefaultTypeInternal() {}
  union {
    UartConfig_UartSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UartConfig_UartSettingDefaultTypeInternal _UartConfig_UartSetting_default_instance_;
constexpr UartConfig::UartConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ccu_control_(nullptr)
  , ccu_debug_(nullptr)
  , rfid_control_(nullptr)
  , pos_control_(nullptr)
  , g4_at_(nullptr){}
struct UartConfigDefaultTypeInternal {
  constexpr UartConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UartConfigDefaultTypeInternal() {}
  union {
    UartConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UartConfigDefaultTypeInternal _UartConfig_default_instance_;
constexpr NetworkConfig::NetworkConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : net_type_(0)
{}
struct NetworkConfigDefaultTypeInternal {
  constexpr NetworkConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetworkConfigDefaultTypeInternal() {}
  union {
    NetworkConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetworkConfigDefaultTypeInternal _NetworkConfig_default_instance_;
constexpr WorkModeConfig::WorkModeConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : work_mode_(0)
{}
struct WorkModeConfigDefaultTypeInternal {
  constexpr WorkModeConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkModeConfigDefaultTypeInternal() {}
  union {
    WorkModeConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkModeConfigDefaultTypeInternal _WorkModeConfig_default_instance_;
constexpr ChargerConfig::ChargerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_current_(0u)
  , min_current_(0u)
  , max_voltage_(0u)
  , min_voltage_(0u)
  , max_power_(0u){}
struct ChargerConfigDefaultTypeInternal {
  constexpr ChargerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChargerConfigDefaultTypeInternal() {}
  union {
    ChargerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChargerConfigDefaultTypeInternal _ChargerConfig_default_instance_;
}  // namespace es_config
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::Configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::Configuration, vendor_),
  PROTOBUF_FIELD_OFFSET(::es_config::Configuration, log_),
  PROTOBUF_FIELD_OFFSET(::es_config::Configuration, ble_),
  PROTOBUF_FIELD_OFFSET(::es_config::Configuration, wifi_),
  PROTOBUF_FIELD_OFFSET(::es_config::Configuration, ap_),
  PROTOBUF_FIELD_OFFSET(::es_config::Configuration, g4_),
  PROTOBUF_FIELD_OFFSET(::es_config::Configuration, eth_),
  PROTOBUF_FIELD_OFFSET(::es_config::Configuration, ntp_),
  PROTOBUF_FIELD_OFFSET(::es_config::Configuration, gpio_),
  PROTOBUF_FIELD_OFFSET(::es_config::Configuration, ocpp_),
  PROTOBUF_FIELD_OFFSET(::es_config::Configuration, ota_),
  PROTOBUF_FIELD_OFFSET(::es_config::Configuration, uart_),
  PROTOBUF_FIELD_OFFSET(::es_config::Configuration, network_),
  PROTOBUF_FIELD_OFFSET(::es_config::Configuration, workmode_),
  PROTOBUF_FIELD_OFFSET(::es_config::Configuration, charger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::Vendor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::Vendor, vendor_name_),
  PROTOBUF_FIELD_OFFSET(::es_config::Vendor, vendor_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::LogConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::LogConfig, path_),
  PROTOBUF_FIELD_OFFSET(::es_config::LogConfig, file_size_limit_),
  PROTOBUF_FIELD_OFFSET(::es_config::LogConfig, file_number_limit_),
  PROTOBUF_FIELD_OFFSET(::es_config::LogConfig, total_size_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::BleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::BleConfig, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::WiFiConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::WiFiConfig, ssid_),
  PROTOBUF_FIELD_OFFSET(::es_config::WiFiConfig, password_),
  PROTOBUF_FIELD_OFFSET(::es_config::WiFiConfig, encryption_),
  PROTOBUF_FIELD_OFFSET(::es_config::WiFiConfig, protocol_),
  PROTOBUF_FIELD_OFFSET(::es_config::WiFiConfig, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::ApConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::ApConfig, ssid_),
  PROTOBUF_FIELD_OFFSET(::es_config::ApConfig, password_),
  PROTOBUF_FIELD_OFFSET(::es_config::ApConfig, encryption_),
  PROTOBUF_FIELD_OFFSET(::es_config::ApConfig, protocol_),
  PROTOBUF_FIELD_OFFSET(::es_config::ApConfig, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::G4Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::G4Config, model_),
  PROTOBUF_FIELD_OFFSET(::es_config::G4Config, config_path_),
  PROTOBUF_FIELD_OFFSET(::es_config::G4Config, reset_gpio_),
  PROTOBUF_FIELD_OFFSET(::es_config::G4Config, at_port_),
  PROTOBUF_FIELD_OFFSET(::es_config::G4Config, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::EthConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::EthConfig, enable_),
  PROTOBUF_FIELD_OFFSET(::es_config::EthConfig, static_ip_),
  PROTOBUF_FIELD_OFFSET(::es_config::EthConfig, static_gateway_),
  PROTOBUF_FIELD_OFFSET(::es_config::EthConfig, static_netmask_),
  PROTOBUF_FIELD_OFFSET(::es_config::EthConfig, static_dns_),
  PROTOBUF_FIELD_OFFSET(::es_config::EthConfig, dhcp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::NtpConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::NtpConfig, server_list_),
  PROTOBUF_FIELD_OFFSET(::es_config::NtpConfig, interval_),
  PROTOBUF_FIELD_OFFSET(::es_config::NtpConfig, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::GpioConfig_GpioPin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::GpioConfig_GpioPin, number_),
  PROTOBUF_FIELD_OFFSET(::es_config::GpioConfig_GpioPin, is_output_),
  PROTOBUF_FIELD_OFFSET(::es_config::GpioConfig_GpioPin, is_on1off0_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::GpioConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::GpioConfig, g4_reset_),
  PROTOBUF_FIELD_OFFSET(::es_config::GpioConfig, sys_reset_),
  PROTOBUF_FIELD_OFFSET(::es_config::GpioConfig, ems_rw_485_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::OcppConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::OcppConfig, url_),
  PROTOBUF_FIELD_OFFSET(::es_config::OcppConfig, host_),
  PROTOBUF_FIELD_OFFSET(::es_config::OcppConfig, port_),
  PROTOBUF_FIELD_OFFSET(::es_config::OcppConfig, path_),
  PROTOBUF_FIELD_OFFSET(::es_config::OcppConfig, profile_),
  PROTOBUF_FIELD_OFFSET(::es_config::OcppConfig, cert_path_),
  PROTOBUF_FIELD_OFFSET(::es_config::OcppConfig, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::OtaConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::OtaConfig, download_path_),
  PROTOBUF_FIELD_OFFSET(::es_config::OtaConfig, cert_path_),
  PROTOBUF_FIELD_OFFSET(::es_config::OtaConfig, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::UartConfig_UartSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::UartConfig_UartSetting, path_),
  PROTOBUF_FIELD_OFFSET(::es_config::UartConfig_UartSetting, baudrate_),
  PROTOBUF_FIELD_OFFSET(::es_config::UartConfig_UartSetting, bsize_),
  PROTOBUF_FIELD_OFFSET(::es_config::UartConfig_UartSetting, parity_),
  PROTOBUF_FIELD_OFFSET(::es_config::UartConfig_UartSetting, stopbit_),
  PROTOBUF_FIELD_OFFSET(::es_config::UartConfig_UartSetting, is_485_),
  PROTOBUF_FIELD_OFFSET(::es_config::UartConfig_UartSetting, rw_485_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::UartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::UartConfig, ccu_control_),
  PROTOBUF_FIELD_OFFSET(::es_config::UartConfig, ccu_debug_),
  PROTOBUF_FIELD_OFFSET(::es_config::UartConfig, rfid_control_),
  PROTOBUF_FIELD_OFFSET(::es_config::UartConfig, pos_control_),
  PROTOBUF_FIELD_OFFSET(::es_config::UartConfig, g4_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::NetworkConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::NetworkConfig, net_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::WorkModeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::WorkModeConfig, work_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::es_config::ChargerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es_config::ChargerConfig, model_),
  PROTOBUF_FIELD_OFFSET(::es_config::ChargerConfig, max_current_),
  PROTOBUF_FIELD_OFFSET(::es_config::ChargerConfig, min_current_),
  PROTOBUF_FIELD_OFFSET(::es_config::ChargerConfig, max_voltage_),
  PROTOBUF_FIELD_OFFSET(::es_config::ChargerConfig, min_voltage_),
  PROTOBUF_FIELD_OFFSET(::es_config::ChargerConfig, max_power_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::es_config::Configuration)},
  { 20, -1, sizeof(::es_config::Vendor)},
  { 27, -1, sizeof(::es_config::LogConfig)},
  { 36, -1, sizeof(::es_config::BleConfig)},
  { 42, -1, sizeof(::es_config::WiFiConfig)},
  { 52, -1, sizeof(::es_config::ApConfig)},
  { 62, -1, sizeof(::es_config::G4Config)},
  { 72, -1, sizeof(::es_config::EthConfig)},
  { 83, -1, sizeof(::es_config::NtpConfig)},
  { 91, -1, sizeof(::es_config::GpioConfig_GpioPin)},
  { 99, -1, sizeof(::es_config::GpioConfig)},
  { 107, -1, sizeof(::es_config::OcppConfig)},
  { 119, -1, sizeof(::es_config::OtaConfig)},
  { 127, -1, sizeof(::es_config::UartConfig_UartSetting)},
  { 139, -1, sizeof(::es_config::UartConfig)},
  { 149, -1, sizeof(::es_config::NetworkConfig)},
  { 155, -1, sizeof(::es_config::WorkModeConfig)},
  { 161, -1, sizeof(::es_config::ChargerConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_Configuration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_Vendor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_LogConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_BleConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_WiFiConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_ApConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_G4Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_EthConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_NtpConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_GpioConfig_GpioPin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_GpioConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_OcppConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_OtaConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_UartConfig_UartSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_UartConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_NetworkConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_WorkModeConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es_config::_ChargerConfig_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\tes_config\"\272\004\n\rConfigura"
  "tion\022!\n\006vendor\030\001 \001(\0132\021.es_config.Vendor\022"
  "!\n\003log\030\002 \001(\0132\024.es_config.LogConfig\022!\n\003bl"
  "e\030\003 \001(\0132\024.es_config.BleConfig\022#\n\004wifi\030\004 "
  "\001(\0132\025.es_config.WiFiConfig\022\037\n\002ap\030\005 \001(\0132\023"
  ".es_config.ApConfig\022\037\n\002g4\030\006 \001(\0132\023.es_con"
  "fig.G4Config\022!\n\003eth\030\007 \001(\0132\024.es_config.Et"
  "hConfig\022!\n\003ntp\030\010 \001(\0132\024.es_config.NtpConf"
  "ig\022#\n\004gpio\030\t \001(\0132\025.es_config.GpioConfig\022"
  "#\n\004ocpp\030\n \001(\0132\025.es_config.OcppConfig\022!\n\003"
  "ota\030\013 \001(\0132\024.es_config.OtaConfig\022#\n\004uart\030"
  "\014 \001(\0132\025.es_config.UartConfig\022)\n\007network\030"
  "\r \001(\0132\030.es_config.NetworkConfig\022+\n\010workm"
  "ode\030\016 \001(\0132\031.es_config.WorkModeConfig\022)\n\007"
  "charger\030\017 \001(\0132\030.es_config.ChargerConfig\""
  "0\n\006Vendor\022\023\n\013vendor_name\030\001 \001(\t\022\021\n\tvendor"
  "_id\030\002 \001(\t\"g\n\tLogConfig\022\014\n\004path\030\001 \001(\t\022\027\n\017"
  "file_size_limit\030\002 \001(\r\022\031\n\021file_number_lim"
  "it\030\003 \001(\r\022\030\n\020total_size_limit\030\004 \001(\r\"\033\n\tBl"
  "eConfig\022\016\n\006enable\030\001 \001(\010\"\212\002\n\nWiFiConfig\022\014"
  "\n\004ssid\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\0228\n\nencryp"
  "tion\030\003 \001(\0162$.es_config.WiFiConfig.Encryp"
  "tionType\0224\n\010protocol\030\004 \001(\0162\".es_config.W"
  "iFiConfig.ProtocolType\022\016\n\006enable\030\005 \001(\010\"."
  "\n\016EncryptionType\022\010\n\004NONE\020\000\022\010\n\004WPA2\020\001\022\010\n\004"
  "WPA3\020\002\",\n\014ProtocolType\022\010\n\004AUTO\020\000\022\t\n\005B_G_"
  "N\020\001\022\007\n\003B_G\020\002\"\204\002\n\010ApConfig\022\014\n\004ssid\030\001 \001(\t\022"
  "\020\n\010password\030\002 \001(\t\0226\n\nencryption\030\003 \001(\0162\"."
  "es_config.ApConfig.EncryptionType\0222\n\010pro"
  "tocol\030\004 \001(\0162 .es_config.ApConfig.Protoco"
  "lType\022\016\n\006enable\030\005 \001(\010\".\n\016EncryptionType\022"
  "\010\n\004NONE\020\000\022\010\n\004WPA2\020\001\022\010\n\004WPA3\020\002\",\n\014Protoco"
  "lType\022\010\n\004AUTO\020\000\022\t\n\005B_G_N\020\001\022\007\n\003B_G\020\002\"c\n\010G"
  "4Config\022\r\n\005model\030\001 \001(\t\022\023\n\013config_path\030\002 "
  "\001(\t\022\022\n\nreset_gpio\030\003 \001(\t\022\017\n\007at_port\030\004 \001(\t"
  "\022\016\n\006enable\030\005 \001(\010\"\200\001\n\tEthConfig\022\016\n\006enable"
  "\030\001 \001(\010\022\021\n\tstatic_ip\030\002 \001(\t\022\026\n\016static_gate"
  "way\030\003 \001(\t\022\026\n\016static_netmask\030\004 \001(\t\022\022\n\nsta"
  "tic_dns\030\005 \003(\t\022\014\n\004dhcp\030\006 \001(\010\"B\n\tNtpConfig"
  "\022\023\n\013server_list\030\001 \003(\t\022\020\n\010interval\030\002 \001(\r\022"
  "\016\n\006enable\030\003 \001(\010\"\344\001\n\nGpioConfig\022/\n\010g4_res"
  "et\030\001 \001(\0132\035.es_config.GpioConfig.GpioPin\022"
  "0\n\tsys_reset\030\002 \001(\0132\035.es_config.GpioConfi"
  "g.GpioPin\0221\n\nems_rw_485\030\003 \001(\0132\035.es_confi"
  "g.GpioConfig.GpioPin\032@\n\007GpioPin\022\016\n\006numbe"
  "r\030\001 \001(\r\022\021\n\tis_output\030\002 \001(\010\022\022\n\nis_on1off0"
  "\030\003 \001(\010\"w\n\nOcppConfig\022\013\n\003url\030\001 \001(\t\022\014\n\004hos"
  "t\030\002 \001(\t\022\014\n\004port\030\003 \001(\r\022\014\n\004path\030\004 \001(\t\022\017\n\007p"
  "rofile\030\005 \001(\r\022\021\n\tcert_path\030\006 \001(\t\022\016\n\006enabl"
  "e\030\007 \001(\010\"E\n\tOtaConfig\022\025\n\rdownload_path\030\001 "
  "\001(\t\022\021\n\tcert_path\030\002 \001(\t\022\016\n\006enable\030\003 \001(\010\"\311"
  "\006\n\nUartConfig\0226\n\013ccu_control\030\001 \001(\0132!.es_"
  "config.UartConfig.UartSetting\0224\n\tccu_deb"
  "ug\030\002 \001(\0132!.es_config.UartConfig.UartSett"
  "ing\0227\n\014rfid_control\030\003 \001(\0132!.es_config.Ua"
  "rtConfig.UartSetting\0226\n\013pos_control\030\004 \001("
  "\0132!.es_config.UartConfig.UartSetting\0220\n\005"
  "g4_at\030\005 \001(\0132!.es_config.UartConfig.UartS"
  "etting\032\333\001\n\013UartSetting\022\014\n\004path\030\001 \001(\t\0220\n\010"
  "baudrate\030\002 \001(\0162\036.es_config.UartConfig.Ba"
  "udRate\022\r\n\005bsize\030\003 \001(\r\022,\n\006parity\030\004 \001(\0162\034."
  "es_config.UartConfig.Parity\022/\n\007stopbit\030\005"
  " \001(\0162\036.es_config.UartConfig.StopBits\022\016\n\006"
  "is_485\030\006 \001(\010\022\016\n\006rw_485\030\007 \001(\t\"%\n\006Parity\022\010"
  "\n\004NONE\020\000\022\007\n\003ODD\020\001\022\010\n\004EVEN\020\002\"C\n\010StopBits\022"
  "\023\n\017STOPBIT_INVALID\020\000\022\007\n\003ONE\020\001\022\020\n\014ONE_AND"
  "_HALF\020\002\022\007\n\003TWO\020\003\"\337\001\n\010BaudRate\022\021\n\rBOAUD_I"
  "NVALID\020\000\022\016\n\tBAUD_1200\020\260\t\022\016\n\tBAUD_2400\020\340\022"
  "\022\016\n\tBAUD_4800\020\300%\022\016\n\tBAUD_9600\020\200K\022\020\n\nBAUD"
  "_19200\020\200\226\001\022\020\n\nBAUD_38400\020\200\254\002\022\020\n\nBAUD_576"
  "00\020\200\302\003\022\021\n\013BAUD_115200\020\200\204\007\022\021\n\013BAUD_230400"
  "\020\200\210\016\022\021\n\013BAUD_460800\020\200\220\034\022\021\n\013BAUD_921600\020\200"
  "\2408\"\263\001\n\rNetworkConfig\0226\n\010net_type\030\001 \001(\0162$"
  ".es_config.NetworkConfig.NetworkType\"j\n\013"
  "NetworkType\022\010\n\004NONE\020\000\022\007\n\003ETH\020\001\022\010\n\004WIFI\020\002"
  "\022\006\n\002G4\020\003\022\014\n\010ETH_WIFI\020\004\022\n\n\006ETH_G4\020\005\022\017\n\013ET"
  "H_WIFI_G4\020\006\022\013\n\007WIFI_G4\020\007\"\212\001\n\016WorkModeCon"
  "fig\0225\n\twork_mode\030\001 \001(\0162\".es_config.WorkM"
  "odeConfig.WorkMode\"A\n\010WorkMode\022\021\n\rONLINE"
  "_CHARGE\020\000\022\024\n\020BLUETOOTH_CHARGE\020\005\022\014\n\010EMS_M"
  "ODE\020\006\"\205\001\n\rChargerConfig\022\r\n\005model\030\001 \001(\t\022\023"
  "\n\013max_current\030\002 \001(\r\022\023\n\013min_current\030\003 \001(\r"
  "\022\023\n\013max_voltage\030\004 \001(\r\022\023\n\013min_voltage\030\005 \001"
  "(\r\022\021\n\tmax_power\030\006 \001(\rb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, false, 3349, descriptor_table_protodef_message_2eproto, "message.proto", 
  &descriptor_table_message_2eproto_once, nullptr, 0, 18,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_message_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return descriptor_table_message_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
namespace es_config {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WiFiConfig_EncryptionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool WiFiConfig_EncryptionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WiFiConfig_EncryptionType WiFiConfig::NONE;
constexpr WiFiConfig_EncryptionType WiFiConfig::WPA2;
constexpr WiFiConfig_EncryptionType WiFiConfig::WPA3;
constexpr WiFiConfig_EncryptionType WiFiConfig::EncryptionType_MIN;
constexpr WiFiConfig_EncryptionType WiFiConfig::EncryptionType_MAX;
constexpr int WiFiConfig::EncryptionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WiFiConfig_ProtocolType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[1];
}
bool WiFiConfig_ProtocolType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WiFiConfig_ProtocolType WiFiConfig::AUTO;
constexpr WiFiConfig_ProtocolType WiFiConfig::B_G_N;
constexpr WiFiConfig_ProtocolType WiFiConfig::B_G;
constexpr WiFiConfig_ProtocolType WiFiConfig::ProtocolType_MIN;
constexpr WiFiConfig_ProtocolType WiFiConfig::ProtocolType_MAX;
constexpr int WiFiConfig::ProtocolType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApConfig_EncryptionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[2];
}
bool ApConfig_EncryptionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ApConfig_EncryptionType ApConfig::NONE;
constexpr ApConfig_EncryptionType ApConfig::WPA2;
constexpr ApConfig_EncryptionType ApConfig::WPA3;
constexpr ApConfig_EncryptionType ApConfig::EncryptionType_MIN;
constexpr ApConfig_EncryptionType ApConfig::EncryptionType_MAX;
constexpr int ApConfig::EncryptionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApConfig_ProtocolType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[3];
}
bool ApConfig_ProtocolType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ApConfig_ProtocolType ApConfig::AUTO;
constexpr ApConfig_ProtocolType ApConfig::B_G_N;
constexpr ApConfig_ProtocolType ApConfig::B_G;
constexpr ApConfig_ProtocolType ApConfig::ProtocolType_MIN;
constexpr ApConfig_ProtocolType ApConfig::ProtocolType_MAX;
constexpr int ApConfig::ProtocolType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UartConfig_Parity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[4];
}
bool UartConfig_Parity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UartConfig_Parity UartConfig::NONE;
constexpr UartConfig_Parity UartConfig::ODD;
constexpr UartConfig_Parity UartConfig::EVEN;
constexpr UartConfig_Parity UartConfig::Parity_MIN;
constexpr UartConfig_Parity UartConfig::Parity_MAX;
constexpr int UartConfig::Parity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UartConfig_StopBits_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[5];
}
bool UartConfig_StopBits_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UartConfig_StopBits UartConfig::STOPBIT_INVALID;
constexpr UartConfig_StopBits UartConfig::ONE;
constexpr UartConfig_StopBits UartConfig::ONE_AND_HALF;
constexpr UartConfig_StopBits UartConfig::TWO;
constexpr UartConfig_StopBits UartConfig::StopBits_MIN;
constexpr UartConfig_StopBits UartConfig::StopBits_MAX;
constexpr int UartConfig::StopBits_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UartConfig_BaudRate_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[6];
}
bool UartConfig_BaudRate_IsValid(int value) {
  switch (value) {
    case 0:
    case 1200:
    case 2400:
    case 4800:
    case 9600:
    case 19200:
    case 38400:
    case 57600:
    case 115200:
    case 230400:
    case 460800:
    case 921600:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UartConfig_BaudRate UartConfig::BOAUD_INVALID;
constexpr UartConfig_BaudRate UartConfig::BAUD_1200;
constexpr UartConfig_BaudRate UartConfig::BAUD_2400;
constexpr UartConfig_BaudRate UartConfig::BAUD_4800;
constexpr UartConfig_BaudRate UartConfig::BAUD_9600;
constexpr UartConfig_BaudRate UartConfig::BAUD_19200;
constexpr UartConfig_BaudRate UartConfig::BAUD_38400;
constexpr UartConfig_BaudRate UartConfig::BAUD_57600;
constexpr UartConfig_BaudRate UartConfig::BAUD_115200;
constexpr UartConfig_BaudRate UartConfig::BAUD_230400;
constexpr UartConfig_BaudRate UartConfig::BAUD_460800;
constexpr UartConfig_BaudRate UartConfig::BAUD_921600;
constexpr UartConfig_BaudRate UartConfig::BaudRate_MIN;
constexpr UartConfig_BaudRate UartConfig::BaudRate_MAX;
constexpr int UartConfig::BaudRate_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkConfig_NetworkType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[7];
}
bool NetworkConfig_NetworkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NetworkConfig_NetworkType NetworkConfig::NONE;
constexpr NetworkConfig_NetworkType NetworkConfig::ETH;
constexpr NetworkConfig_NetworkType NetworkConfig::WIFI;
constexpr NetworkConfig_NetworkType NetworkConfig::G4;
constexpr NetworkConfig_NetworkType NetworkConfig::ETH_WIFI;
constexpr NetworkConfig_NetworkType NetworkConfig::ETH_G4;
constexpr NetworkConfig_NetworkType NetworkConfig::ETH_WIFI_G4;
constexpr NetworkConfig_NetworkType NetworkConfig::WIFI_G4;
constexpr NetworkConfig_NetworkType NetworkConfig::NetworkType_MIN;
constexpr NetworkConfig_NetworkType NetworkConfig::NetworkType_MAX;
constexpr int NetworkConfig::NetworkType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkModeConfig_WorkMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[8];
}
bool WorkModeConfig_WorkMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WorkModeConfig_WorkMode WorkModeConfig::ONLINE_CHARGE;
constexpr WorkModeConfig_WorkMode WorkModeConfig::BLUETOOTH_CHARGE;
constexpr WorkModeConfig_WorkMode WorkModeConfig::EMS_MODE;
constexpr WorkModeConfig_WorkMode WorkModeConfig::WorkMode_MIN;
constexpr WorkModeConfig_WorkMode WorkModeConfig::WorkMode_MAX;
constexpr int WorkModeConfig::WorkMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Configuration::_Internal {
 public:
  static const ::es_config::Vendor& vendor(const Configuration* msg);
  static const ::es_config::LogConfig& log(const Configuration* msg);
  static const ::es_config::BleConfig& ble(const Configuration* msg);
  static const ::es_config::WiFiConfig& wifi(const Configuration* msg);
  static const ::es_config::ApConfig& ap(const Configuration* msg);
  static const ::es_config::G4Config& g4(const Configuration* msg);
  static const ::es_config::EthConfig& eth(const Configuration* msg);
  static const ::es_config::NtpConfig& ntp(const Configuration* msg);
  static const ::es_config::GpioConfig& gpio(const Configuration* msg);
  static const ::es_config::OcppConfig& ocpp(const Configuration* msg);
  static const ::es_config::OtaConfig& ota(const Configuration* msg);
  static const ::es_config::UartConfig& uart(const Configuration* msg);
  static const ::es_config::NetworkConfig& network(const Configuration* msg);
  static const ::es_config::WorkModeConfig& workmode(const Configuration* msg);
  static const ::es_config::ChargerConfig& charger(const Configuration* msg);
};

const ::es_config::Vendor&
Configuration::_Internal::vendor(const Configuration* msg) {
  return *msg->vendor_;
}
const ::es_config::LogConfig&
Configuration::_Internal::log(const Configuration* msg) {
  return *msg->log_;
}
const ::es_config::BleConfig&
Configuration::_Internal::ble(const Configuration* msg) {
  return *msg->ble_;
}
const ::es_config::WiFiConfig&
Configuration::_Internal::wifi(const Configuration* msg) {
  return *msg->wifi_;
}
const ::es_config::ApConfig&
Configuration::_Internal::ap(const Configuration* msg) {
  return *msg->ap_;
}
const ::es_config::G4Config&
Configuration::_Internal::g4(const Configuration* msg) {
  return *msg->g4_;
}
const ::es_config::EthConfig&
Configuration::_Internal::eth(const Configuration* msg) {
  return *msg->eth_;
}
const ::es_config::NtpConfig&
Configuration::_Internal::ntp(const Configuration* msg) {
  return *msg->ntp_;
}
const ::es_config::GpioConfig&
Configuration::_Internal::gpio(const Configuration* msg) {
  return *msg->gpio_;
}
const ::es_config::OcppConfig&
Configuration::_Internal::ocpp(const Configuration* msg) {
  return *msg->ocpp_;
}
const ::es_config::OtaConfig&
Configuration::_Internal::ota(const Configuration* msg) {
  return *msg->ota_;
}
const ::es_config::UartConfig&
Configuration::_Internal::uart(const Configuration* msg) {
  return *msg->uart_;
}
const ::es_config::NetworkConfig&
Configuration::_Internal::network(const Configuration* msg) {
  return *msg->network_;
}
const ::es_config::WorkModeConfig&
Configuration::_Internal::workmode(const Configuration* msg) {
  return *msg->workmode_;
}
const ::es_config::ChargerConfig&
Configuration::_Internal::charger(const Configuration* msg) {
  return *msg->charger_;
}
Configuration::Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.Configuration)
}
Configuration::Configuration(const Configuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vendor()) {
    vendor_ = new ::es_config::Vendor(*from.vendor_);
  } else {
    vendor_ = nullptr;
  }
  if (from._internal_has_log()) {
    log_ = new ::es_config::LogConfig(*from.log_);
  } else {
    log_ = nullptr;
  }
  if (from._internal_has_ble()) {
    ble_ = new ::es_config::BleConfig(*from.ble_);
  } else {
    ble_ = nullptr;
  }
  if (from._internal_has_wifi()) {
    wifi_ = new ::es_config::WiFiConfig(*from.wifi_);
  } else {
    wifi_ = nullptr;
  }
  if (from._internal_has_ap()) {
    ap_ = new ::es_config::ApConfig(*from.ap_);
  } else {
    ap_ = nullptr;
  }
  if (from._internal_has_g4()) {
    g4_ = new ::es_config::G4Config(*from.g4_);
  } else {
    g4_ = nullptr;
  }
  if (from._internal_has_eth()) {
    eth_ = new ::es_config::EthConfig(*from.eth_);
  } else {
    eth_ = nullptr;
  }
  if (from._internal_has_ntp()) {
    ntp_ = new ::es_config::NtpConfig(*from.ntp_);
  } else {
    ntp_ = nullptr;
  }
  if (from._internal_has_gpio()) {
    gpio_ = new ::es_config::GpioConfig(*from.gpio_);
  } else {
    gpio_ = nullptr;
  }
  if (from._internal_has_ocpp()) {
    ocpp_ = new ::es_config::OcppConfig(*from.ocpp_);
  } else {
    ocpp_ = nullptr;
  }
  if (from._internal_has_ota()) {
    ota_ = new ::es_config::OtaConfig(*from.ota_);
  } else {
    ota_ = nullptr;
  }
  if (from._internal_has_uart()) {
    uart_ = new ::es_config::UartConfig(*from.uart_);
  } else {
    uart_ = nullptr;
  }
  if (from._internal_has_network()) {
    network_ = new ::es_config::NetworkConfig(*from.network_);
  } else {
    network_ = nullptr;
  }
  if (from._internal_has_workmode()) {
    workmode_ = new ::es_config::WorkModeConfig(*from.workmode_);
  } else {
    workmode_ = nullptr;
  }
  if (from._internal_has_charger()) {
    charger_ = new ::es_config::ChargerConfig(*from.charger_);
  } else {
    charger_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:es_config.Configuration)
}

void Configuration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vendor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&charger_) -
    reinterpret_cast<char*>(&vendor_)) + sizeof(charger_));
}

Configuration::~Configuration() {
  // @@protoc_insertion_point(destructor:es_config.Configuration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Configuration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vendor_;
  if (this != internal_default_instance()) delete log_;
  if (this != internal_default_instance()) delete ble_;
  if (this != internal_default_instance()) delete wifi_;
  if (this != internal_default_instance()) delete ap_;
  if (this != internal_default_instance()) delete g4_;
  if (this != internal_default_instance()) delete eth_;
  if (this != internal_default_instance()) delete ntp_;
  if (this != internal_default_instance()) delete gpio_;
  if (this != internal_default_instance()) delete ocpp_;
  if (this != internal_default_instance()) delete ota_;
  if (this != internal_default_instance()) delete uart_;
  if (this != internal_default_instance()) delete network_;
  if (this != internal_default_instance()) delete workmode_;
  if (this != internal_default_instance()) delete charger_;
}

void Configuration::ArenaDtor(void* object) {
  Configuration* _this = reinterpret_cast< Configuration* >(object);
  (void)_this;
}
void Configuration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Configuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.Configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vendor_ != nullptr) {
    delete vendor_;
  }
  vendor_ = nullptr;
  if (GetArena() == nullptr && log_ != nullptr) {
    delete log_;
  }
  log_ = nullptr;
  if (GetArena() == nullptr && ble_ != nullptr) {
    delete ble_;
  }
  ble_ = nullptr;
  if (GetArena() == nullptr && wifi_ != nullptr) {
    delete wifi_;
  }
  wifi_ = nullptr;
  if (GetArena() == nullptr && ap_ != nullptr) {
    delete ap_;
  }
  ap_ = nullptr;
  if (GetArena() == nullptr && g4_ != nullptr) {
    delete g4_;
  }
  g4_ = nullptr;
  if (GetArena() == nullptr && eth_ != nullptr) {
    delete eth_;
  }
  eth_ = nullptr;
  if (GetArena() == nullptr && ntp_ != nullptr) {
    delete ntp_;
  }
  ntp_ = nullptr;
  if (GetArena() == nullptr && gpio_ != nullptr) {
    delete gpio_;
  }
  gpio_ = nullptr;
  if (GetArena() == nullptr && ocpp_ != nullptr) {
    delete ocpp_;
  }
  ocpp_ = nullptr;
  if (GetArena() == nullptr && ota_ != nullptr) {
    delete ota_;
  }
  ota_ = nullptr;
  if (GetArena() == nullptr && uart_ != nullptr) {
    delete uart_;
  }
  uart_ = nullptr;
  if (GetArena() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
  if (GetArena() == nullptr && workmode_ != nullptr) {
    delete workmode_;
  }
  workmode_ = nullptr;
  if (GetArena() == nullptr && charger_ != nullptr) {
    delete charger_;
  }
  charger_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Configuration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .es_config.Vendor vendor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vendor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.LogConfig log = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_log(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.BleConfig ble = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ble(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.WiFiConfig wifi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_wifi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.ApConfig ap = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.G4Config g4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_g4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.EthConfig eth = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_eth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.NtpConfig ntp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ntp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.GpioConfig gpio = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.OcppConfig ocpp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ocpp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.OtaConfig ota = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ota(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.UartConfig uart = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_uart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.NetworkConfig network = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.WorkModeConfig workmode = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_workmode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.ChargerConfig charger = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_charger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Configuration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.Configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .es_config.Vendor vendor = 1;
  if (this->has_vendor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vendor(this), target, stream);
  }

  // .es_config.LogConfig log = 2;
  if (this->has_log()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::log(this), target, stream);
  }

  // .es_config.BleConfig ble = 3;
  if (this->has_ble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ble(this), target, stream);
  }

  // .es_config.WiFiConfig wifi = 4;
  if (this->has_wifi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::wifi(this), target, stream);
  }

  // .es_config.ApConfig ap = 5;
  if (this->has_ap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ap(this), target, stream);
  }

  // .es_config.G4Config g4 = 6;
  if (this->has_g4()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::g4(this), target, stream);
  }

  // .es_config.EthConfig eth = 7;
  if (this->has_eth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::eth(this), target, stream);
  }

  // .es_config.NtpConfig ntp = 8;
  if (this->has_ntp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::ntp(this), target, stream);
  }

  // .es_config.GpioConfig gpio = 9;
  if (this->has_gpio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::gpio(this), target, stream);
  }

  // .es_config.OcppConfig ocpp = 10;
  if (this->has_ocpp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::ocpp(this), target, stream);
  }

  // .es_config.OtaConfig ota = 11;
  if (this->has_ota()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::ota(this), target, stream);
  }

  // .es_config.UartConfig uart = 12;
  if (this->has_uart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::uart(this), target, stream);
  }

  // .es_config.NetworkConfig network = 13;
  if (this->has_network()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::network(this), target, stream);
  }

  // .es_config.WorkModeConfig workmode = 14;
  if (this->has_workmode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::workmode(this), target, stream);
  }

  // .es_config.ChargerConfig charger = 15;
  if (this->has_charger()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::charger(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.Configuration)
  return target;
}

size_t Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.Configuration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .es_config.Vendor vendor = 1;
  if (this->has_vendor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vendor_);
  }

  // .es_config.LogConfig log = 2;
  if (this->has_log()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_);
  }

  // .es_config.BleConfig ble = 3;
  if (this->has_ble()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ble_);
  }

  // .es_config.WiFiConfig wifi = 4;
  if (this->has_wifi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wifi_);
  }

  // .es_config.ApConfig ap = 5;
  if (this->has_ap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ap_);
  }

  // .es_config.G4Config g4 = 6;
  if (this->has_g4()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g4_);
  }

  // .es_config.EthConfig eth = 7;
  if (this->has_eth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eth_);
  }

  // .es_config.NtpConfig ntp = 8;
  if (this->has_ntp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ntp_);
  }

  // .es_config.GpioConfig gpio = 9;
  if (this->has_gpio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gpio_);
  }

  // .es_config.OcppConfig ocpp = 10;
  if (this->has_ocpp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ocpp_);
  }

  // .es_config.OtaConfig ota = 11;
  if (this->has_ota()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ota_);
  }

  // .es_config.UartConfig uart = 12;
  if (this->has_uart()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uart_);
  }

  // .es_config.NetworkConfig network = 13;
  if (this->has_network()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_);
  }

  // .es_config.WorkModeConfig workmode = 14;
  if (this->has_workmode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *workmode_);
  }

  // .es_config.ChargerConfig charger = 15;
  if (this->has_charger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *charger_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Configuration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  const Configuration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Configuration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.Configuration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.Configuration)
    MergeFrom(*source);
  }
}

void Configuration::MergeFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vendor()) {
    _internal_mutable_vendor()->::es_config::Vendor::MergeFrom(from._internal_vendor());
  }
  if (from.has_log()) {
    _internal_mutable_log()->::es_config::LogConfig::MergeFrom(from._internal_log());
  }
  if (from.has_ble()) {
    _internal_mutable_ble()->::es_config::BleConfig::MergeFrom(from._internal_ble());
  }
  if (from.has_wifi()) {
    _internal_mutable_wifi()->::es_config::WiFiConfig::MergeFrom(from._internal_wifi());
  }
  if (from.has_ap()) {
    _internal_mutable_ap()->::es_config::ApConfig::MergeFrom(from._internal_ap());
  }
  if (from.has_g4()) {
    _internal_mutable_g4()->::es_config::G4Config::MergeFrom(from._internal_g4());
  }
  if (from.has_eth()) {
    _internal_mutable_eth()->::es_config::EthConfig::MergeFrom(from._internal_eth());
  }
  if (from.has_ntp()) {
    _internal_mutable_ntp()->::es_config::NtpConfig::MergeFrom(from._internal_ntp());
  }
  if (from.has_gpio()) {
    _internal_mutable_gpio()->::es_config::GpioConfig::MergeFrom(from._internal_gpio());
  }
  if (from.has_ocpp()) {
    _internal_mutable_ocpp()->::es_config::OcppConfig::MergeFrom(from._internal_ocpp());
  }
  if (from.has_ota()) {
    _internal_mutable_ota()->::es_config::OtaConfig::MergeFrom(from._internal_ota());
  }
  if (from.has_uart()) {
    _internal_mutable_uart()->::es_config::UartConfig::MergeFrom(from._internal_uart());
  }
  if (from.has_network()) {
    _internal_mutable_network()->::es_config::NetworkConfig::MergeFrom(from._internal_network());
  }
  if (from.has_workmode()) {
    _internal_mutable_workmode()->::es_config::WorkModeConfig::MergeFrom(from._internal_workmode());
  }
  if (from.has_charger()) {
    _internal_mutable_charger()->::es_config::ChargerConfig::MergeFrom(from._internal_charger());
  }
}

void Configuration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration::CopyFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {
  return true;
}

void Configuration::InternalSwap(Configuration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Configuration, charger_)
      + sizeof(Configuration::charger_)
      - PROTOBUF_FIELD_OFFSET(Configuration, vendor_)>(
          reinterpret_cast<char*>(&vendor_),
          reinterpret_cast<char*>(&other->vendor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Configuration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Vendor::_Internal {
 public:
};

Vendor::Vendor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.Vendor)
}
Vendor::Vendor(const Vendor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vendor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendor_name().empty()) {
    vendor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendor_name(), 
      GetArena());
  }
  vendor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendor_id().empty()) {
    vendor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendor_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:es_config.Vendor)
}

void Vendor::SharedCtor() {
vendor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vendor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Vendor::~Vendor() {
  // @@protoc_insertion_point(destructor:es_config.Vendor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vendor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vendor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Vendor::ArenaDtor(void* object) {
  Vendor* _this = reinterpret_cast< Vendor* >(object);
  (void)_this;
}
void Vendor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vendor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vendor::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.Vendor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vendor_name_.ClearToEmpty();
  vendor_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vendor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string vendor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vendor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.Vendor.vendor_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vendor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vendor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.Vendor.vendor_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vendor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.Vendor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vendor_name = 1;
  if (this->vendor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor_name().data(), static_cast<int>(this->_internal_vendor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.Vendor.vendor_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vendor_name(), target);
  }

  // string vendor_id = 2;
  if (this->vendor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor_id().data(), static_cast<int>(this->_internal_vendor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.Vendor.vendor_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vendor_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.Vendor)
  return target;
}

size_t Vendor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.Vendor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vendor_name = 1;
  if (this->vendor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor_name());
  }

  // string vendor_id = 2;
  if (this->vendor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vendor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.Vendor)
  GOOGLE_DCHECK_NE(&from, this);
  const Vendor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vendor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.Vendor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.Vendor)
    MergeFrom(*source);
  }
}

void Vendor::MergeFrom(const Vendor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.Vendor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vendor_name().size() > 0) {
    _internal_set_vendor_name(from._internal_vendor_name());
  }
  if (from.vendor_id().size() > 0) {
    _internal_set_vendor_id(from._internal_vendor_id());
  }
}

void Vendor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.Vendor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vendor::CopyFrom(const Vendor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.Vendor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vendor::IsInitialized() const {
  return true;
}

void Vendor::InternalSwap(Vendor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vendor_name_.Swap(&other->vendor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vendor_id_.Swap(&other->vendor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Vendor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogConfig::_Internal {
 public:
};

LogConfig::LogConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.LogConfig)
}
LogConfig::LogConfig(const LogConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  ::memcpy(&file_size_limit_, &from.file_size_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_size_limit_) -
    reinterpret_cast<char*>(&file_size_limit_)) + sizeof(total_size_limit_));
  // @@protoc_insertion_point(copy_constructor:es_config.LogConfig)
}

void LogConfig::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&file_size_limit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_size_limit_) -
    reinterpret_cast<char*>(&file_size_limit_)) + sizeof(total_size_limit_));
}

LogConfig::~LogConfig() {
  // @@protoc_insertion_point(destructor:es_config.LogConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogConfig::ArenaDtor(void* object) {
  LogConfig* _this = reinterpret_cast< LogConfig* >(object);
  (void)_this;
}
void LogConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.LogConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  ::memset(&file_size_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_size_limit_) -
      reinterpret_cast<char*>(&file_size_limit_)) + sizeof(total_size_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.LogConfig.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_size_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          file_size_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_number_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          file_number_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_size_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_size_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.LogConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.LogConfig.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // uint32 file_size_limit = 2;
  if (this->file_size_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_file_size_limit(), target);
  }

  // uint32 file_number_limit = 3;
  if (this->file_number_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_file_number_limit(), target);
  }

  // uint32 total_size_limit = 4;
  if (this->total_size_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_size_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.LogConfig)
  return target;
}

size_t LogConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.LogConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // uint32 file_size_limit = 2;
  if (this->file_size_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_size_limit());
  }

  // uint32 file_number_limit = 3;
  if (this->file_number_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_number_limit());
  }

  // uint32 total_size_limit = 4;
  if (this->total_size_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_size_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.LogConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LogConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.LogConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.LogConfig)
    MergeFrom(*source);
  }
}

void LogConfig::MergeFrom(const LogConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.LogConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.file_size_limit() != 0) {
    _internal_set_file_size_limit(from._internal_file_size_limit());
  }
  if (from.file_number_limit() != 0) {
    _internal_set_file_number_limit(from._internal_file_number_limit());
  }
  if (from.total_size_limit() != 0) {
    _internal_set_total_size_limit(from._internal_total_size_limit());
  }
}

void LogConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.LogConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogConfig::CopyFrom(const LogConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.LogConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogConfig::IsInitialized() const {
  return true;
}

void LogConfig::InternalSwap(LogConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogConfig, total_size_limit_)
      + sizeof(LogConfig::total_size_limit_)
      - PROTOBUF_FIELD_OFFSET(LogConfig, file_size_limit_)>(
          reinterpret_cast<char*>(&file_size_limit_),
          reinterpret_cast<char*>(&other->file_size_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BleConfig::_Internal {
 public:
};

BleConfig::BleConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.BleConfig)
}
BleConfig::BleConfig(const BleConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:es_config.BleConfig)
}

void BleConfig::SharedCtor() {
enable_ = false;
}

BleConfig::~BleConfig() {
  // @@protoc_insertion_point(destructor:es_config.BleConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BleConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BleConfig::ArenaDtor(void* object) {
  BleConfig* _this = reinterpret_cast< BleConfig* >(object);
  (void)_this;
}
void BleConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.BleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BleConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BleConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.BleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.BleConfig)
  return target;
}

size_t BleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.BleConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BleConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.BleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BleConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BleConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.BleConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.BleConfig)
    MergeFrom(*source);
  }
}

void BleConfig::MergeFrom(const BleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.BleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void BleConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.BleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BleConfig::CopyFrom(const BleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.BleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BleConfig::IsInitialized() const {
  return true;
}

void BleConfig::InternalSwap(BleConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BleConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WiFiConfig::_Internal {
 public:
};

WiFiConfig::WiFiConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.WiFiConfig)
}
WiFiConfig::WiFiConfig(const WiFiConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssid().empty()) {
    ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ssid(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  ::memcpy(&encryption_, &from.encryption_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&encryption_)) + sizeof(enable_));
  // @@protoc_insertion_point(copy_constructor:es_config.WiFiConfig)
}

void WiFiConfig::SharedCtor() {
ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&encryption_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&encryption_)) + sizeof(enable_));
}

WiFiConfig::~WiFiConfig() {
  // @@protoc_insertion_point(destructor:es_config.WiFiConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WiFiConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WiFiConfig::ArenaDtor(void* object) {
  WiFiConfig* _this = reinterpret_cast< WiFiConfig* >(object);
  (void)_this;
}
void WiFiConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WiFiConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WiFiConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.WiFiConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty();
  password_.ClearToEmpty();
  ::memset(&encryption_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&encryption_)) + sizeof(enable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WiFiConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.WiFiConfig.ssid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.WiFiConfig.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.WiFiConfig.EncryptionType encryption = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encryption(static_cast<::es_config::WiFiConfig_EncryptionType>(val));
        } else goto handle_unusual;
        continue;
      // .es_config.WiFiConfig.ProtocolType protocol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::es_config::WiFiConfig_ProtocolType>(val));
        } else goto handle_unusual;
        continue;
      // bool enable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WiFiConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.WiFiConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.WiFiConfig.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.WiFiConfig.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // .es_config.WiFiConfig.EncryptionType encryption = 3;
  if (this->encryption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_encryption(), target);
  }

  // .es_config.WiFiConfig.ProtocolType protocol = 4;
  if (this->protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_protocol(), target);
  }

  // bool enable = 5;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.WiFiConfig)
  return target;
}

size_t WiFiConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.WiFiConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .es_config.WiFiConfig.EncryptionType encryption = 3;
  if (this->encryption() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encryption());
  }

  // .es_config.WiFiConfig.ProtocolType protocol = 4;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  // bool enable = 5;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WiFiConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.WiFiConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const WiFiConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WiFiConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.WiFiConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.WiFiConfig)
    MergeFrom(*source);
  }
}

void WiFiConfig::MergeFrom(const WiFiConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.WiFiConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssid().size() > 0) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.encryption() != 0) {
    _internal_set_encryption(from._internal_encryption());
  }
  if (from.protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void WiFiConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.WiFiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WiFiConfig::CopyFrom(const WiFiConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.WiFiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WiFiConfig::IsInitialized() const {
  return true;
}

void WiFiConfig::InternalSwap(WiFiConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ssid_.Swap(&other->ssid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WiFiConfig, enable_)
      + sizeof(WiFiConfig::enable_)
      - PROTOBUF_FIELD_OFFSET(WiFiConfig, encryption_)>(
          reinterpret_cast<char*>(&encryption_),
          reinterpret_cast<char*>(&other->encryption_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WiFiConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ApConfig::_Internal {
 public:
};

ApConfig::ApConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.ApConfig)
}
ApConfig::ApConfig(const ApConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssid().empty()) {
    ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ssid(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  ::memcpy(&encryption_, &from.encryption_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&encryption_)) + sizeof(enable_));
  // @@protoc_insertion_point(copy_constructor:es_config.ApConfig)
}

void ApConfig::SharedCtor() {
ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&encryption_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&encryption_)) + sizeof(enable_));
}

ApConfig::~ApConfig() {
  // @@protoc_insertion_point(destructor:es_config.ApConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ApConfig::ArenaDtor(void* object) {
  ApConfig* _this = reinterpret_cast< ApConfig* >(object);
  (void)_this;
}
void ApConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.ApConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty();
  password_.ClearToEmpty();
  ::memset(&encryption_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&encryption_)) + sizeof(enable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.ApConfig.ssid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.ApConfig.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.ApConfig.EncryptionType encryption = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encryption(static_cast<::es_config::ApConfig_EncryptionType>(val));
        } else goto handle_unusual;
        continue;
      // .es_config.ApConfig.ProtocolType protocol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::es_config::ApConfig_ProtocolType>(val));
        } else goto handle_unusual;
        continue;
      // bool enable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.ApConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.ApConfig.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.ApConfig.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // .es_config.ApConfig.EncryptionType encryption = 3;
  if (this->encryption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_encryption(), target);
  }

  // .es_config.ApConfig.ProtocolType protocol = 4;
  if (this->protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_protocol(), target);
  }

  // bool enable = 5;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.ApConfig)
  return target;
}

size_t ApConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.ApConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .es_config.ApConfig.EncryptionType encryption = 3;
  if (this->encryption() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encryption());
  }

  // .es_config.ApConfig.ProtocolType protocol = 4;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  // bool enable = 5;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.ApConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ApConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.ApConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.ApConfig)
    MergeFrom(*source);
  }
}

void ApConfig::MergeFrom(const ApConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.ApConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssid().size() > 0) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.encryption() != 0) {
    _internal_set_encryption(from._internal_encryption());
  }
  if (from.protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void ApConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.ApConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApConfig::CopyFrom(const ApConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.ApConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApConfig::IsInitialized() const {
  return true;
}

void ApConfig::InternalSwap(ApConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ssid_.Swap(&other->ssid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApConfig, enable_)
      + sizeof(ApConfig::enable_)
      - PROTOBUF_FIELD_OFFSET(ApConfig, encryption_)>(
          reinterpret_cast<char*>(&encryption_),
          reinterpret_cast<char*>(&other->encryption_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class G4Config::_Internal {
 public:
};

G4Config::G4Config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.G4Config)
}
G4Config::G4Config(const G4Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model().empty()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArena());
  }
  config_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_path().empty()) {
    config_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_config_path(), 
      GetArena());
  }
  reset_gpio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reset_gpio().empty()) {
    reset_gpio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reset_gpio(), 
      GetArena());
  }
  at_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_at_port().empty()) {
    at_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_at_port(), 
      GetArena());
  }
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:es_config.G4Config)
}

void G4Config::SharedCtor() {
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
config_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reset_gpio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
at_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
enable_ = false;
}

G4Config::~G4Config() {
  // @@protoc_insertion_point(destructor:es_config.G4Config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void G4Config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_gpio_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  at_port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void G4Config::ArenaDtor(void* object) {
  G4Config* _this = reinterpret_cast< G4Config* >(object);
  (void)_this;
}
void G4Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void G4Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void G4Config::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.G4Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.ClearToEmpty();
  config_path_.ClearToEmpty();
  reset_gpio_.ClearToEmpty();
  at_port_.ClearToEmpty();
  enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* G4Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.G4Config.model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string config_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_config_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.G4Config.config_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reset_gpio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reset_gpio();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.G4Config.reset_gpio"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string at_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_at_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.G4Config.at_port"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* G4Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.G4Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.G4Config.model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // string config_path = 2;
  if (this->config_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_config_path().data(), static_cast<int>(this->_internal_config_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.G4Config.config_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_config_path(), target);
  }

  // string reset_gpio = 3;
  if (this->reset_gpio().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reset_gpio().data(), static_cast<int>(this->_internal_reset_gpio().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.G4Config.reset_gpio");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reset_gpio(), target);
  }

  // string at_port = 4;
  if (this->at_port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_at_port().data(), static_cast<int>(this->_internal_at_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.G4Config.at_port");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_at_port(), target);
  }

  // bool enable = 5;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.G4Config)
  return target;
}

size_t G4Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.G4Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string config_path = 2;
  if (this->config_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config_path());
  }

  // string reset_gpio = 3;
  if (this->reset_gpio().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reset_gpio());
  }

  // string at_port = 4;
  if (this->at_port().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_at_port());
  }

  // bool enable = 5;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void G4Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.G4Config)
  GOOGLE_DCHECK_NE(&from, this);
  const G4Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<G4Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.G4Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.G4Config)
    MergeFrom(*source);
  }
}

void G4Config::MergeFrom(const G4Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.G4Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model().size() > 0) {
    _internal_set_model(from._internal_model());
  }
  if (from.config_path().size() > 0) {
    _internal_set_config_path(from._internal_config_path());
  }
  if (from.reset_gpio().size() > 0) {
    _internal_set_reset_gpio(from._internal_reset_gpio());
  }
  if (from.at_port().size() > 0) {
    _internal_set_at_port(from._internal_at_port());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void G4Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.G4Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void G4Config::CopyFrom(const G4Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.G4Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool G4Config::IsInitialized() const {
  return true;
}

void G4Config::InternalSwap(G4Config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  config_path_.Swap(&other->config_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reset_gpio_.Swap(&other->reset_gpio_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  at_port_.Swap(&other->at_port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata G4Config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EthConfig::_Internal {
 public:
};

EthConfig::EthConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  static_dns_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.EthConfig)
}
EthConfig::EthConfig(const EthConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      static_dns_(from.static_dns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  static_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_static_ip().empty()) {
    static_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_static_ip(), 
      GetArena());
  }
  static_gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_static_gateway().empty()) {
    static_gateway_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_static_gateway(), 
      GetArena());
  }
  static_netmask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_static_netmask().empty()) {
    static_netmask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_static_netmask(), 
      GetArena());
  }
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&dhcp_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(dhcp_));
  // @@protoc_insertion_point(copy_constructor:es_config.EthConfig)
}

void EthConfig::SharedCtor() {
static_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
static_gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
static_netmask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dhcp_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(dhcp_));
}

EthConfig::~EthConfig() {
  // @@protoc_insertion_point(destructor:es_config.EthConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EthConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  static_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  static_gateway_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  static_netmask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EthConfig::ArenaDtor(void* object) {
  EthConfig* _this = reinterpret_cast< EthConfig* >(object);
  (void)_this;
}
void EthConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EthConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EthConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.EthConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  static_dns_.Clear();
  static_ip_.ClearToEmpty();
  static_gateway_.ClearToEmpty();
  static_netmask_.ClearToEmpty();
  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dhcp_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(dhcp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EthConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string static_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_static_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.EthConfig.static_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string static_gateway = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_static_gateway();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.EthConfig.static_gateway"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string static_netmask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_static_netmask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.EthConfig.static_netmask"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string static_dns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_static_dns();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.EthConfig.static_dns"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool dhcp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          dhcp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EthConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.EthConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // string static_ip = 2;
  if (this->static_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_static_ip().data(), static_cast<int>(this->_internal_static_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.EthConfig.static_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_static_ip(), target);
  }

  // string static_gateway = 3;
  if (this->static_gateway().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_static_gateway().data(), static_cast<int>(this->_internal_static_gateway().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.EthConfig.static_gateway");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_static_gateway(), target);
  }

  // string static_netmask = 4;
  if (this->static_netmask().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_static_netmask().data(), static_cast<int>(this->_internal_static_netmask().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.EthConfig.static_netmask");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_static_netmask(), target);
  }

  // repeated string static_dns = 5;
  for (int i = 0, n = this->_internal_static_dns_size(); i < n; i++) {
    const auto& s = this->_internal_static_dns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.EthConfig.static_dns");
    target = stream->WriteString(5, s, target);
  }

  // bool dhcp = 6;
  if (this->dhcp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_dhcp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.EthConfig)
  return target;
}

size_t EthConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.EthConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string static_dns = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(static_dns_.size());
  for (int i = 0, n = static_dns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      static_dns_.Get(i));
  }

  // string static_ip = 2;
  if (this->static_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_static_ip());
  }

  // string static_gateway = 3;
  if (this->static_gateway().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_static_gateway());
  }

  // string static_netmask = 4;
  if (this->static_netmask().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_static_netmask());
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // bool dhcp = 6;
  if (this->dhcp() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EthConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.EthConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const EthConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EthConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.EthConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.EthConfig)
    MergeFrom(*source);
  }
}

void EthConfig::MergeFrom(const EthConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.EthConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  static_dns_.MergeFrom(from.static_dns_);
  if (from.static_ip().size() > 0) {
    _internal_set_static_ip(from._internal_static_ip());
  }
  if (from.static_gateway().size() > 0) {
    _internal_set_static_gateway(from._internal_static_gateway());
  }
  if (from.static_netmask().size() > 0) {
    _internal_set_static_netmask(from._internal_static_netmask());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.dhcp() != 0) {
    _internal_set_dhcp(from._internal_dhcp());
  }
}

void EthConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.EthConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EthConfig::CopyFrom(const EthConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.EthConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EthConfig::IsInitialized() const {
  return true;
}

void EthConfig::InternalSwap(EthConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  static_dns_.InternalSwap(&other->static_dns_);
  static_ip_.Swap(&other->static_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  static_gateway_.Swap(&other->static_gateway_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  static_netmask_.Swap(&other->static_netmask_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EthConfig, dhcp_)
      + sizeof(EthConfig::dhcp_)
      - PROTOBUF_FIELD_OFFSET(EthConfig, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EthConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NtpConfig::_Internal {
 public:
};

NtpConfig::NtpConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  server_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.NtpConfig)
}
NtpConfig::NtpConfig(const NtpConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      server_list_(from.server_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&interval_, &from.interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&interval_)) + sizeof(enable_));
  // @@protoc_insertion_point(copy_constructor:es_config.NtpConfig)
}

void NtpConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&interval_)) + sizeof(enable_));
}

NtpConfig::~NtpConfig() {
  // @@protoc_insertion_point(destructor:es_config.NtpConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NtpConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NtpConfig::ArenaDtor(void* object) {
  NtpConfig* _this = reinterpret_cast< NtpConfig* >(object);
  (void)_this;
}
void NtpConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NtpConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NtpConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.NtpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_list_.Clear();
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(enable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NtpConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string server_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_server_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.NtpConfig.server_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NtpConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.NtpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string server_list = 1;
  for (int i = 0, n = this->_internal_server_list_size(); i < n; i++) {
    const auto& s = this->_internal_server_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.NtpConfig.server_list");
    target = stream->WriteString(1, s, target);
  }

  // uint32 interval = 2;
  if (this->interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_interval(), target);
  }

  // bool enable = 3;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.NtpConfig)
  return target;
}

size_t NtpConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.NtpConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string server_list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(server_list_.size());
  for (int i = 0, n = server_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      server_list_.Get(i));
  }

  // uint32 interval = 2;
  if (this->interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_interval());
  }

  // bool enable = 3;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NtpConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.NtpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NtpConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NtpConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.NtpConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.NtpConfig)
    MergeFrom(*source);
  }
}

void NtpConfig::MergeFrom(const NtpConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.NtpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_list_.MergeFrom(from.server_list_);
  if (from.interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void NtpConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.NtpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtpConfig::CopyFrom(const NtpConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.NtpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtpConfig::IsInitialized() const {
  return true;
}

void NtpConfig::InternalSwap(NtpConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  server_list_.InternalSwap(&other->server_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NtpConfig, enable_)
      + sizeof(NtpConfig::enable_)
      - PROTOBUF_FIELD_OFFSET(NtpConfig, interval_)>(
          reinterpret_cast<char*>(&interval_),
          reinterpret_cast<char*>(&other->interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NtpConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GpioConfig_GpioPin::_Internal {
 public:
};

GpioConfig_GpioPin::GpioConfig_GpioPin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.GpioConfig.GpioPin)
}
GpioConfig_GpioPin::GpioConfig_GpioPin(const GpioConfig_GpioPin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_on1off0_) -
    reinterpret_cast<char*>(&number_)) + sizeof(is_on1off0_));
  // @@protoc_insertion_point(copy_constructor:es_config.GpioConfig.GpioPin)
}

void GpioConfig_GpioPin::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_on1off0_) -
    reinterpret_cast<char*>(&number_)) + sizeof(is_on1off0_));
}

GpioConfig_GpioPin::~GpioConfig_GpioPin() {
  // @@protoc_insertion_point(destructor:es_config.GpioConfig.GpioPin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpioConfig_GpioPin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GpioConfig_GpioPin::ArenaDtor(void* object) {
  GpioConfig_GpioPin* _this = reinterpret_cast< GpioConfig_GpioPin* >(object);
  (void)_this;
}
void GpioConfig_GpioPin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpioConfig_GpioPin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpioConfig_GpioPin::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.GpioConfig.GpioPin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_on1off0_) -
      reinterpret_cast<char*>(&number_)) + sizeof(is_on1off0_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpioConfig_GpioPin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_on1off0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_on1off0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpioConfig_GpioPin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.GpioConfig.GpioPin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_number(), target);
  }

  // bool is_output = 2;
  if (this->is_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_output(), target);
  }

  // bool is_on1off0 = 3;
  if (this->is_on1off0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_on1off0(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.GpioConfig.GpioPin)
  return target;
}

size_t GpioConfig_GpioPin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.GpioConfig.GpioPin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number());
  }

  // bool is_output = 2;
  if (this->is_output() != 0) {
    total_size += 1 + 1;
  }

  // bool is_on1off0 = 3;
  if (this->is_on1off0() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpioConfig_GpioPin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.GpioConfig.GpioPin)
  GOOGLE_DCHECK_NE(&from, this);
  const GpioConfig_GpioPin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpioConfig_GpioPin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.GpioConfig.GpioPin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.GpioConfig.GpioPin)
    MergeFrom(*source);
  }
}

void GpioConfig_GpioPin::MergeFrom(const GpioConfig_GpioPin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.GpioConfig.GpioPin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.is_output() != 0) {
    _internal_set_is_output(from._internal_is_output());
  }
  if (from.is_on1off0() != 0) {
    _internal_set_is_on1off0(from._internal_is_on1off0());
  }
}

void GpioConfig_GpioPin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.GpioConfig.GpioPin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpioConfig_GpioPin::CopyFrom(const GpioConfig_GpioPin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.GpioConfig.GpioPin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioConfig_GpioPin::IsInitialized() const {
  return true;
}

void GpioConfig_GpioPin::InternalSwap(GpioConfig_GpioPin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpioConfig_GpioPin, is_on1off0_)
      + sizeof(GpioConfig_GpioPin::is_on1off0_)
      - PROTOBUF_FIELD_OFFSET(GpioConfig_GpioPin, number_)>(
          reinterpret_cast<char*>(&number_),
          reinterpret_cast<char*>(&other->number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpioConfig_GpioPin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GpioConfig::_Internal {
 public:
  static const ::es_config::GpioConfig_GpioPin& g4_reset(const GpioConfig* msg);
  static const ::es_config::GpioConfig_GpioPin& sys_reset(const GpioConfig* msg);
  static const ::es_config::GpioConfig_GpioPin& ems_rw_485(const GpioConfig* msg);
};

const ::es_config::GpioConfig_GpioPin&
GpioConfig::_Internal::g4_reset(const GpioConfig* msg) {
  return *msg->g4_reset_;
}
const ::es_config::GpioConfig_GpioPin&
GpioConfig::_Internal::sys_reset(const GpioConfig* msg) {
  return *msg->sys_reset_;
}
const ::es_config::GpioConfig_GpioPin&
GpioConfig::_Internal::ems_rw_485(const GpioConfig* msg) {
  return *msg->ems_rw_485_;
}
GpioConfig::GpioConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.GpioConfig)
}
GpioConfig::GpioConfig(const GpioConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_g4_reset()) {
    g4_reset_ = new ::es_config::GpioConfig_GpioPin(*from.g4_reset_);
  } else {
    g4_reset_ = nullptr;
  }
  if (from._internal_has_sys_reset()) {
    sys_reset_ = new ::es_config::GpioConfig_GpioPin(*from.sys_reset_);
  } else {
    sys_reset_ = nullptr;
  }
  if (from._internal_has_ems_rw_485()) {
    ems_rw_485_ = new ::es_config::GpioConfig_GpioPin(*from.ems_rw_485_);
  } else {
    ems_rw_485_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:es_config.GpioConfig)
}

void GpioConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&g4_reset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ems_rw_485_) -
    reinterpret_cast<char*>(&g4_reset_)) + sizeof(ems_rw_485_));
}

GpioConfig::~GpioConfig() {
  // @@protoc_insertion_point(destructor:es_config.GpioConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpioConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete g4_reset_;
  if (this != internal_default_instance()) delete sys_reset_;
  if (this != internal_default_instance()) delete ems_rw_485_;
}

void GpioConfig::ArenaDtor(void* object) {
  GpioConfig* _this = reinterpret_cast< GpioConfig* >(object);
  (void)_this;
}
void GpioConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpioConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpioConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.GpioConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && g4_reset_ != nullptr) {
    delete g4_reset_;
  }
  g4_reset_ = nullptr;
  if (GetArena() == nullptr && sys_reset_ != nullptr) {
    delete sys_reset_;
  }
  sys_reset_ = nullptr;
  if (GetArena() == nullptr && ems_rw_485_ != nullptr) {
    delete ems_rw_485_;
  }
  ems_rw_485_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpioConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .es_config.GpioConfig.GpioPin g4_reset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_g4_reset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.GpioConfig.GpioPin sys_reset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sys_reset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.GpioConfig.GpioPin ems_rw_485 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ems_rw_485(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpioConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.GpioConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .es_config.GpioConfig.GpioPin g4_reset = 1;
  if (this->has_g4_reset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::g4_reset(this), target, stream);
  }

  // .es_config.GpioConfig.GpioPin sys_reset = 2;
  if (this->has_sys_reset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sys_reset(this), target, stream);
  }

  // .es_config.GpioConfig.GpioPin ems_rw_485 = 3;
  if (this->has_ems_rw_485()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ems_rw_485(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.GpioConfig)
  return target;
}

size_t GpioConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.GpioConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .es_config.GpioConfig.GpioPin g4_reset = 1;
  if (this->has_g4_reset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g4_reset_);
  }

  // .es_config.GpioConfig.GpioPin sys_reset = 2;
  if (this->has_sys_reset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sys_reset_);
  }

  // .es_config.GpioConfig.GpioPin ems_rw_485 = 3;
  if (this->has_ems_rw_485()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ems_rw_485_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpioConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.GpioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GpioConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpioConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.GpioConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.GpioConfig)
    MergeFrom(*source);
  }
}

void GpioConfig::MergeFrom(const GpioConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.GpioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_g4_reset()) {
    _internal_mutable_g4_reset()->::es_config::GpioConfig_GpioPin::MergeFrom(from._internal_g4_reset());
  }
  if (from.has_sys_reset()) {
    _internal_mutable_sys_reset()->::es_config::GpioConfig_GpioPin::MergeFrom(from._internal_sys_reset());
  }
  if (from.has_ems_rw_485()) {
    _internal_mutable_ems_rw_485()->::es_config::GpioConfig_GpioPin::MergeFrom(from._internal_ems_rw_485());
  }
}

void GpioConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.GpioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpioConfig::CopyFrom(const GpioConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.GpioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioConfig::IsInitialized() const {
  return true;
}

void GpioConfig::InternalSwap(GpioConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpioConfig, ems_rw_485_)
      + sizeof(GpioConfig::ems_rw_485_)
      - PROTOBUF_FIELD_OFFSET(GpioConfig, g4_reset_)>(
          reinterpret_cast<char*>(&g4_reset_),
          reinterpret_cast<char*>(&other->g4_reset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpioConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OcppConfig::_Internal {
 public:
};

OcppConfig::OcppConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.OcppConfig)
}
OcppConfig::OcppConfig(const OcppConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host(), 
      GetArena());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  cert_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cert_path().empty()) {
    cert_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cert_path(), 
      GetArena());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&port_)) + sizeof(enable_));
  // @@protoc_insertion_point(copy_constructor:es_config.OcppConfig)
}

void OcppConfig::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cert_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&port_)) + sizeof(enable_));
}

OcppConfig::~OcppConfig() {
  // @@protoc_insertion_point(destructor:es_config.OcppConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OcppConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cert_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OcppConfig::ArenaDtor(void* object) {
  OcppConfig* _this = reinterpret_cast< OcppConfig* >(object);
  (void)_this;
}
void OcppConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OcppConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OcppConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.OcppConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty();
  host_.ClearToEmpty();
  path_.ClearToEmpty();
  cert_path_.ClearToEmpty();
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&port_)) + sizeof(enable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OcppConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.OcppConfig.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.OcppConfig.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.OcppConfig.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 profile = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          profile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cert_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_cert_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.OcppConfig.cert_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OcppConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.OcppConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.OcppConfig.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.OcppConfig.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  // string path = 4;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.OcppConfig.path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_path(), target);
  }

  // uint32 profile = 5;
  if (this->profile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_profile(), target);
  }

  // string cert_path = 6;
  if (this->cert_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cert_path().data(), static_cast<int>(this->_internal_cert_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.OcppConfig.cert_path");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cert_path(), target);
  }

  // bool enable = 7;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.OcppConfig)
  return target;
}

size_t OcppConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.OcppConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string path = 4;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string cert_path = 6;
  if (this->cert_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cert_path());
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // uint32 profile = 5;
  if (this->profile() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_profile());
  }

  // bool enable = 7;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcppConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.OcppConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OcppConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OcppConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.OcppConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.OcppConfig)
    MergeFrom(*source);
  }
}

void OcppConfig::MergeFrom(const OcppConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.OcppConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {
    _internal_set_url(from._internal_url());
  }
  if (from.host().size() > 0) {
    _internal_set_host(from._internal_host());
  }
  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.cert_path().size() > 0) {
    _internal_set_cert_path(from._internal_cert_path());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.profile() != 0) {
    _internal_set_profile(from._internal_profile());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void OcppConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.OcppConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OcppConfig::CopyFrom(const OcppConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.OcppConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcppConfig::IsInitialized() const {
  return true;
}

void OcppConfig::InternalSwap(OcppConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cert_path_.Swap(&other->cert_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OcppConfig, enable_)
      + sizeof(OcppConfig::enable_)
      - PROTOBUF_FIELD_OFFSET(OcppConfig, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OcppConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OtaConfig::_Internal {
 public:
};

OtaConfig::OtaConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.OtaConfig)
}
OtaConfig::OtaConfig(const OtaConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  download_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_download_path().empty()) {
    download_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_download_path(), 
      GetArena());
  }
  cert_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cert_path().empty()) {
    cert_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cert_path(), 
      GetArena());
  }
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:es_config.OtaConfig)
}

void OtaConfig::SharedCtor() {
download_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cert_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
enable_ = false;
}

OtaConfig::~OtaConfig() {
  // @@protoc_insertion_point(destructor:es_config.OtaConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OtaConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  download_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cert_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OtaConfig::ArenaDtor(void* object) {
  OtaConfig* _this = reinterpret_cast< OtaConfig* >(object);
  (void)_this;
}
void OtaConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OtaConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OtaConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.OtaConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  download_path_.ClearToEmpty();
  cert_path_.ClearToEmpty();
  enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OtaConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string download_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_download_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.OtaConfig.download_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cert_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cert_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.OtaConfig.cert_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OtaConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.OtaConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string download_path = 1;
  if (this->download_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_download_path().data(), static_cast<int>(this->_internal_download_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.OtaConfig.download_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_download_path(), target);
  }

  // string cert_path = 2;
  if (this->cert_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cert_path().data(), static_cast<int>(this->_internal_cert_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.OtaConfig.cert_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cert_path(), target);
  }

  // bool enable = 3;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.OtaConfig)
  return target;
}

size_t OtaConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.OtaConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string download_path = 1;
  if (this->download_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_download_path());
  }

  // string cert_path = 2;
  if (this->cert_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cert_path());
  }

  // bool enable = 3;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OtaConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.OtaConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OtaConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OtaConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.OtaConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.OtaConfig)
    MergeFrom(*source);
  }
}

void OtaConfig::MergeFrom(const OtaConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.OtaConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.download_path().size() > 0) {
    _internal_set_download_path(from._internal_download_path());
  }
  if (from.cert_path().size() > 0) {
    _internal_set_cert_path(from._internal_cert_path());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void OtaConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.OtaConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtaConfig::CopyFrom(const OtaConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.OtaConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtaConfig::IsInitialized() const {
  return true;
}

void OtaConfig::InternalSwap(OtaConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  download_path_.Swap(&other->download_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cert_path_.Swap(&other->cert_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OtaConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UartConfig_UartSetting::_Internal {
 public:
};

UartConfig_UartSetting::UartConfig_UartSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.UartConfig.UartSetting)
}
UartConfig_UartSetting::UartConfig_UartSetting(const UartConfig_UartSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  rw_485_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rw_485().empty()) {
    rw_485_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rw_485(), 
      GetArena());
  }
  ::memcpy(&baudrate_, &from.baudrate_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_485_) -
    reinterpret_cast<char*>(&baudrate_)) + sizeof(is_485_));
  // @@protoc_insertion_point(copy_constructor:es_config.UartConfig.UartSetting)
}

void UartConfig_UartSetting::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rw_485_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&baudrate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_485_) -
    reinterpret_cast<char*>(&baudrate_)) + sizeof(is_485_));
}

UartConfig_UartSetting::~UartConfig_UartSetting() {
  // @@protoc_insertion_point(destructor:es_config.UartConfig.UartSetting)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UartConfig_UartSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rw_485_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UartConfig_UartSetting::ArenaDtor(void* object) {
  UartConfig_UartSetting* _this = reinterpret_cast< UartConfig_UartSetting* >(object);
  (void)_this;
}
void UartConfig_UartSetting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UartConfig_UartSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UartConfig_UartSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.UartConfig.UartSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  rw_485_.ClearToEmpty();
  ::memset(&baudrate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_485_) -
      reinterpret_cast<char*>(&baudrate_)) + sizeof(is_485_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UartConfig_UartSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.UartConfig.UartSetting.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.UartConfig.BaudRate baudrate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_baudrate(static_cast<::es_config::UartConfig_BaudRate>(val));
        } else goto handle_unusual;
        continue;
      // uint32 bsize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.UartConfig.Parity parity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_parity(static_cast<::es_config::UartConfig_Parity>(val));
        } else goto handle_unusual;
        continue;
      // .es_config.UartConfig.StopBits stopbit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stopbit(static_cast<::es_config::UartConfig_StopBits>(val));
        } else goto handle_unusual;
        continue;
      // bool is_485 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_485_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rw_485 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_rw_485();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.UartConfig.UartSetting.rw_485"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UartConfig_UartSetting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.UartConfig.UartSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.UartConfig.UartSetting.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .es_config.UartConfig.BaudRate baudrate = 2;
  if (this->baudrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_baudrate(), target);
  }

  // uint32 bsize = 3;
  if (this->bsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bsize(), target);
  }

  // .es_config.UartConfig.Parity parity = 4;
  if (this->parity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_parity(), target);
  }

  // .es_config.UartConfig.StopBits stopbit = 5;
  if (this->stopbit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_stopbit(), target);
  }

  // bool is_485 = 6;
  if (this->is_485() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_485(), target);
  }

  // string rw_485 = 7;
  if (this->rw_485().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rw_485().data(), static_cast<int>(this->_internal_rw_485().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.UartConfig.UartSetting.rw_485");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_rw_485(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.UartConfig.UartSetting)
  return target;
}

size_t UartConfig_UartSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.UartConfig.UartSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string rw_485 = 7;
  if (this->rw_485().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rw_485());
  }

  // .es_config.UartConfig.BaudRate baudrate = 2;
  if (this->baudrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_baudrate());
  }

  // uint32 bsize = 3;
  if (this->bsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bsize());
  }

  // .es_config.UartConfig.Parity parity = 4;
  if (this->parity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parity());
  }

  // .es_config.UartConfig.StopBits stopbit = 5;
  if (this->stopbit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stopbit());
  }

  // bool is_485 = 6;
  if (this->is_485() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UartConfig_UartSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.UartConfig.UartSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const UartConfig_UartSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UartConfig_UartSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.UartConfig.UartSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.UartConfig.UartSetting)
    MergeFrom(*source);
  }
}

void UartConfig_UartSetting::MergeFrom(const UartConfig_UartSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.UartConfig.UartSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.rw_485().size() > 0) {
    _internal_set_rw_485(from._internal_rw_485());
  }
  if (from.baudrate() != 0) {
    _internal_set_baudrate(from._internal_baudrate());
  }
  if (from.bsize() != 0) {
    _internal_set_bsize(from._internal_bsize());
  }
  if (from.parity() != 0) {
    _internal_set_parity(from._internal_parity());
  }
  if (from.stopbit() != 0) {
    _internal_set_stopbit(from._internal_stopbit());
  }
  if (from.is_485() != 0) {
    _internal_set_is_485(from._internal_is_485());
  }
}

void UartConfig_UartSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.UartConfig.UartSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UartConfig_UartSetting::CopyFrom(const UartConfig_UartSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.UartConfig.UartSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UartConfig_UartSetting::IsInitialized() const {
  return true;
}

void UartConfig_UartSetting::InternalSwap(UartConfig_UartSetting* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rw_485_.Swap(&other->rw_485_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UartConfig_UartSetting, is_485_)
      + sizeof(UartConfig_UartSetting::is_485_)
      - PROTOBUF_FIELD_OFFSET(UartConfig_UartSetting, baudrate_)>(
          reinterpret_cast<char*>(&baudrate_),
          reinterpret_cast<char*>(&other->baudrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UartConfig_UartSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UartConfig::_Internal {
 public:
  static const ::es_config::UartConfig_UartSetting& ccu_control(const UartConfig* msg);
  static const ::es_config::UartConfig_UartSetting& ccu_debug(const UartConfig* msg);
  static const ::es_config::UartConfig_UartSetting& rfid_control(const UartConfig* msg);
  static const ::es_config::UartConfig_UartSetting& pos_control(const UartConfig* msg);
  static const ::es_config::UartConfig_UartSetting& g4_at(const UartConfig* msg);
};

const ::es_config::UartConfig_UartSetting&
UartConfig::_Internal::ccu_control(const UartConfig* msg) {
  return *msg->ccu_control_;
}
const ::es_config::UartConfig_UartSetting&
UartConfig::_Internal::ccu_debug(const UartConfig* msg) {
  return *msg->ccu_debug_;
}
const ::es_config::UartConfig_UartSetting&
UartConfig::_Internal::rfid_control(const UartConfig* msg) {
  return *msg->rfid_control_;
}
const ::es_config::UartConfig_UartSetting&
UartConfig::_Internal::pos_control(const UartConfig* msg) {
  return *msg->pos_control_;
}
const ::es_config::UartConfig_UartSetting&
UartConfig::_Internal::g4_at(const UartConfig* msg) {
  return *msg->g4_at_;
}
UartConfig::UartConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.UartConfig)
}
UartConfig::UartConfig(const UartConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ccu_control()) {
    ccu_control_ = new ::es_config::UartConfig_UartSetting(*from.ccu_control_);
  } else {
    ccu_control_ = nullptr;
  }
  if (from._internal_has_ccu_debug()) {
    ccu_debug_ = new ::es_config::UartConfig_UartSetting(*from.ccu_debug_);
  } else {
    ccu_debug_ = nullptr;
  }
  if (from._internal_has_rfid_control()) {
    rfid_control_ = new ::es_config::UartConfig_UartSetting(*from.rfid_control_);
  } else {
    rfid_control_ = nullptr;
  }
  if (from._internal_has_pos_control()) {
    pos_control_ = new ::es_config::UartConfig_UartSetting(*from.pos_control_);
  } else {
    pos_control_ = nullptr;
  }
  if (from._internal_has_g4_at()) {
    g4_at_ = new ::es_config::UartConfig_UartSetting(*from.g4_at_);
  } else {
    g4_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:es_config.UartConfig)
}

void UartConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ccu_control_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&g4_at_) -
    reinterpret_cast<char*>(&ccu_control_)) + sizeof(g4_at_));
}

UartConfig::~UartConfig() {
  // @@protoc_insertion_point(destructor:es_config.UartConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UartConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ccu_control_;
  if (this != internal_default_instance()) delete ccu_debug_;
  if (this != internal_default_instance()) delete rfid_control_;
  if (this != internal_default_instance()) delete pos_control_;
  if (this != internal_default_instance()) delete g4_at_;
}

void UartConfig::ArenaDtor(void* object) {
  UartConfig* _this = reinterpret_cast< UartConfig* >(object);
  (void)_this;
}
void UartConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UartConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.UartConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ccu_control_ != nullptr) {
    delete ccu_control_;
  }
  ccu_control_ = nullptr;
  if (GetArena() == nullptr && ccu_debug_ != nullptr) {
    delete ccu_debug_;
  }
  ccu_debug_ = nullptr;
  if (GetArena() == nullptr && rfid_control_ != nullptr) {
    delete rfid_control_;
  }
  rfid_control_ = nullptr;
  if (GetArena() == nullptr && pos_control_ != nullptr) {
    delete pos_control_;
  }
  pos_control_ = nullptr;
  if (GetArena() == nullptr && g4_at_ != nullptr) {
    delete g4_at_;
  }
  g4_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UartConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .es_config.UartConfig.UartSetting ccu_control = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ccu_control(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.UartConfig.UartSetting ccu_debug = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ccu_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.UartConfig.UartSetting rfid_control = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rfid_control(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.UartConfig.UartSetting pos_control = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_control(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .es_config.UartConfig.UartSetting g4_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_g4_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UartConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.UartConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .es_config.UartConfig.UartSetting ccu_control = 1;
  if (this->has_ccu_control()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ccu_control(this), target, stream);
  }

  // .es_config.UartConfig.UartSetting ccu_debug = 2;
  if (this->has_ccu_debug()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ccu_debug(this), target, stream);
  }

  // .es_config.UartConfig.UartSetting rfid_control = 3;
  if (this->has_rfid_control()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rfid_control(this), target, stream);
  }

  // .es_config.UartConfig.UartSetting pos_control = 4;
  if (this->has_pos_control()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pos_control(this), target, stream);
  }

  // .es_config.UartConfig.UartSetting g4_at = 5;
  if (this->has_g4_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::g4_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.UartConfig)
  return target;
}

size_t UartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.UartConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .es_config.UartConfig.UartSetting ccu_control = 1;
  if (this->has_ccu_control()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ccu_control_);
  }

  // .es_config.UartConfig.UartSetting ccu_debug = 2;
  if (this->has_ccu_debug()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ccu_debug_);
  }

  // .es_config.UartConfig.UartSetting rfid_control = 3;
  if (this->has_rfid_control()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rfid_control_);
  }

  // .es_config.UartConfig.UartSetting pos_control = 4;
  if (this->has_pos_control()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_control_);
  }

  // .es_config.UartConfig.UartSetting g4_at = 5;
  if (this->has_g4_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g4_at_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UartConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.UartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const UartConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UartConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.UartConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.UartConfig)
    MergeFrom(*source);
  }
}

void UartConfig::MergeFrom(const UartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.UartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ccu_control()) {
    _internal_mutable_ccu_control()->::es_config::UartConfig_UartSetting::MergeFrom(from._internal_ccu_control());
  }
  if (from.has_ccu_debug()) {
    _internal_mutable_ccu_debug()->::es_config::UartConfig_UartSetting::MergeFrom(from._internal_ccu_debug());
  }
  if (from.has_rfid_control()) {
    _internal_mutable_rfid_control()->::es_config::UartConfig_UartSetting::MergeFrom(from._internal_rfid_control());
  }
  if (from.has_pos_control()) {
    _internal_mutable_pos_control()->::es_config::UartConfig_UartSetting::MergeFrom(from._internal_pos_control());
  }
  if (from.has_g4_at()) {
    _internal_mutable_g4_at()->::es_config::UartConfig_UartSetting::MergeFrom(from._internal_g4_at());
  }
}

void UartConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.UartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UartConfig::CopyFrom(const UartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.UartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UartConfig::IsInitialized() const {
  return true;
}

void UartConfig::InternalSwap(UartConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UartConfig, g4_at_)
      + sizeof(UartConfig::g4_at_)
      - PROTOBUF_FIELD_OFFSET(UartConfig, ccu_control_)>(
          reinterpret_cast<char*>(&ccu_control_),
          reinterpret_cast<char*>(&other->ccu_control_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UartConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetworkConfig::_Internal {
 public:
};

NetworkConfig::NetworkConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.NetworkConfig)
}
NetworkConfig::NetworkConfig(const NetworkConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  net_type_ = from.net_type_;
  // @@protoc_insertion_point(copy_constructor:es_config.NetworkConfig)
}

void NetworkConfig::SharedCtor() {
net_type_ = 0;
}

NetworkConfig::~NetworkConfig() {
  // @@protoc_insertion_point(destructor:es_config.NetworkConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetworkConfig::ArenaDtor(void* object) {
  NetworkConfig* _this = reinterpret_cast< NetworkConfig* >(object);
  (void)_this;
}
void NetworkConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetworkConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.NetworkConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  net_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .es_config.NetworkConfig.NetworkType net_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_net_type(static_cast<::es_config::NetworkConfig_NetworkType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.NetworkConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .es_config.NetworkConfig.NetworkType net_type = 1;
  if (this->net_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_net_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.NetworkConfig)
  return target;
}

size_t NetworkConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.NetworkConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .es_config.NetworkConfig.NetworkType net_type = 1;
  if (this->net_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_net_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.NetworkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.NetworkConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.NetworkConfig)
    MergeFrom(*source);
  }
}

void NetworkConfig::MergeFrom(const NetworkConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.NetworkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.net_type() != 0) {
    _internal_set_net_type(from._internal_net_type());
  }
}

void NetworkConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.NetworkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkConfig::CopyFrom(const NetworkConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.NetworkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkConfig::IsInitialized() const {
  return true;
}

void NetworkConfig::InternalSwap(NetworkConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(net_type_, other->net_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkModeConfig::_Internal {
 public:
};

WorkModeConfig::WorkModeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.WorkModeConfig)
}
WorkModeConfig::WorkModeConfig(const WorkModeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  work_mode_ = from.work_mode_;
  // @@protoc_insertion_point(copy_constructor:es_config.WorkModeConfig)
}

void WorkModeConfig::SharedCtor() {
work_mode_ = 0;
}

WorkModeConfig::~WorkModeConfig() {
  // @@protoc_insertion_point(destructor:es_config.WorkModeConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkModeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkModeConfig::ArenaDtor(void* object) {
  WorkModeConfig* _this = reinterpret_cast< WorkModeConfig* >(object);
  (void)_this;
}
void WorkModeConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkModeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkModeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.WorkModeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  work_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkModeConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .es_config.WorkModeConfig.WorkMode work_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_work_mode(static_cast<::es_config::WorkModeConfig_WorkMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkModeConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.WorkModeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .es_config.WorkModeConfig.WorkMode work_mode = 1;
  if (this->work_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_work_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.WorkModeConfig)
  return target;
}

size_t WorkModeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.WorkModeConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .es_config.WorkModeConfig.WorkMode work_mode = 1;
  if (this->work_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_work_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkModeConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.WorkModeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkModeConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkModeConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.WorkModeConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.WorkModeConfig)
    MergeFrom(*source);
  }
}

void WorkModeConfig::MergeFrom(const WorkModeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.WorkModeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.work_mode() != 0) {
    _internal_set_work_mode(from._internal_work_mode());
  }
}

void WorkModeConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.WorkModeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkModeConfig::CopyFrom(const WorkModeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.WorkModeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkModeConfig::IsInitialized() const {
  return true;
}

void WorkModeConfig::InternalSwap(WorkModeConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(work_mode_, other->work_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkModeConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChargerConfig::_Internal {
 public:
};

ChargerConfig::ChargerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:es_config.ChargerConfig)
}
ChargerConfig::ChargerConfig(const ChargerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model().empty()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArena());
  }
  ::memcpy(&max_current_, &from.max_current_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_power_) -
    reinterpret_cast<char*>(&max_current_)) + sizeof(max_power_));
  // @@protoc_insertion_point(copy_constructor:es_config.ChargerConfig)
}

void ChargerConfig::SharedCtor() {
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_current_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_power_) -
    reinterpret_cast<char*>(&max_current_)) + sizeof(max_power_));
}

ChargerConfig::~ChargerConfig() {
  // @@protoc_insertion_point(destructor:es_config.ChargerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChargerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChargerConfig::ArenaDtor(void* object) {
  ChargerConfig* _this = reinterpret_cast< ChargerConfig* >(object);
  (void)_this;
}
void ChargerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChargerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChargerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:es_config.ChargerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.ClearToEmpty();
  ::memset(&max_current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_power_) -
      reinterpret_cast<char*>(&max_current_)) + sizeof(max_power_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChargerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "es_config.ChargerConfig.model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_current = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 min_current = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          min_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_voltage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 min_voltage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          min_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_power = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChargerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:es_config.ChargerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "es_config.ChargerConfig.model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // uint32 max_current = 2;
  if (this->max_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_current(), target);
  }

  // uint32 min_current = 3;
  if (this->min_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_min_current(), target);
  }

  // uint32 max_voltage = 4;
  if (this->max_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_voltage(), target);
  }

  // uint32 min_voltage = 5;
  if (this->min_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_min_voltage(), target);
  }

  // uint32 max_power = 6;
  if (this->max_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_max_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es_config.ChargerConfig)
  return target;
}

size_t ChargerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es_config.ChargerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // uint32 max_current = 2;
  if (this->max_current() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_current());
  }

  // uint32 min_current = 3;
  if (this->min_current() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_current());
  }

  // uint32 max_voltage = 4;
  if (this->max_voltage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_voltage());
  }

  // uint32 min_voltage = 5;
  if (this->min_voltage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_voltage());
  }

  // uint32 max_power = 6;
  if (this->max_power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_power());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChargerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es_config.ChargerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ChargerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChargerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es_config.ChargerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es_config.ChargerConfig)
    MergeFrom(*source);
  }
}

void ChargerConfig::MergeFrom(const ChargerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es_config.ChargerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model().size() > 0) {
    _internal_set_model(from._internal_model());
  }
  if (from.max_current() != 0) {
    _internal_set_max_current(from._internal_max_current());
  }
  if (from.min_current() != 0) {
    _internal_set_min_current(from._internal_min_current());
  }
  if (from.max_voltage() != 0) {
    _internal_set_max_voltage(from._internal_max_voltage());
  }
  if (from.min_voltage() != 0) {
    _internal_set_min_voltage(from._internal_min_voltage());
  }
  if (from.max_power() != 0) {
    _internal_set_max_power(from._internal_max_power());
  }
}

void ChargerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es_config.ChargerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargerConfig::CopyFrom(const ChargerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es_config.ChargerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargerConfig::IsInitialized() const {
  return true;
}

void ChargerConfig::InternalSwap(ChargerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChargerConfig, max_power_)
      + sizeof(ChargerConfig::max_power_)
      - PROTOBUF_FIELD_OFFSET(ChargerConfig, max_current_)>(
          reinterpret_cast<char*>(&max_current_),
          reinterpret_cast<char*>(&other->max_current_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChargerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace es_config
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::es_config::Configuration* Arena::CreateMaybeMessage< ::es_config::Configuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::Configuration >(arena);
}
template<> PROTOBUF_NOINLINE ::es_config::Vendor* Arena::CreateMaybeMessage< ::es_config::Vendor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::Vendor >(arena);
}
template<> PROTOBUF_NOINLINE ::es_config::LogConfig* Arena::CreateMaybeMessage< ::es_config::LogConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::LogConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::es_config::BleConfig* Arena::CreateMaybeMessage< ::es_config::BleConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::BleConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::es_config::WiFiConfig* Arena::CreateMaybeMessage< ::es_config::WiFiConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::WiFiConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::es_config::ApConfig* Arena::CreateMaybeMessage< ::es_config::ApConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::ApConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::es_config::G4Config* Arena::CreateMaybeMessage< ::es_config::G4Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::G4Config >(arena);
}
template<> PROTOBUF_NOINLINE ::es_config::EthConfig* Arena::CreateMaybeMessage< ::es_config::EthConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::EthConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::es_config::NtpConfig* Arena::CreateMaybeMessage< ::es_config::NtpConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::NtpConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::es_config::GpioConfig_GpioPin* Arena::CreateMaybeMessage< ::es_config::GpioConfig_GpioPin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::GpioConfig_GpioPin >(arena);
}
template<> PROTOBUF_NOINLINE ::es_config::GpioConfig* Arena::CreateMaybeMessage< ::es_config::GpioConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::GpioConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::es_config::OcppConfig* Arena::CreateMaybeMessage< ::es_config::OcppConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::OcppConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::es_config::OtaConfig* Arena::CreateMaybeMessage< ::es_config::OtaConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::OtaConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::es_config::UartConfig_UartSetting* Arena::CreateMaybeMessage< ::es_config::UartConfig_UartSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::UartConfig_UartSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::es_config::UartConfig* Arena::CreateMaybeMessage< ::es_config::UartConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::UartConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::es_config::NetworkConfig* Arena::CreateMaybeMessage< ::es_config::NetworkConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::NetworkConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::es_config::WorkModeConfig* Arena::CreateMaybeMessage< ::es_config::WorkModeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::WorkModeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::es_config::ChargerConfig* Arena::CreateMaybeMessage< ::es_config::ChargerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::es_config::ChargerConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
