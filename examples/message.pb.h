// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_message_2eproto_metadata_getter(int index);
namespace es_config {
class ApConfig;
struct ApConfigDefaultTypeInternal;
extern ApConfigDefaultTypeInternal _ApConfig_default_instance_;
class BleConfig;
struct BleConfigDefaultTypeInternal;
extern BleConfigDefaultTypeInternal _BleConfig_default_instance_;
class ChargerConfig;
struct ChargerConfigDefaultTypeInternal;
extern ChargerConfigDefaultTypeInternal _ChargerConfig_default_instance_;
class Configuration;
struct ConfigurationDefaultTypeInternal;
extern ConfigurationDefaultTypeInternal _Configuration_default_instance_;
class EthConfig;
struct EthConfigDefaultTypeInternal;
extern EthConfigDefaultTypeInternal _EthConfig_default_instance_;
class G4Config;
struct G4ConfigDefaultTypeInternal;
extern G4ConfigDefaultTypeInternal _G4Config_default_instance_;
class GpioConfig;
struct GpioConfigDefaultTypeInternal;
extern GpioConfigDefaultTypeInternal _GpioConfig_default_instance_;
class GpioConfig_GpioPin;
struct GpioConfig_GpioPinDefaultTypeInternal;
extern GpioConfig_GpioPinDefaultTypeInternal _GpioConfig_GpioPin_default_instance_;
class LogConfig;
struct LogConfigDefaultTypeInternal;
extern LogConfigDefaultTypeInternal _LogConfig_default_instance_;
class NetworkConfig;
struct NetworkConfigDefaultTypeInternal;
extern NetworkConfigDefaultTypeInternal _NetworkConfig_default_instance_;
class NtpConfig;
struct NtpConfigDefaultTypeInternal;
extern NtpConfigDefaultTypeInternal _NtpConfig_default_instance_;
class OcppConfig;
struct OcppConfigDefaultTypeInternal;
extern OcppConfigDefaultTypeInternal _OcppConfig_default_instance_;
class OtaConfig;
struct OtaConfigDefaultTypeInternal;
extern OtaConfigDefaultTypeInternal _OtaConfig_default_instance_;
class UartConfig;
struct UartConfigDefaultTypeInternal;
extern UartConfigDefaultTypeInternal _UartConfig_default_instance_;
class UartConfig_UartSetting;
struct UartConfig_UartSettingDefaultTypeInternal;
extern UartConfig_UartSettingDefaultTypeInternal _UartConfig_UartSetting_default_instance_;
class Vendor;
struct VendorDefaultTypeInternal;
extern VendorDefaultTypeInternal _Vendor_default_instance_;
class WiFiConfig;
struct WiFiConfigDefaultTypeInternal;
extern WiFiConfigDefaultTypeInternal _WiFiConfig_default_instance_;
class WorkModeConfig;
struct WorkModeConfigDefaultTypeInternal;
extern WorkModeConfigDefaultTypeInternal _WorkModeConfig_default_instance_;
}  // namespace es_config
PROTOBUF_NAMESPACE_OPEN
template<> ::es_config::ApConfig* Arena::CreateMaybeMessage<::es_config::ApConfig>(Arena*);
template<> ::es_config::BleConfig* Arena::CreateMaybeMessage<::es_config::BleConfig>(Arena*);
template<> ::es_config::ChargerConfig* Arena::CreateMaybeMessage<::es_config::ChargerConfig>(Arena*);
template<> ::es_config::Configuration* Arena::CreateMaybeMessage<::es_config::Configuration>(Arena*);
template<> ::es_config::EthConfig* Arena::CreateMaybeMessage<::es_config::EthConfig>(Arena*);
template<> ::es_config::G4Config* Arena::CreateMaybeMessage<::es_config::G4Config>(Arena*);
template<> ::es_config::GpioConfig* Arena::CreateMaybeMessage<::es_config::GpioConfig>(Arena*);
template<> ::es_config::GpioConfig_GpioPin* Arena::CreateMaybeMessage<::es_config::GpioConfig_GpioPin>(Arena*);
template<> ::es_config::LogConfig* Arena::CreateMaybeMessage<::es_config::LogConfig>(Arena*);
template<> ::es_config::NetworkConfig* Arena::CreateMaybeMessage<::es_config::NetworkConfig>(Arena*);
template<> ::es_config::NtpConfig* Arena::CreateMaybeMessage<::es_config::NtpConfig>(Arena*);
template<> ::es_config::OcppConfig* Arena::CreateMaybeMessage<::es_config::OcppConfig>(Arena*);
template<> ::es_config::OtaConfig* Arena::CreateMaybeMessage<::es_config::OtaConfig>(Arena*);
template<> ::es_config::UartConfig* Arena::CreateMaybeMessage<::es_config::UartConfig>(Arena*);
template<> ::es_config::UartConfig_UartSetting* Arena::CreateMaybeMessage<::es_config::UartConfig_UartSetting>(Arena*);
template<> ::es_config::Vendor* Arena::CreateMaybeMessage<::es_config::Vendor>(Arena*);
template<> ::es_config::WiFiConfig* Arena::CreateMaybeMessage<::es_config::WiFiConfig>(Arena*);
template<> ::es_config::WorkModeConfig* Arena::CreateMaybeMessage<::es_config::WorkModeConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace es_config {

enum WiFiConfig_EncryptionType : int {
  WiFiConfig_EncryptionType_NONE = 0,
  WiFiConfig_EncryptionType_WPA2 = 1,
  WiFiConfig_EncryptionType_WPA3 = 2,
  WiFiConfig_EncryptionType_WiFiConfig_EncryptionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WiFiConfig_EncryptionType_WiFiConfig_EncryptionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WiFiConfig_EncryptionType_IsValid(int value);
constexpr WiFiConfig_EncryptionType WiFiConfig_EncryptionType_EncryptionType_MIN = WiFiConfig_EncryptionType_NONE;
constexpr WiFiConfig_EncryptionType WiFiConfig_EncryptionType_EncryptionType_MAX = WiFiConfig_EncryptionType_WPA3;
constexpr int WiFiConfig_EncryptionType_EncryptionType_ARRAYSIZE = WiFiConfig_EncryptionType_EncryptionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WiFiConfig_EncryptionType_descriptor();
template<typename T>
inline const std::string& WiFiConfig_EncryptionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WiFiConfig_EncryptionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WiFiConfig_EncryptionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WiFiConfig_EncryptionType_descriptor(), enum_t_value);
}
inline bool WiFiConfig_EncryptionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WiFiConfig_EncryptionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WiFiConfig_EncryptionType>(
    WiFiConfig_EncryptionType_descriptor(), name, value);
}
enum WiFiConfig_ProtocolType : int {
  WiFiConfig_ProtocolType_AUTO = 0,
  WiFiConfig_ProtocolType_B_G_N = 1,
  WiFiConfig_ProtocolType_B_G = 2,
  WiFiConfig_ProtocolType_WiFiConfig_ProtocolType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WiFiConfig_ProtocolType_WiFiConfig_ProtocolType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WiFiConfig_ProtocolType_IsValid(int value);
constexpr WiFiConfig_ProtocolType WiFiConfig_ProtocolType_ProtocolType_MIN = WiFiConfig_ProtocolType_AUTO;
constexpr WiFiConfig_ProtocolType WiFiConfig_ProtocolType_ProtocolType_MAX = WiFiConfig_ProtocolType_B_G;
constexpr int WiFiConfig_ProtocolType_ProtocolType_ARRAYSIZE = WiFiConfig_ProtocolType_ProtocolType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WiFiConfig_ProtocolType_descriptor();
template<typename T>
inline const std::string& WiFiConfig_ProtocolType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WiFiConfig_ProtocolType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WiFiConfig_ProtocolType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WiFiConfig_ProtocolType_descriptor(), enum_t_value);
}
inline bool WiFiConfig_ProtocolType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WiFiConfig_ProtocolType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WiFiConfig_ProtocolType>(
    WiFiConfig_ProtocolType_descriptor(), name, value);
}
enum ApConfig_EncryptionType : int {
  ApConfig_EncryptionType_NONE = 0,
  ApConfig_EncryptionType_WPA2 = 1,
  ApConfig_EncryptionType_WPA3 = 2,
  ApConfig_EncryptionType_ApConfig_EncryptionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ApConfig_EncryptionType_ApConfig_EncryptionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ApConfig_EncryptionType_IsValid(int value);
constexpr ApConfig_EncryptionType ApConfig_EncryptionType_EncryptionType_MIN = ApConfig_EncryptionType_NONE;
constexpr ApConfig_EncryptionType ApConfig_EncryptionType_EncryptionType_MAX = ApConfig_EncryptionType_WPA3;
constexpr int ApConfig_EncryptionType_EncryptionType_ARRAYSIZE = ApConfig_EncryptionType_EncryptionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApConfig_EncryptionType_descriptor();
template<typename T>
inline const std::string& ApConfig_EncryptionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ApConfig_EncryptionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ApConfig_EncryptionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ApConfig_EncryptionType_descriptor(), enum_t_value);
}
inline bool ApConfig_EncryptionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ApConfig_EncryptionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ApConfig_EncryptionType>(
    ApConfig_EncryptionType_descriptor(), name, value);
}
enum ApConfig_ProtocolType : int {
  ApConfig_ProtocolType_AUTO = 0,
  ApConfig_ProtocolType_B_G_N = 1,
  ApConfig_ProtocolType_B_G = 2,
  ApConfig_ProtocolType_ApConfig_ProtocolType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ApConfig_ProtocolType_ApConfig_ProtocolType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ApConfig_ProtocolType_IsValid(int value);
constexpr ApConfig_ProtocolType ApConfig_ProtocolType_ProtocolType_MIN = ApConfig_ProtocolType_AUTO;
constexpr ApConfig_ProtocolType ApConfig_ProtocolType_ProtocolType_MAX = ApConfig_ProtocolType_B_G;
constexpr int ApConfig_ProtocolType_ProtocolType_ARRAYSIZE = ApConfig_ProtocolType_ProtocolType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApConfig_ProtocolType_descriptor();
template<typename T>
inline const std::string& ApConfig_ProtocolType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ApConfig_ProtocolType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ApConfig_ProtocolType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ApConfig_ProtocolType_descriptor(), enum_t_value);
}
inline bool ApConfig_ProtocolType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ApConfig_ProtocolType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ApConfig_ProtocolType>(
    ApConfig_ProtocolType_descriptor(), name, value);
}
enum UartConfig_Parity : int {
  UartConfig_Parity_NONE = 0,
  UartConfig_Parity_ODD = 1,
  UartConfig_Parity_EVEN = 2,
  UartConfig_Parity_UartConfig_Parity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UartConfig_Parity_UartConfig_Parity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UartConfig_Parity_IsValid(int value);
constexpr UartConfig_Parity UartConfig_Parity_Parity_MIN = UartConfig_Parity_NONE;
constexpr UartConfig_Parity UartConfig_Parity_Parity_MAX = UartConfig_Parity_EVEN;
constexpr int UartConfig_Parity_Parity_ARRAYSIZE = UartConfig_Parity_Parity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UartConfig_Parity_descriptor();
template<typename T>
inline const std::string& UartConfig_Parity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UartConfig_Parity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UartConfig_Parity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UartConfig_Parity_descriptor(), enum_t_value);
}
inline bool UartConfig_Parity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UartConfig_Parity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UartConfig_Parity>(
    UartConfig_Parity_descriptor(), name, value);
}
enum UartConfig_StopBits : int {
  UartConfig_StopBits_STOPBIT_INVALID = 0,
  UartConfig_StopBits_ONE = 1,
  UartConfig_StopBits_ONE_AND_HALF = 2,
  UartConfig_StopBits_TWO = 3,
  UartConfig_StopBits_UartConfig_StopBits_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UartConfig_StopBits_UartConfig_StopBits_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UartConfig_StopBits_IsValid(int value);
constexpr UartConfig_StopBits UartConfig_StopBits_StopBits_MIN = UartConfig_StopBits_STOPBIT_INVALID;
constexpr UartConfig_StopBits UartConfig_StopBits_StopBits_MAX = UartConfig_StopBits_TWO;
constexpr int UartConfig_StopBits_StopBits_ARRAYSIZE = UartConfig_StopBits_StopBits_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UartConfig_StopBits_descriptor();
template<typename T>
inline const std::string& UartConfig_StopBits_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UartConfig_StopBits>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UartConfig_StopBits_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UartConfig_StopBits_descriptor(), enum_t_value);
}
inline bool UartConfig_StopBits_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UartConfig_StopBits* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UartConfig_StopBits>(
    UartConfig_StopBits_descriptor(), name, value);
}
enum UartConfig_BaudRate : int {
  UartConfig_BaudRate_BOAUD_INVALID = 0,
  UartConfig_BaudRate_BAUD_1200 = 1200,
  UartConfig_BaudRate_BAUD_2400 = 2400,
  UartConfig_BaudRate_BAUD_4800 = 4800,
  UartConfig_BaudRate_BAUD_9600 = 9600,
  UartConfig_BaudRate_BAUD_19200 = 19200,
  UartConfig_BaudRate_BAUD_38400 = 38400,
  UartConfig_BaudRate_BAUD_57600 = 57600,
  UartConfig_BaudRate_BAUD_115200 = 115200,
  UartConfig_BaudRate_BAUD_230400 = 230400,
  UartConfig_BaudRate_BAUD_460800 = 460800,
  UartConfig_BaudRate_BAUD_921600 = 921600,
  UartConfig_BaudRate_UartConfig_BaudRate_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UartConfig_BaudRate_UartConfig_BaudRate_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UartConfig_BaudRate_IsValid(int value);
constexpr UartConfig_BaudRate UartConfig_BaudRate_BaudRate_MIN = UartConfig_BaudRate_BOAUD_INVALID;
constexpr UartConfig_BaudRate UartConfig_BaudRate_BaudRate_MAX = UartConfig_BaudRate_BAUD_921600;
constexpr int UartConfig_BaudRate_BaudRate_ARRAYSIZE = UartConfig_BaudRate_BaudRate_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UartConfig_BaudRate_descriptor();
template<typename T>
inline const std::string& UartConfig_BaudRate_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UartConfig_BaudRate>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UartConfig_BaudRate_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UartConfig_BaudRate_descriptor(), enum_t_value);
}
inline bool UartConfig_BaudRate_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UartConfig_BaudRate* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UartConfig_BaudRate>(
    UartConfig_BaudRate_descriptor(), name, value);
}
enum NetworkConfig_NetworkType : int {
  NetworkConfig_NetworkType_NONE = 0,
  NetworkConfig_NetworkType_ETH = 1,
  NetworkConfig_NetworkType_WIFI = 2,
  NetworkConfig_NetworkType_G4 = 3,
  NetworkConfig_NetworkType_ETH_WIFI = 4,
  NetworkConfig_NetworkType_ETH_G4 = 5,
  NetworkConfig_NetworkType_ETH_WIFI_G4 = 6,
  NetworkConfig_NetworkType_WIFI_G4 = 7,
  NetworkConfig_NetworkType_NetworkConfig_NetworkType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NetworkConfig_NetworkType_NetworkConfig_NetworkType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NetworkConfig_NetworkType_IsValid(int value);
constexpr NetworkConfig_NetworkType NetworkConfig_NetworkType_NetworkType_MIN = NetworkConfig_NetworkType_NONE;
constexpr NetworkConfig_NetworkType NetworkConfig_NetworkType_NetworkType_MAX = NetworkConfig_NetworkType_WIFI_G4;
constexpr int NetworkConfig_NetworkType_NetworkType_ARRAYSIZE = NetworkConfig_NetworkType_NetworkType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkConfig_NetworkType_descriptor();
template<typename T>
inline const std::string& NetworkConfig_NetworkType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkConfig_NetworkType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkConfig_NetworkType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkConfig_NetworkType_descriptor(), enum_t_value);
}
inline bool NetworkConfig_NetworkType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetworkConfig_NetworkType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkConfig_NetworkType>(
    NetworkConfig_NetworkType_descriptor(), name, value);
}
enum WorkModeConfig_WorkMode : int {
  WorkModeConfig_WorkMode_ONLINE_CHARGE = 0,
  WorkModeConfig_WorkMode_BLUETOOTH_CHARGE = 5,
  WorkModeConfig_WorkMode_EMS_MODE = 6,
  WorkModeConfig_WorkMode_WorkModeConfig_WorkMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WorkModeConfig_WorkMode_WorkModeConfig_WorkMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WorkModeConfig_WorkMode_IsValid(int value);
constexpr WorkModeConfig_WorkMode WorkModeConfig_WorkMode_WorkMode_MIN = WorkModeConfig_WorkMode_ONLINE_CHARGE;
constexpr WorkModeConfig_WorkMode WorkModeConfig_WorkMode_WorkMode_MAX = WorkModeConfig_WorkMode_EMS_MODE;
constexpr int WorkModeConfig_WorkMode_WorkMode_ARRAYSIZE = WorkModeConfig_WorkMode_WorkMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkModeConfig_WorkMode_descriptor();
template<typename T>
inline const std::string& WorkModeConfig_WorkMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WorkModeConfig_WorkMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WorkModeConfig_WorkMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WorkModeConfig_WorkMode_descriptor(), enum_t_value);
}
inline bool WorkModeConfig_WorkMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorkModeConfig_WorkMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WorkModeConfig_WorkMode>(
    WorkModeConfig_WorkMode_descriptor(), name, value);
}
// ===================================================================

class Configuration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.Configuration) */ {
 public:
  inline Configuration() : Configuration(nullptr) {}
  virtual ~Configuration();
  explicit constexpr Configuration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Configuration(const Configuration& from);
  Configuration(Configuration&& from) noexcept
    : Configuration() {
    *this = ::std::move(from);
  }

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Configuration& operator=(Configuration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Configuration& default_instance() {
    return *internal_default_instance();
  }
  static inline const Configuration* internal_default_instance() {
    return reinterpret_cast<const Configuration*>(
               &_Configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Configuration& a, Configuration& b) {
    a.Swap(&b);
  }
  inline void Swap(Configuration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Configuration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Configuration* New() const final {
    return CreateMaybeMessage<Configuration>(nullptr);
  }

  Configuration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Configuration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Configuration& from);
  void MergeFrom(const Configuration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configuration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.Configuration";
  }
  protected:
  explicit Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorFieldNumber = 1,
    kLogFieldNumber = 2,
    kBleFieldNumber = 3,
    kWifiFieldNumber = 4,
    kApFieldNumber = 5,
    kG4FieldNumber = 6,
    kEthFieldNumber = 7,
    kNtpFieldNumber = 8,
    kGpioFieldNumber = 9,
    kOcppFieldNumber = 10,
    kOtaFieldNumber = 11,
    kUartFieldNumber = 12,
    kNetworkFieldNumber = 13,
    kWorkmodeFieldNumber = 14,
    kChargerFieldNumber = 15,
  };
  // .es_config.Vendor vendor = 1;
  bool has_vendor() const;
  private:
  bool _internal_has_vendor() const;
  public:
  void clear_vendor();
  const ::es_config::Vendor& vendor() const;
  ::es_config::Vendor* release_vendor();
  ::es_config::Vendor* mutable_vendor();
  void set_allocated_vendor(::es_config::Vendor* vendor);
  private:
  const ::es_config::Vendor& _internal_vendor() const;
  ::es_config::Vendor* _internal_mutable_vendor();
  public:
  void unsafe_arena_set_allocated_vendor(
      ::es_config::Vendor* vendor);
  ::es_config::Vendor* unsafe_arena_release_vendor();

  // .es_config.LogConfig log = 2;
  bool has_log() const;
  private:
  bool _internal_has_log() const;
  public:
  void clear_log();
  const ::es_config::LogConfig& log() const;
  ::es_config::LogConfig* release_log();
  ::es_config::LogConfig* mutable_log();
  void set_allocated_log(::es_config::LogConfig* log);
  private:
  const ::es_config::LogConfig& _internal_log() const;
  ::es_config::LogConfig* _internal_mutable_log();
  public:
  void unsafe_arena_set_allocated_log(
      ::es_config::LogConfig* log);
  ::es_config::LogConfig* unsafe_arena_release_log();

  // .es_config.BleConfig ble = 3;
  bool has_ble() const;
  private:
  bool _internal_has_ble() const;
  public:
  void clear_ble();
  const ::es_config::BleConfig& ble() const;
  ::es_config::BleConfig* release_ble();
  ::es_config::BleConfig* mutable_ble();
  void set_allocated_ble(::es_config::BleConfig* ble);
  private:
  const ::es_config::BleConfig& _internal_ble() const;
  ::es_config::BleConfig* _internal_mutable_ble();
  public:
  void unsafe_arena_set_allocated_ble(
      ::es_config::BleConfig* ble);
  ::es_config::BleConfig* unsafe_arena_release_ble();

  // .es_config.WiFiConfig wifi = 4;
  bool has_wifi() const;
  private:
  bool _internal_has_wifi() const;
  public:
  void clear_wifi();
  const ::es_config::WiFiConfig& wifi() const;
  ::es_config::WiFiConfig* release_wifi();
  ::es_config::WiFiConfig* mutable_wifi();
  void set_allocated_wifi(::es_config::WiFiConfig* wifi);
  private:
  const ::es_config::WiFiConfig& _internal_wifi() const;
  ::es_config::WiFiConfig* _internal_mutable_wifi();
  public:
  void unsafe_arena_set_allocated_wifi(
      ::es_config::WiFiConfig* wifi);
  ::es_config::WiFiConfig* unsafe_arena_release_wifi();

  // .es_config.ApConfig ap = 5;
  bool has_ap() const;
  private:
  bool _internal_has_ap() const;
  public:
  void clear_ap();
  const ::es_config::ApConfig& ap() const;
  ::es_config::ApConfig* release_ap();
  ::es_config::ApConfig* mutable_ap();
  void set_allocated_ap(::es_config::ApConfig* ap);
  private:
  const ::es_config::ApConfig& _internal_ap() const;
  ::es_config::ApConfig* _internal_mutable_ap();
  public:
  void unsafe_arena_set_allocated_ap(
      ::es_config::ApConfig* ap);
  ::es_config::ApConfig* unsafe_arena_release_ap();

  // .es_config.G4Config g4 = 6;
  bool has_g4() const;
  private:
  bool _internal_has_g4() const;
  public:
  void clear_g4();
  const ::es_config::G4Config& g4() const;
  ::es_config::G4Config* release_g4();
  ::es_config::G4Config* mutable_g4();
  void set_allocated_g4(::es_config::G4Config* g4);
  private:
  const ::es_config::G4Config& _internal_g4() const;
  ::es_config::G4Config* _internal_mutable_g4();
  public:
  void unsafe_arena_set_allocated_g4(
      ::es_config::G4Config* g4);
  ::es_config::G4Config* unsafe_arena_release_g4();

  // .es_config.EthConfig eth = 7;
  bool has_eth() const;
  private:
  bool _internal_has_eth() const;
  public:
  void clear_eth();
  const ::es_config::EthConfig& eth() const;
  ::es_config::EthConfig* release_eth();
  ::es_config::EthConfig* mutable_eth();
  void set_allocated_eth(::es_config::EthConfig* eth);
  private:
  const ::es_config::EthConfig& _internal_eth() const;
  ::es_config::EthConfig* _internal_mutable_eth();
  public:
  void unsafe_arena_set_allocated_eth(
      ::es_config::EthConfig* eth);
  ::es_config::EthConfig* unsafe_arena_release_eth();

  // .es_config.NtpConfig ntp = 8;
  bool has_ntp() const;
  private:
  bool _internal_has_ntp() const;
  public:
  void clear_ntp();
  const ::es_config::NtpConfig& ntp() const;
  ::es_config::NtpConfig* release_ntp();
  ::es_config::NtpConfig* mutable_ntp();
  void set_allocated_ntp(::es_config::NtpConfig* ntp);
  private:
  const ::es_config::NtpConfig& _internal_ntp() const;
  ::es_config::NtpConfig* _internal_mutable_ntp();
  public:
  void unsafe_arena_set_allocated_ntp(
      ::es_config::NtpConfig* ntp);
  ::es_config::NtpConfig* unsafe_arena_release_ntp();

  // .es_config.GpioConfig gpio = 9;
  bool has_gpio() const;
  private:
  bool _internal_has_gpio() const;
  public:
  void clear_gpio();
  const ::es_config::GpioConfig& gpio() const;
  ::es_config::GpioConfig* release_gpio();
  ::es_config::GpioConfig* mutable_gpio();
  void set_allocated_gpio(::es_config::GpioConfig* gpio);
  private:
  const ::es_config::GpioConfig& _internal_gpio() const;
  ::es_config::GpioConfig* _internal_mutable_gpio();
  public:
  void unsafe_arena_set_allocated_gpio(
      ::es_config::GpioConfig* gpio);
  ::es_config::GpioConfig* unsafe_arena_release_gpio();

  // .es_config.OcppConfig ocpp = 10;
  bool has_ocpp() const;
  private:
  bool _internal_has_ocpp() const;
  public:
  void clear_ocpp();
  const ::es_config::OcppConfig& ocpp() const;
  ::es_config::OcppConfig* release_ocpp();
  ::es_config::OcppConfig* mutable_ocpp();
  void set_allocated_ocpp(::es_config::OcppConfig* ocpp);
  private:
  const ::es_config::OcppConfig& _internal_ocpp() const;
  ::es_config::OcppConfig* _internal_mutable_ocpp();
  public:
  void unsafe_arena_set_allocated_ocpp(
      ::es_config::OcppConfig* ocpp);
  ::es_config::OcppConfig* unsafe_arena_release_ocpp();

  // .es_config.OtaConfig ota = 11;
  bool has_ota() const;
  private:
  bool _internal_has_ota() const;
  public:
  void clear_ota();
  const ::es_config::OtaConfig& ota() const;
  ::es_config::OtaConfig* release_ota();
  ::es_config::OtaConfig* mutable_ota();
  void set_allocated_ota(::es_config::OtaConfig* ota);
  private:
  const ::es_config::OtaConfig& _internal_ota() const;
  ::es_config::OtaConfig* _internal_mutable_ota();
  public:
  void unsafe_arena_set_allocated_ota(
      ::es_config::OtaConfig* ota);
  ::es_config::OtaConfig* unsafe_arena_release_ota();

  // .es_config.UartConfig uart = 12;
  bool has_uart() const;
  private:
  bool _internal_has_uart() const;
  public:
  void clear_uart();
  const ::es_config::UartConfig& uart() const;
  ::es_config::UartConfig* release_uart();
  ::es_config::UartConfig* mutable_uart();
  void set_allocated_uart(::es_config::UartConfig* uart);
  private:
  const ::es_config::UartConfig& _internal_uart() const;
  ::es_config::UartConfig* _internal_mutable_uart();
  public:
  void unsafe_arena_set_allocated_uart(
      ::es_config::UartConfig* uart);
  ::es_config::UartConfig* unsafe_arena_release_uart();

  // .es_config.NetworkConfig network = 13;
  bool has_network() const;
  private:
  bool _internal_has_network() const;
  public:
  void clear_network();
  const ::es_config::NetworkConfig& network() const;
  ::es_config::NetworkConfig* release_network();
  ::es_config::NetworkConfig* mutable_network();
  void set_allocated_network(::es_config::NetworkConfig* network);
  private:
  const ::es_config::NetworkConfig& _internal_network() const;
  ::es_config::NetworkConfig* _internal_mutable_network();
  public:
  void unsafe_arena_set_allocated_network(
      ::es_config::NetworkConfig* network);
  ::es_config::NetworkConfig* unsafe_arena_release_network();

  // .es_config.WorkModeConfig workmode = 14;
  bool has_workmode() const;
  private:
  bool _internal_has_workmode() const;
  public:
  void clear_workmode();
  const ::es_config::WorkModeConfig& workmode() const;
  ::es_config::WorkModeConfig* release_workmode();
  ::es_config::WorkModeConfig* mutable_workmode();
  void set_allocated_workmode(::es_config::WorkModeConfig* workmode);
  private:
  const ::es_config::WorkModeConfig& _internal_workmode() const;
  ::es_config::WorkModeConfig* _internal_mutable_workmode();
  public:
  void unsafe_arena_set_allocated_workmode(
      ::es_config::WorkModeConfig* workmode);
  ::es_config::WorkModeConfig* unsafe_arena_release_workmode();

  // .es_config.ChargerConfig charger = 15;
  bool has_charger() const;
  private:
  bool _internal_has_charger() const;
  public:
  void clear_charger();
  const ::es_config::ChargerConfig& charger() const;
  ::es_config::ChargerConfig* release_charger();
  ::es_config::ChargerConfig* mutable_charger();
  void set_allocated_charger(::es_config::ChargerConfig* charger);
  private:
  const ::es_config::ChargerConfig& _internal_charger() const;
  ::es_config::ChargerConfig* _internal_mutable_charger();
  public:
  void unsafe_arena_set_allocated_charger(
      ::es_config::ChargerConfig* charger);
  ::es_config::ChargerConfig* unsafe_arena_release_charger();

  // @@protoc_insertion_point(class_scope:es_config.Configuration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::es_config::Vendor* vendor_;
  ::es_config::LogConfig* log_;
  ::es_config::BleConfig* ble_;
  ::es_config::WiFiConfig* wifi_;
  ::es_config::ApConfig* ap_;
  ::es_config::G4Config* g4_;
  ::es_config::EthConfig* eth_;
  ::es_config::NtpConfig* ntp_;
  ::es_config::GpioConfig* gpio_;
  ::es_config::OcppConfig* ocpp_;
  ::es_config::OtaConfig* ota_;
  ::es_config::UartConfig* uart_;
  ::es_config::NetworkConfig* network_;
  ::es_config::WorkModeConfig* workmode_;
  ::es_config::ChargerConfig* charger_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Vendor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.Vendor) */ {
 public:
  inline Vendor() : Vendor(nullptr) {}
  virtual ~Vendor();
  explicit constexpr Vendor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vendor(const Vendor& from);
  Vendor(Vendor&& from) noexcept
    : Vendor() {
    *this = ::std::move(from);
  }

  inline Vendor& operator=(const Vendor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vendor& operator=(Vendor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vendor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vendor* internal_default_instance() {
    return reinterpret_cast<const Vendor*>(
               &_Vendor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vendor& a, Vendor& b) {
    a.Swap(&b);
  }
  inline void Swap(Vendor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vendor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vendor* New() const final {
    return CreateMaybeMessage<Vendor>(nullptr);
  }

  Vendor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vendor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vendor& from);
  void MergeFrom(const Vendor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vendor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.Vendor";
  }
  protected:
  explicit Vendor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorNameFieldNumber = 1,
    kVendorIdFieldNumber = 2,
  };
  // string vendor_name = 1;
  void clear_vendor_name();
  const std::string& vendor_name() const;
  void set_vendor_name(const std::string& value);
  void set_vendor_name(std::string&& value);
  void set_vendor_name(const char* value);
  void set_vendor_name(const char* value, size_t size);
  std::string* mutable_vendor_name();
  std::string* release_vendor_name();
  void set_allocated_vendor_name(std::string* vendor_name);
  private:
  const std::string& _internal_vendor_name() const;
  void _internal_set_vendor_name(const std::string& value);
  std::string* _internal_mutable_vendor_name();
  public:

  // string vendor_id = 2;
  void clear_vendor_id();
  const std::string& vendor_id() const;
  void set_vendor_id(const std::string& value);
  void set_vendor_id(std::string&& value);
  void set_vendor_id(const char* value);
  void set_vendor_id(const char* value, size_t size);
  std::string* mutable_vendor_id();
  std::string* release_vendor_id();
  void set_allocated_vendor_id(std::string* vendor_id);
  private:
  const std::string& _internal_vendor_id() const;
  void _internal_set_vendor_id(const std::string& value);
  std::string* _internal_mutable_vendor_id();
  public:

  // @@protoc_insertion_point(class_scope:es_config.Vendor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LogConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.LogConfig) */ {
 public:
  inline LogConfig() : LogConfig(nullptr) {}
  virtual ~LogConfig();
  explicit constexpr LogConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogConfig(const LogConfig& from);
  LogConfig(LogConfig&& from) noexcept
    : LogConfig() {
    *this = ::std::move(from);
  }

  inline LogConfig& operator=(const LogConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogConfig& operator=(LogConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogConfig* internal_default_instance() {
    return reinterpret_cast<const LogConfig*>(
               &_LogConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogConfig& a, LogConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LogConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogConfig* New() const final {
    return CreateMaybeMessage<LogConfig>(nullptr);
  }

  LogConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogConfig& from);
  void MergeFrom(const LogConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.LogConfig";
  }
  protected:
  explicit LogConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kFileSizeLimitFieldNumber = 2,
    kFileNumberLimitFieldNumber = 3,
    kTotalSizeLimitFieldNumber = 4,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // uint32 file_size_limit = 2;
  void clear_file_size_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_size_limit() const;
  void set_file_size_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_size_limit() const;
  void _internal_set_file_size_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 file_number_limit = 3;
  void clear_file_number_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_number_limit() const;
  void set_file_number_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_number_limit() const;
  void _internal_set_file_number_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_size_limit = 4;
  void clear_total_size_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_size_limit() const;
  void set_total_size_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_size_limit() const;
  void _internal_set_total_size_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:es_config.LogConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_size_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_number_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_size_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class BleConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.BleConfig) */ {
 public:
  inline BleConfig() : BleConfig(nullptr) {}
  virtual ~BleConfig();
  explicit constexpr BleConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleConfig(const BleConfig& from);
  BleConfig(BleConfig&& from) noexcept
    : BleConfig() {
    *this = ::std::move(from);
  }

  inline BleConfig& operator=(const BleConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleConfig& operator=(BleConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BleConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleConfig* internal_default_instance() {
    return reinterpret_cast<const BleConfig*>(
               &_BleConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BleConfig& a, BleConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(BleConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BleConfig* New() const final {
    return CreateMaybeMessage<BleConfig>(nullptr);
  }

  BleConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BleConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BleConfig& from);
  void MergeFrom(const BleConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.BleConfig";
  }
  protected:
  explicit BleConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
  };
  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:es_config.BleConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class WiFiConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.WiFiConfig) */ {
 public:
  inline WiFiConfig() : WiFiConfig(nullptr) {}
  virtual ~WiFiConfig();
  explicit constexpr WiFiConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WiFiConfig(const WiFiConfig& from);
  WiFiConfig(WiFiConfig&& from) noexcept
    : WiFiConfig() {
    *this = ::std::move(from);
  }

  inline WiFiConfig& operator=(const WiFiConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline WiFiConfig& operator=(WiFiConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WiFiConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const WiFiConfig* internal_default_instance() {
    return reinterpret_cast<const WiFiConfig*>(
               &_WiFiConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WiFiConfig& a, WiFiConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(WiFiConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WiFiConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WiFiConfig* New() const final {
    return CreateMaybeMessage<WiFiConfig>(nullptr);
  }

  WiFiConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WiFiConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WiFiConfig& from);
  void MergeFrom(const WiFiConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WiFiConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.WiFiConfig";
  }
  protected:
  explicit WiFiConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef WiFiConfig_EncryptionType EncryptionType;
  static constexpr EncryptionType NONE =
    WiFiConfig_EncryptionType_NONE;
  static constexpr EncryptionType WPA2 =
    WiFiConfig_EncryptionType_WPA2;
  static constexpr EncryptionType WPA3 =
    WiFiConfig_EncryptionType_WPA3;
  static inline bool EncryptionType_IsValid(int value) {
    return WiFiConfig_EncryptionType_IsValid(value);
  }
  static constexpr EncryptionType EncryptionType_MIN =
    WiFiConfig_EncryptionType_EncryptionType_MIN;
  static constexpr EncryptionType EncryptionType_MAX =
    WiFiConfig_EncryptionType_EncryptionType_MAX;
  static constexpr int EncryptionType_ARRAYSIZE =
    WiFiConfig_EncryptionType_EncryptionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EncryptionType_descriptor() {
    return WiFiConfig_EncryptionType_descriptor();
  }
  template<typename T>
  static inline const std::string& EncryptionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EncryptionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EncryptionType_Name.");
    return WiFiConfig_EncryptionType_Name(enum_t_value);
  }
  static inline bool EncryptionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EncryptionType* value) {
    return WiFiConfig_EncryptionType_Parse(name, value);
  }

  typedef WiFiConfig_ProtocolType ProtocolType;
  static constexpr ProtocolType AUTO =
    WiFiConfig_ProtocolType_AUTO;
  static constexpr ProtocolType B_G_N =
    WiFiConfig_ProtocolType_B_G_N;
  static constexpr ProtocolType B_G =
    WiFiConfig_ProtocolType_B_G;
  static inline bool ProtocolType_IsValid(int value) {
    return WiFiConfig_ProtocolType_IsValid(value);
  }
  static constexpr ProtocolType ProtocolType_MIN =
    WiFiConfig_ProtocolType_ProtocolType_MIN;
  static constexpr ProtocolType ProtocolType_MAX =
    WiFiConfig_ProtocolType_ProtocolType_MAX;
  static constexpr int ProtocolType_ARRAYSIZE =
    WiFiConfig_ProtocolType_ProtocolType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProtocolType_descriptor() {
    return WiFiConfig_ProtocolType_descriptor();
  }
  template<typename T>
  static inline const std::string& ProtocolType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProtocolType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProtocolType_Name.");
    return WiFiConfig_ProtocolType_Name(enum_t_value);
  }
  static inline bool ProtocolType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProtocolType* value) {
    return WiFiConfig_ProtocolType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kEncryptionFieldNumber = 3,
    kProtocolFieldNumber = 4,
    kEnableFieldNumber = 5,
  };
  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // .es_config.WiFiConfig.EncryptionType encryption = 3;
  void clear_encryption();
  ::es_config::WiFiConfig_EncryptionType encryption() const;
  void set_encryption(::es_config::WiFiConfig_EncryptionType value);
  private:
  ::es_config::WiFiConfig_EncryptionType _internal_encryption() const;
  void _internal_set_encryption(::es_config::WiFiConfig_EncryptionType value);
  public:

  // .es_config.WiFiConfig.ProtocolType protocol = 4;
  void clear_protocol();
  ::es_config::WiFiConfig_ProtocolType protocol() const;
  void set_protocol(::es_config::WiFiConfig_ProtocolType value);
  private:
  ::es_config::WiFiConfig_ProtocolType _internal_protocol() const;
  void _internal_set_protocol(::es_config::WiFiConfig_ProtocolType value);
  public:

  // bool enable = 5;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:es_config.WiFiConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  int encryption_;
  int protocol_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ApConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.ApConfig) */ {
 public:
  inline ApConfig() : ApConfig(nullptr) {}
  virtual ~ApConfig();
  explicit constexpr ApConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApConfig(const ApConfig& from);
  ApConfig(ApConfig&& from) noexcept
    : ApConfig() {
    *this = ::std::move(from);
  }

  inline ApConfig& operator=(const ApConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApConfig& operator=(ApConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApConfig* internal_default_instance() {
    return reinterpret_cast<const ApConfig*>(
               &_ApConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ApConfig& a, ApConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ApConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApConfig* New() const final {
    return CreateMaybeMessage<ApConfig>(nullptr);
  }

  ApConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApConfig& from);
  void MergeFrom(const ApConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.ApConfig";
  }
  protected:
  explicit ApConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ApConfig_EncryptionType EncryptionType;
  static constexpr EncryptionType NONE =
    ApConfig_EncryptionType_NONE;
  static constexpr EncryptionType WPA2 =
    ApConfig_EncryptionType_WPA2;
  static constexpr EncryptionType WPA3 =
    ApConfig_EncryptionType_WPA3;
  static inline bool EncryptionType_IsValid(int value) {
    return ApConfig_EncryptionType_IsValid(value);
  }
  static constexpr EncryptionType EncryptionType_MIN =
    ApConfig_EncryptionType_EncryptionType_MIN;
  static constexpr EncryptionType EncryptionType_MAX =
    ApConfig_EncryptionType_EncryptionType_MAX;
  static constexpr int EncryptionType_ARRAYSIZE =
    ApConfig_EncryptionType_EncryptionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EncryptionType_descriptor() {
    return ApConfig_EncryptionType_descriptor();
  }
  template<typename T>
  static inline const std::string& EncryptionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EncryptionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EncryptionType_Name.");
    return ApConfig_EncryptionType_Name(enum_t_value);
  }
  static inline bool EncryptionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EncryptionType* value) {
    return ApConfig_EncryptionType_Parse(name, value);
  }

  typedef ApConfig_ProtocolType ProtocolType;
  static constexpr ProtocolType AUTO =
    ApConfig_ProtocolType_AUTO;
  static constexpr ProtocolType B_G_N =
    ApConfig_ProtocolType_B_G_N;
  static constexpr ProtocolType B_G =
    ApConfig_ProtocolType_B_G;
  static inline bool ProtocolType_IsValid(int value) {
    return ApConfig_ProtocolType_IsValid(value);
  }
  static constexpr ProtocolType ProtocolType_MIN =
    ApConfig_ProtocolType_ProtocolType_MIN;
  static constexpr ProtocolType ProtocolType_MAX =
    ApConfig_ProtocolType_ProtocolType_MAX;
  static constexpr int ProtocolType_ARRAYSIZE =
    ApConfig_ProtocolType_ProtocolType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProtocolType_descriptor() {
    return ApConfig_ProtocolType_descriptor();
  }
  template<typename T>
  static inline const std::string& ProtocolType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProtocolType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProtocolType_Name.");
    return ApConfig_ProtocolType_Name(enum_t_value);
  }
  static inline bool ProtocolType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProtocolType* value) {
    return ApConfig_ProtocolType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kEncryptionFieldNumber = 3,
    kProtocolFieldNumber = 4,
    kEnableFieldNumber = 5,
  };
  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // .es_config.ApConfig.EncryptionType encryption = 3;
  void clear_encryption();
  ::es_config::ApConfig_EncryptionType encryption() const;
  void set_encryption(::es_config::ApConfig_EncryptionType value);
  private:
  ::es_config::ApConfig_EncryptionType _internal_encryption() const;
  void _internal_set_encryption(::es_config::ApConfig_EncryptionType value);
  public:

  // .es_config.ApConfig.ProtocolType protocol = 4;
  void clear_protocol();
  ::es_config::ApConfig_ProtocolType protocol() const;
  void set_protocol(::es_config::ApConfig_ProtocolType value);
  private:
  ::es_config::ApConfig_ProtocolType _internal_protocol() const;
  void _internal_set_protocol(::es_config::ApConfig_ProtocolType value);
  public:

  // bool enable = 5;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:es_config.ApConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  int encryption_;
  int protocol_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class G4Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.G4Config) */ {
 public:
  inline G4Config() : G4Config(nullptr) {}
  virtual ~G4Config();
  explicit constexpr G4Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  G4Config(const G4Config& from);
  G4Config(G4Config&& from) noexcept
    : G4Config() {
    *this = ::std::move(from);
  }

  inline G4Config& operator=(const G4Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline G4Config& operator=(G4Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const G4Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const G4Config* internal_default_instance() {
    return reinterpret_cast<const G4Config*>(
               &_G4Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(G4Config& a, G4Config& b) {
    a.Swap(&b);
  }
  inline void Swap(G4Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(G4Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline G4Config* New() const final {
    return CreateMaybeMessage<G4Config>(nullptr);
  }

  G4Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<G4Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const G4Config& from);
  void MergeFrom(const G4Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(G4Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.G4Config";
  }
  protected:
  explicit G4Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kConfigPathFieldNumber = 2,
    kResetGpioFieldNumber = 3,
    kAtPortFieldNumber = 4,
    kEnableFieldNumber = 5,
  };
  // string model = 1;
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string config_path = 2;
  void clear_config_path();
  const std::string& config_path() const;
  void set_config_path(const std::string& value);
  void set_config_path(std::string&& value);
  void set_config_path(const char* value);
  void set_config_path(const char* value, size_t size);
  std::string* mutable_config_path();
  std::string* release_config_path();
  void set_allocated_config_path(std::string* config_path);
  private:
  const std::string& _internal_config_path() const;
  void _internal_set_config_path(const std::string& value);
  std::string* _internal_mutable_config_path();
  public:

  // string reset_gpio = 3;
  void clear_reset_gpio();
  const std::string& reset_gpio() const;
  void set_reset_gpio(const std::string& value);
  void set_reset_gpio(std::string&& value);
  void set_reset_gpio(const char* value);
  void set_reset_gpio(const char* value, size_t size);
  std::string* mutable_reset_gpio();
  std::string* release_reset_gpio();
  void set_allocated_reset_gpio(std::string* reset_gpio);
  private:
  const std::string& _internal_reset_gpio() const;
  void _internal_set_reset_gpio(const std::string& value);
  std::string* _internal_mutable_reset_gpio();
  public:

  // string at_port = 4;
  void clear_at_port();
  const std::string& at_port() const;
  void set_at_port(const std::string& value);
  void set_at_port(std::string&& value);
  void set_at_port(const char* value);
  void set_at_port(const char* value, size_t size);
  std::string* mutable_at_port();
  std::string* release_at_port();
  void set_allocated_at_port(std::string* at_port);
  private:
  const std::string& _internal_at_port() const;
  void _internal_set_at_port(const std::string& value);
  std::string* _internal_mutable_at_port();
  public:

  // bool enable = 5;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:es_config.G4Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reset_gpio_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr at_port_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class EthConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.EthConfig) */ {
 public:
  inline EthConfig() : EthConfig(nullptr) {}
  virtual ~EthConfig();
  explicit constexpr EthConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EthConfig(const EthConfig& from);
  EthConfig(EthConfig&& from) noexcept
    : EthConfig() {
    *this = ::std::move(from);
  }

  inline EthConfig& operator=(const EthConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EthConfig& operator=(EthConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EthConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const EthConfig* internal_default_instance() {
    return reinterpret_cast<const EthConfig*>(
               &_EthConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EthConfig& a, EthConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(EthConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EthConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EthConfig* New() const final {
    return CreateMaybeMessage<EthConfig>(nullptr);
  }

  EthConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EthConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EthConfig& from);
  void MergeFrom(const EthConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EthConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.EthConfig";
  }
  protected:
  explicit EthConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStaticDnsFieldNumber = 5,
    kStaticIpFieldNumber = 2,
    kStaticGatewayFieldNumber = 3,
    kStaticNetmaskFieldNumber = 4,
    kEnableFieldNumber = 1,
    kDhcpFieldNumber = 6,
  };
  // repeated string static_dns = 5;
  int static_dns_size() const;
  private:
  int _internal_static_dns_size() const;
  public:
  void clear_static_dns();
  const std::string& static_dns(int index) const;
  std::string* mutable_static_dns(int index);
  void set_static_dns(int index, const std::string& value);
  void set_static_dns(int index, std::string&& value);
  void set_static_dns(int index, const char* value);
  void set_static_dns(int index, const char* value, size_t size);
  std::string* add_static_dns();
  void add_static_dns(const std::string& value);
  void add_static_dns(std::string&& value);
  void add_static_dns(const char* value);
  void add_static_dns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& static_dns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_static_dns();
  private:
  const std::string& _internal_static_dns(int index) const;
  std::string* _internal_add_static_dns();
  public:

  // string static_ip = 2;
  void clear_static_ip();
  const std::string& static_ip() const;
  void set_static_ip(const std::string& value);
  void set_static_ip(std::string&& value);
  void set_static_ip(const char* value);
  void set_static_ip(const char* value, size_t size);
  std::string* mutable_static_ip();
  std::string* release_static_ip();
  void set_allocated_static_ip(std::string* static_ip);
  private:
  const std::string& _internal_static_ip() const;
  void _internal_set_static_ip(const std::string& value);
  std::string* _internal_mutable_static_ip();
  public:

  // string static_gateway = 3;
  void clear_static_gateway();
  const std::string& static_gateway() const;
  void set_static_gateway(const std::string& value);
  void set_static_gateway(std::string&& value);
  void set_static_gateway(const char* value);
  void set_static_gateway(const char* value, size_t size);
  std::string* mutable_static_gateway();
  std::string* release_static_gateway();
  void set_allocated_static_gateway(std::string* static_gateway);
  private:
  const std::string& _internal_static_gateway() const;
  void _internal_set_static_gateway(const std::string& value);
  std::string* _internal_mutable_static_gateway();
  public:

  // string static_netmask = 4;
  void clear_static_netmask();
  const std::string& static_netmask() const;
  void set_static_netmask(const std::string& value);
  void set_static_netmask(std::string&& value);
  void set_static_netmask(const char* value);
  void set_static_netmask(const char* value, size_t size);
  std::string* mutable_static_netmask();
  std::string* release_static_netmask();
  void set_allocated_static_netmask(std::string* static_netmask);
  private:
  const std::string& _internal_static_netmask() const;
  void _internal_set_static_netmask(const std::string& value);
  std::string* _internal_mutable_static_netmask();
  public:

  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // bool dhcp = 6;
  void clear_dhcp();
  bool dhcp() const;
  void set_dhcp(bool value);
  private:
  bool _internal_dhcp() const;
  void _internal_set_dhcp(bool value);
  public:

  // @@protoc_insertion_point(class_scope:es_config.EthConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> static_dns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr static_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr static_gateway_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr static_netmask_;
  bool enable_;
  bool dhcp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class NtpConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.NtpConfig) */ {
 public:
  inline NtpConfig() : NtpConfig(nullptr) {}
  virtual ~NtpConfig();
  explicit constexpr NtpConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NtpConfig(const NtpConfig& from);
  NtpConfig(NtpConfig&& from) noexcept
    : NtpConfig() {
    *this = ::std::move(from);
  }

  inline NtpConfig& operator=(const NtpConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NtpConfig& operator=(NtpConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NtpConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const NtpConfig* internal_default_instance() {
    return reinterpret_cast<const NtpConfig*>(
               &_NtpConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NtpConfig& a, NtpConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NtpConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NtpConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NtpConfig* New() const final {
    return CreateMaybeMessage<NtpConfig>(nullptr);
  }

  NtpConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NtpConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NtpConfig& from);
  void MergeFrom(const NtpConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NtpConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.NtpConfig";
  }
  protected:
  explicit NtpConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerListFieldNumber = 1,
    kIntervalFieldNumber = 2,
    kEnableFieldNumber = 3,
  };
  // repeated string server_list = 1;
  int server_list_size() const;
  private:
  int _internal_server_list_size() const;
  public:
  void clear_server_list();
  const std::string& server_list(int index) const;
  std::string* mutable_server_list(int index);
  void set_server_list(int index, const std::string& value);
  void set_server_list(int index, std::string&& value);
  void set_server_list(int index, const char* value);
  void set_server_list(int index, const char* value, size_t size);
  std::string* add_server_list();
  void add_server_list(const std::string& value);
  void add_server_list(std::string&& value);
  void add_server_list(const char* value);
  void add_server_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& server_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_server_list();
  private:
  const std::string& _internal_server_list(int index) const;
  std::string* _internal_add_server_list();
  public:

  // uint32 interval = 2;
  void clear_interval();
  ::PROTOBUF_NAMESPACE_ID::uint32 interval() const;
  void set_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_interval() const;
  void _internal_set_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool enable = 3;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:es_config.NtpConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> server_list_;
  ::PROTOBUF_NAMESPACE_ID::uint32 interval_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GpioConfig_GpioPin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.GpioConfig.GpioPin) */ {
 public:
  inline GpioConfig_GpioPin() : GpioConfig_GpioPin(nullptr) {}
  virtual ~GpioConfig_GpioPin();
  explicit constexpr GpioConfig_GpioPin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpioConfig_GpioPin(const GpioConfig_GpioPin& from);
  GpioConfig_GpioPin(GpioConfig_GpioPin&& from) noexcept
    : GpioConfig_GpioPin() {
    *this = ::std::move(from);
  }

  inline GpioConfig_GpioPin& operator=(const GpioConfig_GpioPin& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpioConfig_GpioPin& operator=(GpioConfig_GpioPin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GpioConfig_GpioPin& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpioConfig_GpioPin* internal_default_instance() {
    return reinterpret_cast<const GpioConfig_GpioPin*>(
               &_GpioConfig_GpioPin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GpioConfig_GpioPin& a, GpioConfig_GpioPin& b) {
    a.Swap(&b);
  }
  inline void Swap(GpioConfig_GpioPin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpioConfig_GpioPin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpioConfig_GpioPin* New() const final {
    return CreateMaybeMessage<GpioConfig_GpioPin>(nullptr);
  }

  GpioConfig_GpioPin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpioConfig_GpioPin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GpioConfig_GpioPin& from);
  void MergeFrom(const GpioConfig_GpioPin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpioConfig_GpioPin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.GpioConfig.GpioPin";
  }
  protected:
  explicit GpioConfig_GpioPin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
    kIsOutputFieldNumber = 2,
    kIsOn1Off0FieldNumber = 3,
  };
  // uint32 number = 1;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_output = 2;
  void clear_is_output();
  bool is_output() const;
  void set_is_output(bool value);
  private:
  bool _internal_is_output() const;
  void _internal_set_is_output(bool value);
  public:

  // bool is_on1off0 = 3;
  void clear_is_on1off0();
  bool is_on1off0() const;
  void set_is_on1off0(bool value);
  private:
  bool _internal_is_on1off0() const;
  void _internal_set_is_on1off0(bool value);
  public:

  // @@protoc_insertion_point(class_scope:es_config.GpioConfig.GpioPin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_;
  bool is_output_;
  bool is_on1off0_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GpioConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.GpioConfig) */ {
 public:
  inline GpioConfig() : GpioConfig(nullptr) {}
  virtual ~GpioConfig();
  explicit constexpr GpioConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpioConfig(const GpioConfig& from);
  GpioConfig(GpioConfig&& from) noexcept
    : GpioConfig() {
    *this = ::std::move(from);
  }

  inline GpioConfig& operator=(const GpioConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpioConfig& operator=(GpioConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GpioConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpioConfig* internal_default_instance() {
    return reinterpret_cast<const GpioConfig*>(
               &_GpioConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GpioConfig& a, GpioConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GpioConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpioConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpioConfig* New() const final {
    return CreateMaybeMessage<GpioConfig>(nullptr);
  }

  GpioConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpioConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GpioConfig& from);
  void MergeFrom(const GpioConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpioConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.GpioConfig";
  }
  protected:
  explicit GpioConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef GpioConfig_GpioPin GpioPin;

  // accessors -------------------------------------------------------

  enum : int {
    kG4ResetFieldNumber = 1,
    kSysResetFieldNumber = 2,
    kEmsRw485FieldNumber = 3,
  };
  // .es_config.GpioConfig.GpioPin g4_reset = 1;
  bool has_g4_reset() const;
  private:
  bool _internal_has_g4_reset() const;
  public:
  void clear_g4_reset();
  const ::es_config::GpioConfig_GpioPin& g4_reset() const;
  ::es_config::GpioConfig_GpioPin* release_g4_reset();
  ::es_config::GpioConfig_GpioPin* mutable_g4_reset();
  void set_allocated_g4_reset(::es_config::GpioConfig_GpioPin* g4_reset);
  private:
  const ::es_config::GpioConfig_GpioPin& _internal_g4_reset() const;
  ::es_config::GpioConfig_GpioPin* _internal_mutable_g4_reset();
  public:
  void unsafe_arena_set_allocated_g4_reset(
      ::es_config::GpioConfig_GpioPin* g4_reset);
  ::es_config::GpioConfig_GpioPin* unsafe_arena_release_g4_reset();

  // .es_config.GpioConfig.GpioPin sys_reset = 2;
  bool has_sys_reset() const;
  private:
  bool _internal_has_sys_reset() const;
  public:
  void clear_sys_reset();
  const ::es_config::GpioConfig_GpioPin& sys_reset() const;
  ::es_config::GpioConfig_GpioPin* release_sys_reset();
  ::es_config::GpioConfig_GpioPin* mutable_sys_reset();
  void set_allocated_sys_reset(::es_config::GpioConfig_GpioPin* sys_reset);
  private:
  const ::es_config::GpioConfig_GpioPin& _internal_sys_reset() const;
  ::es_config::GpioConfig_GpioPin* _internal_mutable_sys_reset();
  public:
  void unsafe_arena_set_allocated_sys_reset(
      ::es_config::GpioConfig_GpioPin* sys_reset);
  ::es_config::GpioConfig_GpioPin* unsafe_arena_release_sys_reset();

  // .es_config.GpioConfig.GpioPin ems_rw_485 = 3;
  bool has_ems_rw_485() const;
  private:
  bool _internal_has_ems_rw_485() const;
  public:
  void clear_ems_rw_485();
  const ::es_config::GpioConfig_GpioPin& ems_rw_485() const;
  ::es_config::GpioConfig_GpioPin* release_ems_rw_485();
  ::es_config::GpioConfig_GpioPin* mutable_ems_rw_485();
  void set_allocated_ems_rw_485(::es_config::GpioConfig_GpioPin* ems_rw_485);
  private:
  const ::es_config::GpioConfig_GpioPin& _internal_ems_rw_485() const;
  ::es_config::GpioConfig_GpioPin* _internal_mutable_ems_rw_485();
  public:
  void unsafe_arena_set_allocated_ems_rw_485(
      ::es_config::GpioConfig_GpioPin* ems_rw_485);
  ::es_config::GpioConfig_GpioPin* unsafe_arena_release_ems_rw_485();

  // @@protoc_insertion_point(class_scope:es_config.GpioConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::es_config::GpioConfig_GpioPin* g4_reset_;
  ::es_config::GpioConfig_GpioPin* sys_reset_;
  ::es_config::GpioConfig_GpioPin* ems_rw_485_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class OcppConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.OcppConfig) */ {
 public:
  inline OcppConfig() : OcppConfig(nullptr) {}
  virtual ~OcppConfig();
  explicit constexpr OcppConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcppConfig(const OcppConfig& from);
  OcppConfig(OcppConfig&& from) noexcept
    : OcppConfig() {
    *this = ::std::move(from);
  }

  inline OcppConfig& operator=(const OcppConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcppConfig& operator=(OcppConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OcppConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcppConfig* internal_default_instance() {
    return reinterpret_cast<const OcppConfig*>(
               &_OcppConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(OcppConfig& a, OcppConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(OcppConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcppConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OcppConfig* New() const final {
    return CreateMaybeMessage<OcppConfig>(nullptr);
  }

  OcppConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OcppConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OcppConfig& from);
  void MergeFrom(const OcppConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OcppConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.OcppConfig";
  }
  protected:
  explicit OcppConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kHostFieldNumber = 2,
    kPathFieldNumber = 4,
    kCertPathFieldNumber = 6,
    kPortFieldNumber = 3,
    kProfileFieldNumber = 5,
    kEnableFieldNumber = 7,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string host = 2;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string path = 4;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string cert_path = 6;
  void clear_cert_path();
  const std::string& cert_path() const;
  void set_cert_path(const std::string& value);
  void set_cert_path(std::string&& value);
  void set_cert_path(const char* value);
  void set_cert_path(const char* value, size_t size);
  std::string* mutable_cert_path();
  std::string* release_cert_path();
  void set_allocated_cert_path(std::string* cert_path);
  private:
  const std::string& _internal_cert_path() const;
  void _internal_set_cert_path(const std::string& value);
  std::string* _internal_mutable_cert_path();
  public:

  // uint32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 profile = 5;
  void clear_profile();
  ::PROTOBUF_NAMESPACE_ID::uint32 profile() const;
  void set_profile(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_profile() const;
  void _internal_set_profile(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool enable = 7;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:es_config.OcppConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cert_path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 profile_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class OtaConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.OtaConfig) */ {
 public:
  inline OtaConfig() : OtaConfig(nullptr) {}
  virtual ~OtaConfig();
  explicit constexpr OtaConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OtaConfig(const OtaConfig& from);
  OtaConfig(OtaConfig&& from) noexcept
    : OtaConfig() {
    *this = ::std::move(from);
  }

  inline OtaConfig& operator=(const OtaConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtaConfig& operator=(OtaConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OtaConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const OtaConfig* internal_default_instance() {
    return reinterpret_cast<const OtaConfig*>(
               &_OtaConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(OtaConfig& a, OtaConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(OtaConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OtaConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OtaConfig* New() const final {
    return CreateMaybeMessage<OtaConfig>(nullptr);
  }

  OtaConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OtaConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OtaConfig& from);
  void MergeFrom(const OtaConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtaConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.OtaConfig";
  }
  protected:
  explicit OtaConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDownloadPathFieldNumber = 1,
    kCertPathFieldNumber = 2,
    kEnableFieldNumber = 3,
  };
  // string download_path = 1;
  void clear_download_path();
  const std::string& download_path() const;
  void set_download_path(const std::string& value);
  void set_download_path(std::string&& value);
  void set_download_path(const char* value);
  void set_download_path(const char* value, size_t size);
  std::string* mutable_download_path();
  std::string* release_download_path();
  void set_allocated_download_path(std::string* download_path);
  private:
  const std::string& _internal_download_path() const;
  void _internal_set_download_path(const std::string& value);
  std::string* _internal_mutable_download_path();
  public:

  // string cert_path = 2;
  void clear_cert_path();
  const std::string& cert_path() const;
  void set_cert_path(const std::string& value);
  void set_cert_path(std::string&& value);
  void set_cert_path(const char* value);
  void set_cert_path(const char* value, size_t size);
  std::string* mutable_cert_path();
  std::string* release_cert_path();
  void set_allocated_cert_path(std::string* cert_path);
  private:
  const std::string& _internal_cert_path() const;
  void _internal_set_cert_path(const std::string& value);
  std::string* _internal_mutable_cert_path();
  public:

  // bool enable = 3;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:es_config.OtaConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr download_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cert_path_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class UartConfig_UartSetting PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.UartConfig.UartSetting) */ {
 public:
  inline UartConfig_UartSetting() : UartConfig_UartSetting(nullptr) {}
  virtual ~UartConfig_UartSetting();
  explicit constexpr UartConfig_UartSetting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UartConfig_UartSetting(const UartConfig_UartSetting& from);
  UartConfig_UartSetting(UartConfig_UartSetting&& from) noexcept
    : UartConfig_UartSetting() {
    *this = ::std::move(from);
  }

  inline UartConfig_UartSetting& operator=(const UartConfig_UartSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline UartConfig_UartSetting& operator=(UartConfig_UartSetting&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UartConfig_UartSetting& default_instance() {
    return *internal_default_instance();
  }
  static inline const UartConfig_UartSetting* internal_default_instance() {
    return reinterpret_cast<const UartConfig_UartSetting*>(
               &_UartConfig_UartSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UartConfig_UartSetting& a, UartConfig_UartSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(UartConfig_UartSetting* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UartConfig_UartSetting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UartConfig_UartSetting* New() const final {
    return CreateMaybeMessage<UartConfig_UartSetting>(nullptr);
  }

  UartConfig_UartSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UartConfig_UartSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UartConfig_UartSetting& from);
  void MergeFrom(const UartConfig_UartSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UartConfig_UartSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.UartConfig.UartSetting";
  }
  protected:
  explicit UartConfig_UartSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kRw485FieldNumber = 7,
    kBaudrateFieldNumber = 2,
    kBsizeFieldNumber = 3,
    kParityFieldNumber = 4,
    kStopbitFieldNumber = 5,
    kIs485FieldNumber = 6,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string rw_485 = 7;
  void clear_rw_485();
  const std::string& rw_485() const;
  void set_rw_485(const std::string& value);
  void set_rw_485(std::string&& value);
  void set_rw_485(const char* value);
  void set_rw_485(const char* value, size_t size);
  std::string* mutable_rw_485();
  std::string* release_rw_485();
  void set_allocated_rw_485(std::string* rw_485);
  private:
  const std::string& _internal_rw_485() const;
  void _internal_set_rw_485(const std::string& value);
  std::string* _internal_mutable_rw_485();
  public:

  // .es_config.UartConfig.BaudRate baudrate = 2;
  void clear_baudrate();
  ::es_config::UartConfig_BaudRate baudrate() const;
  void set_baudrate(::es_config::UartConfig_BaudRate value);
  private:
  ::es_config::UartConfig_BaudRate _internal_baudrate() const;
  void _internal_set_baudrate(::es_config::UartConfig_BaudRate value);
  public:

  // uint32 bsize = 3;
  void clear_bsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 bsize() const;
  void set_bsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bsize() const;
  void _internal_set_bsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .es_config.UartConfig.Parity parity = 4;
  void clear_parity();
  ::es_config::UartConfig_Parity parity() const;
  void set_parity(::es_config::UartConfig_Parity value);
  private:
  ::es_config::UartConfig_Parity _internal_parity() const;
  void _internal_set_parity(::es_config::UartConfig_Parity value);
  public:

  // .es_config.UartConfig.StopBits stopbit = 5;
  void clear_stopbit();
  ::es_config::UartConfig_StopBits stopbit() const;
  void set_stopbit(::es_config::UartConfig_StopBits value);
  private:
  ::es_config::UartConfig_StopBits _internal_stopbit() const;
  void _internal_set_stopbit(::es_config::UartConfig_StopBits value);
  public:

  // bool is_485 = 6;
  void clear_is_485();
  bool is_485() const;
  void set_is_485(bool value);
  private:
  bool _internal_is_485() const;
  void _internal_set_is_485(bool value);
  public:

  // @@protoc_insertion_point(class_scope:es_config.UartConfig.UartSetting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rw_485_;
  int baudrate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bsize_;
  int parity_;
  int stopbit_;
  bool is_485_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class UartConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.UartConfig) */ {
 public:
  inline UartConfig() : UartConfig(nullptr) {}
  virtual ~UartConfig();
  explicit constexpr UartConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UartConfig(const UartConfig& from);
  UartConfig(UartConfig&& from) noexcept
    : UartConfig() {
    *this = ::std::move(from);
  }

  inline UartConfig& operator=(const UartConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline UartConfig& operator=(UartConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UartConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const UartConfig* internal_default_instance() {
    return reinterpret_cast<const UartConfig*>(
               &_UartConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UartConfig& a, UartConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(UartConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UartConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UartConfig* New() const final {
    return CreateMaybeMessage<UartConfig>(nullptr);
  }

  UartConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UartConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UartConfig& from);
  void MergeFrom(const UartConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UartConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.UartConfig";
  }
  protected:
  explicit UartConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef UartConfig_UartSetting UartSetting;

  typedef UartConfig_Parity Parity;
  static constexpr Parity NONE =
    UartConfig_Parity_NONE;
  static constexpr Parity ODD =
    UartConfig_Parity_ODD;
  static constexpr Parity EVEN =
    UartConfig_Parity_EVEN;
  static inline bool Parity_IsValid(int value) {
    return UartConfig_Parity_IsValid(value);
  }
  static constexpr Parity Parity_MIN =
    UartConfig_Parity_Parity_MIN;
  static constexpr Parity Parity_MAX =
    UartConfig_Parity_Parity_MAX;
  static constexpr int Parity_ARRAYSIZE =
    UartConfig_Parity_Parity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Parity_descriptor() {
    return UartConfig_Parity_descriptor();
  }
  template<typename T>
  static inline const std::string& Parity_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Parity>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Parity_Name.");
    return UartConfig_Parity_Name(enum_t_value);
  }
  static inline bool Parity_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Parity* value) {
    return UartConfig_Parity_Parse(name, value);
  }

  typedef UartConfig_StopBits StopBits;
  static constexpr StopBits STOPBIT_INVALID =
    UartConfig_StopBits_STOPBIT_INVALID;
  static constexpr StopBits ONE =
    UartConfig_StopBits_ONE;
  static constexpr StopBits ONE_AND_HALF =
    UartConfig_StopBits_ONE_AND_HALF;
  static constexpr StopBits TWO =
    UartConfig_StopBits_TWO;
  static inline bool StopBits_IsValid(int value) {
    return UartConfig_StopBits_IsValid(value);
  }
  static constexpr StopBits StopBits_MIN =
    UartConfig_StopBits_StopBits_MIN;
  static constexpr StopBits StopBits_MAX =
    UartConfig_StopBits_StopBits_MAX;
  static constexpr int StopBits_ARRAYSIZE =
    UartConfig_StopBits_StopBits_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StopBits_descriptor() {
    return UartConfig_StopBits_descriptor();
  }
  template<typename T>
  static inline const std::string& StopBits_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StopBits>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StopBits_Name.");
    return UartConfig_StopBits_Name(enum_t_value);
  }
  static inline bool StopBits_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StopBits* value) {
    return UartConfig_StopBits_Parse(name, value);
  }

  typedef UartConfig_BaudRate BaudRate;
  static constexpr BaudRate BOAUD_INVALID =
    UartConfig_BaudRate_BOAUD_INVALID;
  static constexpr BaudRate BAUD_1200 =
    UartConfig_BaudRate_BAUD_1200;
  static constexpr BaudRate BAUD_2400 =
    UartConfig_BaudRate_BAUD_2400;
  static constexpr BaudRate BAUD_4800 =
    UartConfig_BaudRate_BAUD_4800;
  static constexpr BaudRate BAUD_9600 =
    UartConfig_BaudRate_BAUD_9600;
  static constexpr BaudRate BAUD_19200 =
    UartConfig_BaudRate_BAUD_19200;
  static constexpr BaudRate BAUD_38400 =
    UartConfig_BaudRate_BAUD_38400;
  static constexpr BaudRate BAUD_57600 =
    UartConfig_BaudRate_BAUD_57600;
  static constexpr BaudRate BAUD_115200 =
    UartConfig_BaudRate_BAUD_115200;
  static constexpr BaudRate BAUD_230400 =
    UartConfig_BaudRate_BAUD_230400;
  static constexpr BaudRate BAUD_460800 =
    UartConfig_BaudRate_BAUD_460800;
  static constexpr BaudRate BAUD_921600 =
    UartConfig_BaudRate_BAUD_921600;
  static inline bool BaudRate_IsValid(int value) {
    return UartConfig_BaudRate_IsValid(value);
  }
  static constexpr BaudRate BaudRate_MIN =
    UartConfig_BaudRate_BaudRate_MIN;
  static constexpr BaudRate BaudRate_MAX =
    UartConfig_BaudRate_BaudRate_MAX;
  static constexpr int BaudRate_ARRAYSIZE =
    UartConfig_BaudRate_BaudRate_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BaudRate_descriptor() {
    return UartConfig_BaudRate_descriptor();
  }
  template<typename T>
  static inline const std::string& BaudRate_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BaudRate>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BaudRate_Name.");
    return UartConfig_BaudRate_Name(enum_t_value);
  }
  static inline bool BaudRate_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BaudRate* value) {
    return UartConfig_BaudRate_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCcuControlFieldNumber = 1,
    kCcuDebugFieldNumber = 2,
    kRfidControlFieldNumber = 3,
    kPosControlFieldNumber = 4,
    kG4AtFieldNumber = 5,
  };
  // .es_config.UartConfig.UartSetting ccu_control = 1;
  bool has_ccu_control() const;
  private:
  bool _internal_has_ccu_control() const;
  public:
  void clear_ccu_control();
  const ::es_config::UartConfig_UartSetting& ccu_control() const;
  ::es_config::UartConfig_UartSetting* release_ccu_control();
  ::es_config::UartConfig_UartSetting* mutable_ccu_control();
  void set_allocated_ccu_control(::es_config::UartConfig_UartSetting* ccu_control);
  private:
  const ::es_config::UartConfig_UartSetting& _internal_ccu_control() const;
  ::es_config::UartConfig_UartSetting* _internal_mutable_ccu_control();
  public:
  void unsafe_arena_set_allocated_ccu_control(
      ::es_config::UartConfig_UartSetting* ccu_control);
  ::es_config::UartConfig_UartSetting* unsafe_arena_release_ccu_control();

  // .es_config.UartConfig.UartSetting ccu_debug = 2;
  bool has_ccu_debug() const;
  private:
  bool _internal_has_ccu_debug() const;
  public:
  void clear_ccu_debug();
  const ::es_config::UartConfig_UartSetting& ccu_debug() const;
  ::es_config::UartConfig_UartSetting* release_ccu_debug();
  ::es_config::UartConfig_UartSetting* mutable_ccu_debug();
  void set_allocated_ccu_debug(::es_config::UartConfig_UartSetting* ccu_debug);
  private:
  const ::es_config::UartConfig_UartSetting& _internal_ccu_debug() const;
  ::es_config::UartConfig_UartSetting* _internal_mutable_ccu_debug();
  public:
  void unsafe_arena_set_allocated_ccu_debug(
      ::es_config::UartConfig_UartSetting* ccu_debug);
  ::es_config::UartConfig_UartSetting* unsafe_arena_release_ccu_debug();

  // .es_config.UartConfig.UartSetting rfid_control = 3;
  bool has_rfid_control() const;
  private:
  bool _internal_has_rfid_control() const;
  public:
  void clear_rfid_control();
  const ::es_config::UartConfig_UartSetting& rfid_control() const;
  ::es_config::UartConfig_UartSetting* release_rfid_control();
  ::es_config::UartConfig_UartSetting* mutable_rfid_control();
  void set_allocated_rfid_control(::es_config::UartConfig_UartSetting* rfid_control);
  private:
  const ::es_config::UartConfig_UartSetting& _internal_rfid_control() const;
  ::es_config::UartConfig_UartSetting* _internal_mutable_rfid_control();
  public:
  void unsafe_arena_set_allocated_rfid_control(
      ::es_config::UartConfig_UartSetting* rfid_control);
  ::es_config::UartConfig_UartSetting* unsafe_arena_release_rfid_control();

  // .es_config.UartConfig.UartSetting pos_control = 4;
  bool has_pos_control() const;
  private:
  bool _internal_has_pos_control() const;
  public:
  void clear_pos_control();
  const ::es_config::UartConfig_UartSetting& pos_control() const;
  ::es_config::UartConfig_UartSetting* release_pos_control();
  ::es_config::UartConfig_UartSetting* mutable_pos_control();
  void set_allocated_pos_control(::es_config::UartConfig_UartSetting* pos_control);
  private:
  const ::es_config::UartConfig_UartSetting& _internal_pos_control() const;
  ::es_config::UartConfig_UartSetting* _internal_mutable_pos_control();
  public:
  void unsafe_arena_set_allocated_pos_control(
      ::es_config::UartConfig_UartSetting* pos_control);
  ::es_config::UartConfig_UartSetting* unsafe_arena_release_pos_control();

  // .es_config.UartConfig.UartSetting g4_at = 5;
  bool has_g4_at() const;
  private:
  bool _internal_has_g4_at() const;
  public:
  void clear_g4_at();
  const ::es_config::UartConfig_UartSetting& g4_at() const;
  ::es_config::UartConfig_UartSetting* release_g4_at();
  ::es_config::UartConfig_UartSetting* mutable_g4_at();
  void set_allocated_g4_at(::es_config::UartConfig_UartSetting* g4_at);
  private:
  const ::es_config::UartConfig_UartSetting& _internal_g4_at() const;
  ::es_config::UartConfig_UartSetting* _internal_mutable_g4_at();
  public:
  void unsafe_arena_set_allocated_g4_at(
      ::es_config::UartConfig_UartSetting* g4_at);
  ::es_config::UartConfig_UartSetting* unsafe_arena_release_g4_at();

  // @@protoc_insertion_point(class_scope:es_config.UartConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::es_config::UartConfig_UartSetting* ccu_control_;
  ::es_config::UartConfig_UartSetting* ccu_debug_;
  ::es_config::UartConfig_UartSetting* rfid_control_;
  ::es_config::UartConfig_UartSetting* pos_control_;
  ::es_config::UartConfig_UartSetting* g4_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class NetworkConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.NetworkConfig) */ {
 public:
  inline NetworkConfig() : NetworkConfig(nullptr) {}
  virtual ~NetworkConfig();
  explicit constexpr NetworkConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkConfig(const NetworkConfig& from);
  NetworkConfig(NetworkConfig&& from) noexcept
    : NetworkConfig() {
    *this = ::std::move(from);
  }

  inline NetworkConfig& operator=(const NetworkConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkConfig& operator=(NetworkConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkConfig* internal_default_instance() {
    return reinterpret_cast<const NetworkConfig*>(
               &_NetworkConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(NetworkConfig& a, NetworkConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkConfig* New() const final {
    return CreateMaybeMessage<NetworkConfig>(nullptr);
  }

  NetworkConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkConfig& from);
  void MergeFrom(const NetworkConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.NetworkConfig";
  }
  protected:
  explicit NetworkConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef NetworkConfig_NetworkType NetworkType;
  static constexpr NetworkType NONE =
    NetworkConfig_NetworkType_NONE;
  static constexpr NetworkType ETH =
    NetworkConfig_NetworkType_ETH;
  static constexpr NetworkType WIFI =
    NetworkConfig_NetworkType_WIFI;
  static constexpr NetworkType G4 =
    NetworkConfig_NetworkType_G4;
  static constexpr NetworkType ETH_WIFI =
    NetworkConfig_NetworkType_ETH_WIFI;
  static constexpr NetworkType ETH_G4 =
    NetworkConfig_NetworkType_ETH_G4;
  static constexpr NetworkType ETH_WIFI_G4 =
    NetworkConfig_NetworkType_ETH_WIFI_G4;
  static constexpr NetworkType WIFI_G4 =
    NetworkConfig_NetworkType_WIFI_G4;
  static inline bool NetworkType_IsValid(int value) {
    return NetworkConfig_NetworkType_IsValid(value);
  }
  static constexpr NetworkType NetworkType_MIN =
    NetworkConfig_NetworkType_NetworkType_MIN;
  static constexpr NetworkType NetworkType_MAX =
    NetworkConfig_NetworkType_NetworkType_MAX;
  static constexpr int NetworkType_ARRAYSIZE =
    NetworkConfig_NetworkType_NetworkType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NetworkType_descriptor() {
    return NetworkConfig_NetworkType_descriptor();
  }
  template<typename T>
  static inline const std::string& NetworkType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NetworkType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NetworkType_Name.");
    return NetworkConfig_NetworkType_Name(enum_t_value);
  }
  static inline bool NetworkType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NetworkType* value) {
    return NetworkConfig_NetworkType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNetTypeFieldNumber = 1,
  };
  // .es_config.NetworkConfig.NetworkType net_type = 1;
  void clear_net_type();
  ::es_config::NetworkConfig_NetworkType net_type() const;
  void set_net_type(::es_config::NetworkConfig_NetworkType value);
  private:
  ::es_config::NetworkConfig_NetworkType _internal_net_type() const;
  void _internal_set_net_type(::es_config::NetworkConfig_NetworkType value);
  public:

  // @@protoc_insertion_point(class_scope:es_config.NetworkConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int net_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class WorkModeConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.WorkModeConfig) */ {
 public:
  inline WorkModeConfig() : WorkModeConfig(nullptr) {}
  virtual ~WorkModeConfig();
  explicit constexpr WorkModeConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkModeConfig(const WorkModeConfig& from);
  WorkModeConfig(WorkModeConfig&& from) noexcept
    : WorkModeConfig() {
    *this = ::std::move(from);
  }

  inline WorkModeConfig& operator=(const WorkModeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkModeConfig& operator=(WorkModeConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkModeConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkModeConfig* internal_default_instance() {
    return reinterpret_cast<const WorkModeConfig*>(
               &_WorkModeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(WorkModeConfig& a, WorkModeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkModeConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkModeConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkModeConfig* New() const final {
    return CreateMaybeMessage<WorkModeConfig>(nullptr);
  }

  WorkModeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkModeConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkModeConfig& from);
  void MergeFrom(const WorkModeConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkModeConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.WorkModeConfig";
  }
  protected:
  explicit WorkModeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef WorkModeConfig_WorkMode WorkMode;
  static constexpr WorkMode ONLINE_CHARGE =
    WorkModeConfig_WorkMode_ONLINE_CHARGE;
  static constexpr WorkMode BLUETOOTH_CHARGE =
    WorkModeConfig_WorkMode_BLUETOOTH_CHARGE;
  static constexpr WorkMode EMS_MODE =
    WorkModeConfig_WorkMode_EMS_MODE;
  static inline bool WorkMode_IsValid(int value) {
    return WorkModeConfig_WorkMode_IsValid(value);
  }
  static constexpr WorkMode WorkMode_MIN =
    WorkModeConfig_WorkMode_WorkMode_MIN;
  static constexpr WorkMode WorkMode_MAX =
    WorkModeConfig_WorkMode_WorkMode_MAX;
  static constexpr int WorkMode_ARRAYSIZE =
    WorkModeConfig_WorkMode_WorkMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WorkMode_descriptor() {
    return WorkModeConfig_WorkMode_descriptor();
  }
  template<typename T>
  static inline const std::string& WorkMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WorkMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WorkMode_Name.");
    return WorkModeConfig_WorkMode_Name(enum_t_value);
  }
  static inline bool WorkMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WorkMode* value) {
    return WorkModeConfig_WorkMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWorkModeFieldNumber = 1,
  };
  // .es_config.WorkModeConfig.WorkMode work_mode = 1;
  void clear_work_mode();
  ::es_config::WorkModeConfig_WorkMode work_mode() const;
  void set_work_mode(::es_config::WorkModeConfig_WorkMode value);
  private:
  ::es_config::WorkModeConfig_WorkMode _internal_work_mode() const;
  void _internal_set_work_mode(::es_config::WorkModeConfig_WorkMode value);
  public:

  // @@protoc_insertion_point(class_scope:es_config.WorkModeConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int work_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ChargerConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es_config.ChargerConfig) */ {
 public:
  inline ChargerConfig() : ChargerConfig(nullptr) {}
  virtual ~ChargerConfig();
  explicit constexpr ChargerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChargerConfig(const ChargerConfig& from);
  ChargerConfig(ChargerConfig&& from) noexcept
    : ChargerConfig() {
    *this = ::std::move(from);
  }

  inline ChargerConfig& operator=(const ChargerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChargerConfig& operator=(ChargerConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChargerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChargerConfig* internal_default_instance() {
    return reinterpret_cast<const ChargerConfig*>(
               &_ChargerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ChargerConfig& a, ChargerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ChargerConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChargerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChargerConfig* New() const final {
    return CreateMaybeMessage<ChargerConfig>(nullptr);
  }

  ChargerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChargerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChargerConfig& from);
  void MergeFrom(const ChargerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChargerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es_config.ChargerConfig";
  }
  protected:
  explicit ChargerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kMaxCurrentFieldNumber = 2,
    kMinCurrentFieldNumber = 3,
    kMaxVoltageFieldNumber = 4,
    kMinVoltageFieldNumber = 5,
    kMaxPowerFieldNumber = 6,
  };
  // string model = 1;
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // uint32 max_current = 2;
  void clear_max_current();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_current() const;
  void set_max_current(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_current() const;
  void _internal_set_max_current(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 min_current = 3;
  void clear_min_current();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_current() const;
  void set_min_current(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_current() const;
  void _internal_set_min_current(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_voltage = 4;
  void clear_max_voltage();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_voltage() const;
  void set_max_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_voltage() const;
  void _internal_set_max_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 min_voltage = 5;
  void clear_min_voltage();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_voltage() const;
  void set_min_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_voltage() const;
  void _internal_set_min_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_power = 6;
  void clear_max_power();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_power() const;
  void set_max_power(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_power() const;
  void _internal_set_max_power(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:es_config.ChargerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_current_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_current_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_voltage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_voltage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_power_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Configuration

// .es_config.Vendor vendor = 1;
inline bool Configuration::_internal_has_vendor() const {
  return this != internal_default_instance() && vendor_ != nullptr;
}
inline bool Configuration::has_vendor() const {
  return _internal_has_vendor();
}
inline void Configuration::clear_vendor() {
  if (GetArena() == nullptr && vendor_ != nullptr) {
    delete vendor_;
  }
  vendor_ = nullptr;
}
inline const ::es_config::Vendor& Configuration::_internal_vendor() const {
  const ::es_config::Vendor* p = vendor_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::Vendor&>(
      ::es_config::_Vendor_default_instance_);
}
inline const ::es_config::Vendor& Configuration::vendor() const {
  // @@protoc_insertion_point(field_get:es_config.Configuration.vendor)
  return _internal_vendor();
}
inline void Configuration::unsafe_arena_set_allocated_vendor(
    ::es_config::Vendor* vendor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vendor_);
  }
  vendor_ = vendor;
  if (vendor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.Configuration.vendor)
}
inline ::es_config::Vendor* Configuration::release_vendor() {
  
  ::es_config::Vendor* temp = vendor_;
  vendor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::Vendor* Configuration::unsafe_arena_release_vendor() {
  // @@protoc_insertion_point(field_release:es_config.Configuration.vendor)
  
  ::es_config::Vendor* temp = vendor_;
  vendor_ = nullptr;
  return temp;
}
inline ::es_config::Vendor* Configuration::_internal_mutable_vendor() {
  
  if (vendor_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::Vendor>(GetArena());
    vendor_ = p;
  }
  return vendor_;
}
inline ::es_config::Vendor* Configuration::mutable_vendor() {
  // @@protoc_insertion_point(field_mutable:es_config.Configuration.vendor)
  return _internal_mutable_vendor();
}
inline void Configuration::set_allocated_vendor(::es_config::Vendor* vendor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vendor_;
  }
  if (vendor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vendor);
    if (message_arena != submessage_arena) {
      vendor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vendor, submessage_arena);
    }
    
  } else {
    
  }
  vendor_ = vendor;
  // @@protoc_insertion_point(field_set_allocated:es_config.Configuration.vendor)
}

// .es_config.LogConfig log = 2;
inline bool Configuration::_internal_has_log() const {
  return this != internal_default_instance() && log_ != nullptr;
}
inline bool Configuration::has_log() const {
  return _internal_has_log();
}
inline void Configuration::clear_log() {
  if (GetArena() == nullptr && log_ != nullptr) {
    delete log_;
  }
  log_ = nullptr;
}
inline const ::es_config::LogConfig& Configuration::_internal_log() const {
  const ::es_config::LogConfig* p = log_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::LogConfig&>(
      ::es_config::_LogConfig_default_instance_);
}
inline const ::es_config::LogConfig& Configuration::log() const {
  // @@protoc_insertion_point(field_get:es_config.Configuration.log)
  return _internal_log();
}
inline void Configuration::unsafe_arena_set_allocated_log(
    ::es_config::LogConfig* log) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_);
  }
  log_ = log;
  if (log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.Configuration.log)
}
inline ::es_config::LogConfig* Configuration::release_log() {
  
  ::es_config::LogConfig* temp = log_;
  log_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::LogConfig* Configuration::unsafe_arena_release_log() {
  // @@protoc_insertion_point(field_release:es_config.Configuration.log)
  
  ::es_config::LogConfig* temp = log_;
  log_ = nullptr;
  return temp;
}
inline ::es_config::LogConfig* Configuration::_internal_mutable_log() {
  
  if (log_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::LogConfig>(GetArena());
    log_ = p;
  }
  return log_;
}
inline ::es_config::LogConfig* Configuration::mutable_log() {
  // @@protoc_insertion_point(field_mutable:es_config.Configuration.log)
  return _internal_mutable_log();
}
inline void Configuration::set_allocated_log(::es_config::LogConfig* log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete log_;
  }
  if (log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(log);
    if (message_arena != submessage_arena) {
      log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:es_config.Configuration.log)
}

// .es_config.BleConfig ble = 3;
inline bool Configuration::_internal_has_ble() const {
  return this != internal_default_instance() && ble_ != nullptr;
}
inline bool Configuration::has_ble() const {
  return _internal_has_ble();
}
inline void Configuration::clear_ble() {
  if (GetArena() == nullptr && ble_ != nullptr) {
    delete ble_;
  }
  ble_ = nullptr;
}
inline const ::es_config::BleConfig& Configuration::_internal_ble() const {
  const ::es_config::BleConfig* p = ble_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::BleConfig&>(
      ::es_config::_BleConfig_default_instance_);
}
inline const ::es_config::BleConfig& Configuration::ble() const {
  // @@protoc_insertion_point(field_get:es_config.Configuration.ble)
  return _internal_ble();
}
inline void Configuration::unsafe_arena_set_allocated_ble(
    ::es_config::BleConfig* ble) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ble_);
  }
  ble_ = ble;
  if (ble) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.Configuration.ble)
}
inline ::es_config::BleConfig* Configuration::release_ble() {
  
  ::es_config::BleConfig* temp = ble_;
  ble_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::BleConfig* Configuration::unsafe_arena_release_ble() {
  // @@protoc_insertion_point(field_release:es_config.Configuration.ble)
  
  ::es_config::BleConfig* temp = ble_;
  ble_ = nullptr;
  return temp;
}
inline ::es_config::BleConfig* Configuration::_internal_mutable_ble() {
  
  if (ble_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::BleConfig>(GetArena());
    ble_ = p;
  }
  return ble_;
}
inline ::es_config::BleConfig* Configuration::mutable_ble() {
  // @@protoc_insertion_point(field_mutable:es_config.Configuration.ble)
  return _internal_mutable_ble();
}
inline void Configuration::set_allocated_ble(::es_config::BleConfig* ble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ble_;
  }
  if (ble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ble);
    if (message_arena != submessage_arena) {
      ble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ble, submessage_arena);
    }
    
  } else {
    
  }
  ble_ = ble;
  // @@protoc_insertion_point(field_set_allocated:es_config.Configuration.ble)
}

// .es_config.WiFiConfig wifi = 4;
inline bool Configuration::_internal_has_wifi() const {
  return this != internal_default_instance() && wifi_ != nullptr;
}
inline bool Configuration::has_wifi() const {
  return _internal_has_wifi();
}
inline void Configuration::clear_wifi() {
  if (GetArena() == nullptr && wifi_ != nullptr) {
    delete wifi_;
  }
  wifi_ = nullptr;
}
inline const ::es_config::WiFiConfig& Configuration::_internal_wifi() const {
  const ::es_config::WiFiConfig* p = wifi_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::WiFiConfig&>(
      ::es_config::_WiFiConfig_default_instance_);
}
inline const ::es_config::WiFiConfig& Configuration::wifi() const {
  // @@protoc_insertion_point(field_get:es_config.Configuration.wifi)
  return _internal_wifi();
}
inline void Configuration::unsafe_arena_set_allocated_wifi(
    ::es_config::WiFiConfig* wifi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wifi_);
  }
  wifi_ = wifi;
  if (wifi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.Configuration.wifi)
}
inline ::es_config::WiFiConfig* Configuration::release_wifi() {
  
  ::es_config::WiFiConfig* temp = wifi_;
  wifi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::WiFiConfig* Configuration::unsafe_arena_release_wifi() {
  // @@protoc_insertion_point(field_release:es_config.Configuration.wifi)
  
  ::es_config::WiFiConfig* temp = wifi_;
  wifi_ = nullptr;
  return temp;
}
inline ::es_config::WiFiConfig* Configuration::_internal_mutable_wifi() {
  
  if (wifi_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::WiFiConfig>(GetArena());
    wifi_ = p;
  }
  return wifi_;
}
inline ::es_config::WiFiConfig* Configuration::mutable_wifi() {
  // @@protoc_insertion_point(field_mutable:es_config.Configuration.wifi)
  return _internal_mutable_wifi();
}
inline void Configuration::set_allocated_wifi(::es_config::WiFiConfig* wifi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wifi_;
  }
  if (wifi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wifi);
    if (message_arena != submessage_arena) {
      wifi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wifi, submessage_arena);
    }
    
  } else {
    
  }
  wifi_ = wifi;
  // @@protoc_insertion_point(field_set_allocated:es_config.Configuration.wifi)
}

// .es_config.ApConfig ap = 5;
inline bool Configuration::_internal_has_ap() const {
  return this != internal_default_instance() && ap_ != nullptr;
}
inline bool Configuration::has_ap() const {
  return _internal_has_ap();
}
inline void Configuration::clear_ap() {
  if (GetArena() == nullptr && ap_ != nullptr) {
    delete ap_;
  }
  ap_ = nullptr;
}
inline const ::es_config::ApConfig& Configuration::_internal_ap() const {
  const ::es_config::ApConfig* p = ap_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::ApConfig&>(
      ::es_config::_ApConfig_default_instance_);
}
inline const ::es_config::ApConfig& Configuration::ap() const {
  // @@protoc_insertion_point(field_get:es_config.Configuration.ap)
  return _internal_ap();
}
inline void Configuration::unsafe_arena_set_allocated_ap(
    ::es_config::ApConfig* ap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ap_);
  }
  ap_ = ap;
  if (ap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.Configuration.ap)
}
inline ::es_config::ApConfig* Configuration::release_ap() {
  
  ::es_config::ApConfig* temp = ap_;
  ap_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::ApConfig* Configuration::unsafe_arena_release_ap() {
  // @@protoc_insertion_point(field_release:es_config.Configuration.ap)
  
  ::es_config::ApConfig* temp = ap_;
  ap_ = nullptr;
  return temp;
}
inline ::es_config::ApConfig* Configuration::_internal_mutable_ap() {
  
  if (ap_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::ApConfig>(GetArena());
    ap_ = p;
  }
  return ap_;
}
inline ::es_config::ApConfig* Configuration::mutable_ap() {
  // @@protoc_insertion_point(field_mutable:es_config.Configuration.ap)
  return _internal_mutable_ap();
}
inline void Configuration::set_allocated_ap(::es_config::ApConfig* ap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ap_;
  }
  if (ap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ap);
    if (message_arena != submessage_arena) {
      ap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ap, submessage_arena);
    }
    
  } else {
    
  }
  ap_ = ap;
  // @@protoc_insertion_point(field_set_allocated:es_config.Configuration.ap)
}

// .es_config.G4Config g4 = 6;
inline bool Configuration::_internal_has_g4() const {
  return this != internal_default_instance() && g4_ != nullptr;
}
inline bool Configuration::has_g4() const {
  return _internal_has_g4();
}
inline void Configuration::clear_g4() {
  if (GetArena() == nullptr && g4_ != nullptr) {
    delete g4_;
  }
  g4_ = nullptr;
}
inline const ::es_config::G4Config& Configuration::_internal_g4() const {
  const ::es_config::G4Config* p = g4_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::G4Config&>(
      ::es_config::_G4Config_default_instance_);
}
inline const ::es_config::G4Config& Configuration::g4() const {
  // @@protoc_insertion_point(field_get:es_config.Configuration.g4)
  return _internal_g4();
}
inline void Configuration::unsafe_arena_set_allocated_g4(
    ::es_config::G4Config* g4) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g4_);
  }
  g4_ = g4;
  if (g4) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.Configuration.g4)
}
inline ::es_config::G4Config* Configuration::release_g4() {
  
  ::es_config::G4Config* temp = g4_;
  g4_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::G4Config* Configuration::unsafe_arena_release_g4() {
  // @@protoc_insertion_point(field_release:es_config.Configuration.g4)
  
  ::es_config::G4Config* temp = g4_;
  g4_ = nullptr;
  return temp;
}
inline ::es_config::G4Config* Configuration::_internal_mutable_g4() {
  
  if (g4_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::G4Config>(GetArena());
    g4_ = p;
  }
  return g4_;
}
inline ::es_config::G4Config* Configuration::mutable_g4() {
  // @@protoc_insertion_point(field_mutable:es_config.Configuration.g4)
  return _internal_mutable_g4();
}
inline void Configuration::set_allocated_g4(::es_config::G4Config* g4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete g4_;
  }
  if (g4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(g4);
    if (message_arena != submessage_arena) {
      g4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g4, submessage_arena);
    }
    
  } else {
    
  }
  g4_ = g4;
  // @@protoc_insertion_point(field_set_allocated:es_config.Configuration.g4)
}

// .es_config.EthConfig eth = 7;
inline bool Configuration::_internal_has_eth() const {
  return this != internal_default_instance() && eth_ != nullptr;
}
inline bool Configuration::has_eth() const {
  return _internal_has_eth();
}
inline void Configuration::clear_eth() {
  if (GetArena() == nullptr && eth_ != nullptr) {
    delete eth_;
  }
  eth_ = nullptr;
}
inline const ::es_config::EthConfig& Configuration::_internal_eth() const {
  const ::es_config::EthConfig* p = eth_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::EthConfig&>(
      ::es_config::_EthConfig_default_instance_);
}
inline const ::es_config::EthConfig& Configuration::eth() const {
  // @@protoc_insertion_point(field_get:es_config.Configuration.eth)
  return _internal_eth();
}
inline void Configuration::unsafe_arena_set_allocated_eth(
    ::es_config::EthConfig* eth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eth_);
  }
  eth_ = eth;
  if (eth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.Configuration.eth)
}
inline ::es_config::EthConfig* Configuration::release_eth() {
  
  ::es_config::EthConfig* temp = eth_;
  eth_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::EthConfig* Configuration::unsafe_arena_release_eth() {
  // @@protoc_insertion_point(field_release:es_config.Configuration.eth)
  
  ::es_config::EthConfig* temp = eth_;
  eth_ = nullptr;
  return temp;
}
inline ::es_config::EthConfig* Configuration::_internal_mutable_eth() {
  
  if (eth_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::EthConfig>(GetArena());
    eth_ = p;
  }
  return eth_;
}
inline ::es_config::EthConfig* Configuration::mutable_eth() {
  // @@protoc_insertion_point(field_mutable:es_config.Configuration.eth)
  return _internal_mutable_eth();
}
inline void Configuration::set_allocated_eth(::es_config::EthConfig* eth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eth_;
  }
  if (eth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eth);
    if (message_arena != submessage_arena) {
      eth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eth, submessage_arena);
    }
    
  } else {
    
  }
  eth_ = eth;
  // @@protoc_insertion_point(field_set_allocated:es_config.Configuration.eth)
}

// .es_config.NtpConfig ntp = 8;
inline bool Configuration::_internal_has_ntp() const {
  return this != internal_default_instance() && ntp_ != nullptr;
}
inline bool Configuration::has_ntp() const {
  return _internal_has_ntp();
}
inline void Configuration::clear_ntp() {
  if (GetArena() == nullptr && ntp_ != nullptr) {
    delete ntp_;
  }
  ntp_ = nullptr;
}
inline const ::es_config::NtpConfig& Configuration::_internal_ntp() const {
  const ::es_config::NtpConfig* p = ntp_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::NtpConfig&>(
      ::es_config::_NtpConfig_default_instance_);
}
inline const ::es_config::NtpConfig& Configuration::ntp() const {
  // @@protoc_insertion_point(field_get:es_config.Configuration.ntp)
  return _internal_ntp();
}
inline void Configuration::unsafe_arena_set_allocated_ntp(
    ::es_config::NtpConfig* ntp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ntp_);
  }
  ntp_ = ntp;
  if (ntp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.Configuration.ntp)
}
inline ::es_config::NtpConfig* Configuration::release_ntp() {
  
  ::es_config::NtpConfig* temp = ntp_;
  ntp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::NtpConfig* Configuration::unsafe_arena_release_ntp() {
  // @@protoc_insertion_point(field_release:es_config.Configuration.ntp)
  
  ::es_config::NtpConfig* temp = ntp_;
  ntp_ = nullptr;
  return temp;
}
inline ::es_config::NtpConfig* Configuration::_internal_mutable_ntp() {
  
  if (ntp_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::NtpConfig>(GetArena());
    ntp_ = p;
  }
  return ntp_;
}
inline ::es_config::NtpConfig* Configuration::mutable_ntp() {
  // @@protoc_insertion_point(field_mutable:es_config.Configuration.ntp)
  return _internal_mutable_ntp();
}
inline void Configuration::set_allocated_ntp(::es_config::NtpConfig* ntp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ntp_;
  }
  if (ntp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ntp);
    if (message_arena != submessage_arena) {
      ntp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ntp, submessage_arena);
    }
    
  } else {
    
  }
  ntp_ = ntp;
  // @@protoc_insertion_point(field_set_allocated:es_config.Configuration.ntp)
}

// .es_config.GpioConfig gpio = 9;
inline bool Configuration::_internal_has_gpio() const {
  return this != internal_default_instance() && gpio_ != nullptr;
}
inline bool Configuration::has_gpio() const {
  return _internal_has_gpio();
}
inline void Configuration::clear_gpio() {
  if (GetArena() == nullptr && gpio_ != nullptr) {
    delete gpio_;
  }
  gpio_ = nullptr;
}
inline const ::es_config::GpioConfig& Configuration::_internal_gpio() const {
  const ::es_config::GpioConfig* p = gpio_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::GpioConfig&>(
      ::es_config::_GpioConfig_default_instance_);
}
inline const ::es_config::GpioConfig& Configuration::gpio() const {
  // @@protoc_insertion_point(field_get:es_config.Configuration.gpio)
  return _internal_gpio();
}
inline void Configuration::unsafe_arena_set_allocated_gpio(
    ::es_config::GpioConfig* gpio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpio_);
  }
  gpio_ = gpio;
  if (gpio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.Configuration.gpio)
}
inline ::es_config::GpioConfig* Configuration::release_gpio() {
  
  ::es_config::GpioConfig* temp = gpio_;
  gpio_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::GpioConfig* Configuration::unsafe_arena_release_gpio() {
  // @@protoc_insertion_point(field_release:es_config.Configuration.gpio)
  
  ::es_config::GpioConfig* temp = gpio_;
  gpio_ = nullptr;
  return temp;
}
inline ::es_config::GpioConfig* Configuration::_internal_mutable_gpio() {
  
  if (gpio_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::GpioConfig>(GetArena());
    gpio_ = p;
  }
  return gpio_;
}
inline ::es_config::GpioConfig* Configuration::mutable_gpio() {
  // @@protoc_insertion_point(field_mutable:es_config.Configuration.gpio)
  return _internal_mutable_gpio();
}
inline void Configuration::set_allocated_gpio(::es_config::GpioConfig* gpio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gpio_;
  }
  if (gpio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gpio);
    if (message_arena != submessage_arena) {
      gpio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpio, submessage_arena);
    }
    
  } else {
    
  }
  gpio_ = gpio;
  // @@protoc_insertion_point(field_set_allocated:es_config.Configuration.gpio)
}

// .es_config.OcppConfig ocpp = 10;
inline bool Configuration::_internal_has_ocpp() const {
  return this != internal_default_instance() && ocpp_ != nullptr;
}
inline bool Configuration::has_ocpp() const {
  return _internal_has_ocpp();
}
inline void Configuration::clear_ocpp() {
  if (GetArena() == nullptr && ocpp_ != nullptr) {
    delete ocpp_;
  }
  ocpp_ = nullptr;
}
inline const ::es_config::OcppConfig& Configuration::_internal_ocpp() const {
  const ::es_config::OcppConfig* p = ocpp_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::OcppConfig&>(
      ::es_config::_OcppConfig_default_instance_);
}
inline const ::es_config::OcppConfig& Configuration::ocpp() const {
  // @@protoc_insertion_point(field_get:es_config.Configuration.ocpp)
  return _internal_ocpp();
}
inline void Configuration::unsafe_arena_set_allocated_ocpp(
    ::es_config::OcppConfig* ocpp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ocpp_);
  }
  ocpp_ = ocpp;
  if (ocpp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.Configuration.ocpp)
}
inline ::es_config::OcppConfig* Configuration::release_ocpp() {
  
  ::es_config::OcppConfig* temp = ocpp_;
  ocpp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::OcppConfig* Configuration::unsafe_arena_release_ocpp() {
  // @@protoc_insertion_point(field_release:es_config.Configuration.ocpp)
  
  ::es_config::OcppConfig* temp = ocpp_;
  ocpp_ = nullptr;
  return temp;
}
inline ::es_config::OcppConfig* Configuration::_internal_mutable_ocpp() {
  
  if (ocpp_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::OcppConfig>(GetArena());
    ocpp_ = p;
  }
  return ocpp_;
}
inline ::es_config::OcppConfig* Configuration::mutable_ocpp() {
  // @@protoc_insertion_point(field_mutable:es_config.Configuration.ocpp)
  return _internal_mutable_ocpp();
}
inline void Configuration::set_allocated_ocpp(::es_config::OcppConfig* ocpp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ocpp_;
  }
  if (ocpp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ocpp);
    if (message_arena != submessage_arena) {
      ocpp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ocpp, submessage_arena);
    }
    
  } else {
    
  }
  ocpp_ = ocpp;
  // @@protoc_insertion_point(field_set_allocated:es_config.Configuration.ocpp)
}

// .es_config.OtaConfig ota = 11;
inline bool Configuration::_internal_has_ota() const {
  return this != internal_default_instance() && ota_ != nullptr;
}
inline bool Configuration::has_ota() const {
  return _internal_has_ota();
}
inline void Configuration::clear_ota() {
  if (GetArena() == nullptr && ota_ != nullptr) {
    delete ota_;
  }
  ota_ = nullptr;
}
inline const ::es_config::OtaConfig& Configuration::_internal_ota() const {
  const ::es_config::OtaConfig* p = ota_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::OtaConfig&>(
      ::es_config::_OtaConfig_default_instance_);
}
inline const ::es_config::OtaConfig& Configuration::ota() const {
  // @@protoc_insertion_point(field_get:es_config.Configuration.ota)
  return _internal_ota();
}
inline void Configuration::unsafe_arena_set_allocated_ota(
    ::es_config::OtaConfig* ota) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ota_);
  }
  ota_ = ota;
  if (ota) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.Configuration.ota)
}
inline ::es_config::OtaConfig* Configuration::release_ota() {
  
  ::es_config::OtaConfig* temp = ota_;
  ota_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::OtaConfig* Configuration::unsafe_arena_release_ota() {
  // @@protoc_insertion_point(field_release:es_config.Configuration.ota)
  
  ::es_config::OtaConfig* temp = ota_;
  ota_ = nullptr;
  return temp;
}
inline ::es_config::OtaConfig* Configuration::_internal_mutable_ota() {
  
  if (ota_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::OtaConfig>(GetArena());
    ota_ = p;
  }
  return ota_;
}
inline ::es_config::OtaConfig* Configuration::mutable_ota() {
  // @@protoc_insertion_point(field_mutable:es_config.Configuration.ota)
  return _internal_mutable_ota();
}
inline void Configuration::set_allocated_ota(::es_config::OtaConfig* ota) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ota_;
  }
  if (ota) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ota);
    if (message_arena != submessage_arena) {
      ota = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ota, submessage_arena);
    }
    
  } else {
    
  }
  ota_ = ota;
  // @@protoc_insertion_point(field_set_allocated:es_config.Configuration.ota)
}

// .es_config.UartConfig uart = 12;
inline bool Configuration::_internal_has_uart() const {
  return this != internal_default_instance() && uart_ != nullptr;
}
inline bool Configuration::has_uart() const {
  return _internal_has_uart();
}
inline void Configuration::clear_uart() {
  if (GetArena() == nullptr && uart_ != nullptr) {
    delete uart_;
  }
  uart_ = nullptr;
}
inline const ::es_config::UartConfig& Configuration::_internal_uart() const {
  const ::es_config::UartConfig* p = uart_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::UartConfig&>(
      ::es_config::_UartConfig_default_instance_);
}
inline const ::es_config::UartConfig& Configuration::uart() const {
  // @@protoc_insertion_point(field_get:es_config.Configuration.uart)
  return _internal_uart();
}
inline void Configuration::unsafe_arena_set_allocated_uart(
    ::es_config::UartConfig* uart) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uart_);
  }
  uart_ = uart;
  if (uart) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.Configuration.uart)
}
inline ::es_config::UartConfig* Configuration::release_uart() {
  
  ::es_config::UartConfig* temp = uart_;
  uart_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::UartConfig* Configuration::unsafe_arena_release_uart() {
  // @@protoc_insertion_point(field_release:es_config.Configuration.uart)
  
  ::es_config::UartConfig* temp = uart_;
  uart_ = nullptr;
  return temp;
}
inline ::es_config::UartConfig* Configuration::_internal_mutable_uart() {
  
  if (uart_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::UartConfig>(GetArena());
    uart_ = p;
  }
  return uart_;
}
inline ::es_config::UartConfig* Configuration::mutable_uart() {
  // @@protoc_insertion_point(field_mutable:es_config.Configuration.uart)
  return _internal_mutable_uart();
}
inline void Configuration::set_allocated_uart(::es_config::UartConfig* uart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uart_;
  }
  if (uart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uart);
    if (message_arena != submessage_arena) {
      uart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uart, submessage_arena);
    }
    
  } else {
    
  }
  uart_ = uart;
  // @@protoc_insertion_point(field_set_allocated:es_config.Configuration.uart)
}

// .es_config.NetworkConfig network = 13;
inline bool Configuration::_internal_has_network() const {
  return this != internal_default_instance() && network_ != nullptr;
}
inline bool Configuration::has_network() const {
  return _internal_has_network();
}
inline void Configuration::clear_network() {
  if (GetArena() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
}
inline const ::es_config::NetworkConfig& Configuration::_internal_network() const {
  const ::es_config::NetworkConfig* p = network_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::NetworkConfig&>(
      ::es_config::_NetworkConfig_default_instance_);
}
inline const ::es_config::NetworkConfig& Configuration::network() const {
  // @@protoc_insertion_point(field_get:es_config.Configuration.network)
  return _internal_network();
}
inline void Configuration::unsafe_arena_set_allocated_network(
    ::es_config::NetworkConfig* network) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  network_ = network;
  if (network) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.Configuration.network)
}
inline ::es_config::NetworkConfig* Configuration::release_network() {
  
  ::es_config::NetworkConfig* temp = network_;
  network_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::NetworkConfig* Configuration::unsafe_arena_release_network() {
  // @@protoc_insertion_point(field_release:es_config.Configuration.network)
  
  ::es_config::NetworkConfig* temp = network_;
  network_ = nullptr;
  return temp;
}
inline ::es_config::NetworkConfig* Configuration::_internal_mutable_network() {
  
  if (network_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::NetworkConfig>(GetArena());
    network_ = p;
  }
  return network_;
}
inline ::es_config::NetworkConfig* Configuration::mutable_network() {
  // @@protoc_insertion_point(field_mutable:es_config.Configuration.network)
  return _internal_mutable_network();
}
inline void Configuration::set_allocated_network(::es_config::NetworkConfig* network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete network_;
  }
  if (network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(network);
    if (message_arena != submessage_arena) {
      network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    
  } else {
    
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:es_config.Configuration.network)
}

// .es_config.WorkModeConfig workmode = 14;
inline bool Configuration::_internal_has_workmode() const {
  return this != internal_default_instance() && workmode_ != nullptr;
}
inline bool Configuration::has_workmode() const {
  return _internal_has_workmode();
}
inline void Configuration::clear_workmode() {
  if (GetArena() == nullptr && workmode_ != nullptr) {
    delete workmode_;
  }
  workmode_ = nullptr;
}
inline const ::es_config::WorkModeConfig& Configuration::_internal_workmode() const {
  const ::es_config::WorkModeConfig* p = workmode_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::WorkModeConfig&>(
      ::es_config::_WorkModeConfig_default_instance_);
}
inline const ::es_config::WorkModeConfig& Configuration::workmode() const {
  // @@protoc_insertion_point(field_get:es_config.Configuration.workmode)
  return _internal_workmode();
}
inline void Configuration::unsafe_arena_set_allocated_workmode(
    ::es_config::WorkModeConfig* workmode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workmode_);
  }
  workmode_ = workmode;
  if (workmode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.Configuration.workmode)
}
inline ::es_config::WorkModeConfig* Configuration::release_workmode() {
  
  ::es_config::WorkModeConfig* temp = workmode_;
  workmode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::WorkModeConfig* Configuration::unsafe_arena_release_workmode() {
  // @@protoc_insertion_point(field_release:es_config.Configuration.workmode)
  
  ::es_config::WorkModeConfig* temp = workmode_;
  workmode_ = nullptr;
  return temp;
}
inline ::es_config::WorkModeConfig* Configuration::_internal_mutable_workmode() {
  
  if (workmode_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::WorkModeConfig>(GetArena());
    workmode_ = p;
  }
  return workmode_;
}
inline ::es_config::WorkModeConfig* Configuration::mutable_workmode() {
  // @@protoc_insertion_point(field_mutable:es_config.Configuration.workmode)
  return _internal_mutable_workmode();
}
inline void Configuration::set_allocated_workmode(::es_config::WorkModeConfig* workmode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete workmode_;
  }
  if (workmode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(workmode);
    if (message_arena != submessage_arena) {
      workmode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workmode, submessage_arena);
    }
    
  } else {
    
  }
  workmode_ = workmode;
  // @@protoc_insertion_point(field_set_allocated:es_config.Configuration.workmode)
}

// .es_config.ChargerConfig charger = 15;
inline bool Configuration::_internal_has_charger() const {
  return this != internal_default_instance() && charger_ != nullptr;
}
inline bool Configuration::has_charger() const {
  return _internal_has_charger();
}
inline void Configuration::clear_charger() {
  if (GetArena() == nullptr && charger_ != nullptr) {
    delete charger_;
  }
  charger_ = nullptr;
}
inline const ::es_config::ChargerConfig& Configuration::_internal_charger() const {
  const ::es_config::ChargerConfig* p = charger_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::ChargerConfig&>(
      ::es_config::_ChargerConfig_default_instance_);
}
inline const ::es_config::ChargerConfig& Configuration::charger() const {
  // @@protoc_insertion_point(field_get:es_config.Configuration.charger)
  return _internal_charger();
}
inline void Configuration::unsafe_arena_set_allocated_charger(
    ::es_config::ChargerConfig* charger) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(charger_);
  }
  charger_ = charger;
  if (charger) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.Configuration.charger)
}
inline ::es_config::ChargerConfig* Configuration::release_charger() {
  
  ::es_config::ChargerConfig* temp = charger_;
  charger_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::ChargerConfig* Configuration::unsafe_arena_release_charger() {
  // @@protoc_insertion_point(field_release:es_config.Configuration.charger)
  
  ::es_config::ChargerConfig* temp = charger_;
  charger_ = nullptr;
  return temp;
}
inline ::es_config::ChargerConfig* Configuration::_internal_mutable_charger() {
  
  if (charger_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::ChargerConfig>(GetArena());
    charger_ = p;
  }
  return charger_;
}
inline ::es_config::ChargerConfig* Configuration::mutable_charger() {
  // @@protoc_insertion_point(field_mutable:es_config.Configuration.charger)
  return _internal_mutable_charger();
}
inline void Configuration::set_allocated_charger(::es_config::ChargerConfig* charger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete charger_;
  }
  if (charger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(charger);
    if (message_arena != submessage_arena) {
      charger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, charger, submessage_arena);
    }
    
  } else {
    
  }
  charger_ = charger;
  // @@protoc_insertion_point(field_set_allocated:es_config.Configuration.charger)
}

// -------------------------------------------------------------------

// Vendor

// string vendor_name = 1;
inline void Vendor::clear_vendor_name() {
  vendor_name_.ClearToEmpty();
}
inline const std::string& Vendor::vendor_name() const {
  // @@protoc_insertion_point(field_get:es_config.Vendor.vendor_name)
  return _internal_vendor_name();
}
inline void Vendor::set_vendor_name(const std::string& value) {
  _internal_set_vendor_name(value);
  // @@protoc_insertion_point(field_set:es_config.Vendor.vendor_name)
}
inline std::string* Vendor::mutable_vendor_name() {
  // @@protoc_insertion_point(field_mutable:es_config.Vendor.vendor_name)
  return _internal_mutable_vendor_name();
}
inline const std::string& Vendor::_internal_vendor_name() const {
  return vendor_name_.Get();
}
inline void Vendor::_internal_set_vendor_name(const std::string& value) {
  
  vendor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Vendor::set_vendor_name(std::string&& value) {
  
  vendor_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.Vendor.vendor_name)
}
inline void Vendor::set_vendor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vendor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.Vendor.vendor_name)
}
inline void Vendor::set_vendor_name(const char* value,
    size_t size) {
  
  vendor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.Vendor.vendor_name)
}
inline std::string* Vendor::_internal_mutable_vendor_name() {
  
  return vendor_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Vendor::release_vendor_name() {
  // @@protoc_insertion_point(field_release:es_config.Vendor.vendor_name)
  return vendor_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vendor::set_allocated_vendor_name(std::string* vendor_name) {
  if (vendor_name != nullptr) {
    
  } else {
    
  }
  vendor_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.Vendor.vendor_name)
}

// string vendor_id = 2;
inline void Vendor::clear_vendor_id() {
  vendor_id_.ClearToEmpty();
}
inline const std::string& Vendor::vendor_id() const {
  // @@protoc_insertion_point(field_get:es_config.Vendor.vendor_id)
  return _internal_vendor_id();
}
inline void Vendor::set_vendor_id(const std::string& value) {
  _internal_set_vendor_id(value);
  // @@protoc_insertion_point(field_set:es_config.Vendor.vendor_id)
}
inline std::string* Vendor::mutable_vendor_id() {
  // @@protoc_insertion_point(field_mutable:es_config.Vendor.vendor_id)
  return _internal_mutable_vendor_id();
}
inline const std::string& Vendor::_internal_vendor_id() const {
  return vendor_id_.Get();
}
inline void Vendor::_internal_set_vendor_id(const std::string& value) {
  
  vendor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Vendor::set_vendor_id(std::string&& value) {
  
  vendor_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.Vendor.vendor_id)
}
inline void Vendor::set_vendor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vendor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.Vendor.vendor_id)
}
inline void Vendor::set_vendor_id(const char* value,
    size_t size) {
  
  vendor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.Vendor.vendor_id)
}
inline std::string* Vendor::_internal_mutable_vendor_id() {
  
  return vendor_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Vendor::release_vendor_id() {
  // @@protoc_insertion_point(field_release:es_config.Vendor.vendor_id)
  return vendor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vendor::set_allocated_vendor_id(std::string* vendor_id) {
  if (vendor_id != nullptr) {
    
  } else {
    
  }
  vendor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.Vendor.vendor_id)
}

// -------------------------------------------------------------------

// LogConfig

// string path = 1;
inline void LogConfig::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& LogConfig::path() const {
  // @@protoc_insertion_point(field_get:es_config.LogConfig.path)
  return _internal_path();
}
inline void LogConfig::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:es_config.LogConfig.path)
}
inline std::string* LogConfig::mutable_path() {
  // @@protoc_insertion_point(field_mutable:es_config.LogConfig.path)
  return _internal_mutable_path();
}
inline const std::string& LogConfig::_internal_path() const {
  return path_.Get();
}
inline void LogConfig::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogConfig::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.LogConfig.path)
}
inline void LogConfig::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.LogConfig.path)
}
inline void LogConfig::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.LogConfig.path)
}
inline std::string* LogConfig::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogConfig::release_path() {
  // @@protoc_insertion_point(field_release:es_config.LogConfig.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogConfig::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.LogConfig.path)
}

// uint32 file_size_limit = 2;
inline void LogConfig::clear_file_size_limit() {
  file_size_limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogConfig::_internal_file_size_limit() const {
  return file_size_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogConfig::file_size_limit() const {
  // @@protoc_insertion_point(field_get:es_config.LogConfig.file_size_limit)
  return _internal_file_size_limit();
}
inline void LogConfig::_internal_set_file_size_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  file_size_limit_ = value;
}
inline void LogConfig::set_file_size_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_size_limit(value);
  // @@protoc_insertion_point(field_set:es_config.LogConfig.file_size_limit)
}

// uint32 file_number_limit = 3;
inline void LogConfig::clear_file_number_limit() {
  file_number_limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogConfig::_internal_file_number_limit() const {
  return file_number_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogConfig::file_number_limit() const {
  // @@protoc_insertion_point(field_get:es_config.LogConfig.file_number_limit)
  return _internal_file_number_limit();
}
inline void LogConfig::_internal_set_file_number_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  file_number_limit_ = value;
}
inline void LogConfig::set_file_number_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_number_limit(value);
  // @@protoc_insertion_point(field_set:es_config.LogConfig.file_number_limit)
}

// uint32 total_size_limit = 4;
inline void LogConfig::clear_total_size_limit() {
  total_size_limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogConfig::_internal_total_size_limit() const {
  return total_size_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogConfig::total_size_limit() const {
  // @@protoc_insertion_point(field_get:es_config.LogConfig.total_size_limit)
  return _internal_total_size_limit();
}
inline void LogConfig::_internal_set_total_size_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_size_limit_ = value;
}
inline void LogConfig::set_total_size_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_size_limit(value);
  // @@protoc_insertion_point(field_set:es_config.LogConfig.total_size_limit)
}

// -------------------------------------------------------------------

// BleConfig

// bool enable = 1;
inline void BleConfig::clear_enable() {
  enable_ = false;
}
inline bool BleConfig::_internal_enable() const {
  return enable_;
}
inline bool BleConfig::enable() const {
  // @@protoc_insertion_point(field_get:es_config.BleConfig.enable)
  return _internal_enable();
}
inline void BleConfig::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void BleConfig::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:es_config.BleConfig.enable)
}

// -------------------------------------------------------------------

// WiFiConfig

// string ssid = 1;
inline void WiFiConfig::clear_ssid() {
  ssid_.ClearToEmpty();
}
inline const std::string& WiFiConfig::ssid() const {
  // @@protoc_insertion_point(field_get:es_config.WiFiConfig.ssid)
  return _internal_ssid();
}
inline void WiFiConfig::set_ssid(const std::string& value) {
  _internal_set_ssid(value);
  // @@protoc_insertion_point(field_set:es_config.WiFiConfig.ssid)
}
inline std::string* WiFiConfig::mutable_ssid() {
  // @@protoc_insertion_point(field_mutable:es_config.WiFiConfig.ssid)
  return _internal_mutable_ssid();
}
inline const std::string& WiFiConfig::_internal_ssid() const {
  return ssid_.Get();
}
inline void WiFiConfig::_internal_set_ssid(const std::string& value) {
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WiFiConfig::set_ssid(std::string&& value) {
  
  ssid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.WiFiConfig.ssid)
}
inline void WiFiConfig::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.WiFiConfig.ssid)
}
inline void WiFiConfig::set_ssid(const char* value,
    size_t size) {
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.WiFiConfig.ssid)
}
inline std::string* WiFiConfig::_internal_mutable_ssid() {
  
  return ssid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WiFiConfig::release_ssid() {
  // @@protoc_insertion_point(field_release:es_config.WiFiConfig.ssid)
  return ssid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WiFiConfig::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.WiFiConfig.ssid)
}

// string password = 2;
inline void WiFiConfig::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& WiFiConfig::password() const {
  // @@protoc_insertion_point(field_get:es_config.WiFiConfig.password)
  return _internal_password();
}
inline void WiFiConfig::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:es_config.WiFiConfig.password)
}
inline std::string* WiFiConfig::mutable_password() {
  // @@protoc_insertion_point(field_mutable:es_config.WiFiConfig.password)
  return _internal_mutable_password();
}
inline const std::string& WiFiConfig::_internal_password() const {
  return password_.Get();
}
inline void WiFiConfig::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WiFiConfig::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.WiFiConfig.password)
}
inline void WiFiConfig::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.WiFiConfig.password)
}
inline void WiFiConfig::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.WiFiConfig.password)
}
inline std::string* WiFiConfig::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WiFiConfig::release_password() {
  // @@protoc_insertion_point(field_release:es_config.WiFiConfig.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WiFiConfig::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.WiFiConfig.password)
}

// .es_config.WiFiConfig.EncryptionType encryption = 3;
inline void WiFiConfig::clear_encryption() {
  encryption_ = 0;
}
inline ::es_config::WiFiConfig_EncryptionType WiFiConfig::_internal_encryption() const {
  return static_cast< ::es_config::WiFiConfig_EncryptionType >(encryption_);
}
inline ::es_config::WiFiConfig_EncryptionType WiFiConfig::encryption() const {
  // @@protoc_insertion_point(field_get:es_config.WiFiConfig.encryption)
  return _internal_encryption();
}
inline void WiFiConfig::_internal_set_encryption(::es_config::WiFiConfig_EncryptionType value) {
  
  encryption_ = value;
}
inline void WiFiConfig::set_encryption(::es_config::WiFiConfig_EncryptionType value) {
  _internal_set_encryption(value);
  // @@protoc_insertion_point(field_set:es_config.WiFiConfig.encryption)
}

// .es_config.WiFiConfig.ProtocolType protocol = 4;
inline void WiFiConfig::clear_protocol() {
  protocol_ = 0;
}
inline ::es_config::WiFiConfig_ProtocolType WiFiConfig::_internal_protocol() const {
  return static_cast< ::es_config::WiFiConfig_ProtocolType >(protocol_);
}
inline ::es_config::WiFiConfig_ProtocolType WiFiConfig::protocol() const {
  // @@protoc_insertion_point(field_get:es_config.WiFiConfig.protocol)
  return _internal_protocol();
}
inline void WiFiConfig::_internal_set_protocol(::es_config::WiFiConfig_ProtocolType value) {
  
  protocol_ = value;
}
inline void WiFiConfig::set_protocol(::es_config::WiFiConfig_ProtocolType value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:es_config.WiFiConfig.protocol)
}

// bool enable = 5;
inline void WiFiConfig::clear_enable() {
  enable_ = false;
}
inline bool WiFiConfig::_internal_enable() const {
  return enable_;
}
inline bool WiFiConfig::enable() const {
  // @@protoc_insertion_point(field_get:es_config.WiFiConfig.enable)
  return _internal_enable();
}
inline void WiFiConfig::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void WiFiConfig::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:es_config.WiFiConfig.enable)
}

// -------------------------------------------------------------------

// ApConfig

// string ssid = 1;
inline void ApConfig::clear_ssid() {
  ssid_.ClearToEmpty();
}
inline const std::string& ApConfig::ssid() const {
  // @@protoc_insertion_point(field_get:es_config.ApConfig.ssid)
  return _internal_ssid();
}
inline void ApConfig::set_ssid(const std::string& value) {
  _internal_set_ssid(value);
  // @@protoc_insertion_point(field_set:es_config.ApConfig.ssid)
}
inline std::string* ApConfig::mutable_ssid() {
  // @@protoc_insertion_point(field_mutable:es_config.ApConfig.ssid)
  return _internal_mutable_ssid();
}
inline const std::string& ApConfig::_internal_ssid() const {
  return ssid_.Get();
}
inline void ApConfig::_internal_set_ssid(const std::string& value) {
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ApConfig::set_ssid(std::string&& value) {
  
  ssid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.ApConfig.ssid)
}
inline void ApConfig::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.ApConfig.ssid)
}
inline void ApConfig::set_ssid(const char* value,
    size_t size) {
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.ApConfig.ssid)
}
inline std::string* ApConfig::_internal_mutable_ssid() {
  
  return ssid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ApConfig::release_ssid() {
  // @@protoc_insertion_point(field_release:es_config.ApConfig.ssid)
  return ssid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApConfig::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.ApConfig.ssid)
}

// string password = 2;
inline void ApConfig::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& ApConfig::password() const {
  // @@protoc_insertion_point(field_get:es_config.ApConfig.password)
  return _internal_password();
}
inline void ApConfig::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:es_config.ApConfig.password)
}
inline std::string* ApConfig::mutable_password() {
  // @@protoc_insertion_point(field_mutable:es_config.ApConfig.password)
  return _internal_mutable_password();
}
inline const std::string& ApConfig::_internal_password() const {
  return password_.Get();
}
inline void ApConfig::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ApConfig::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.ApConfig.password)
}
inline void ApConfig::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.ApConfig.password)
}
inline void ApConfig::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.ApConfig.password)
}
inline std::string* ApConfig::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ApConfig::release_password() {
  // @@protoc_insertion_point(field_release:es_config.ApConfig.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApConfig::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.ApConfig.password)
}

// .es_config.ApConfig.EncryptionType encryption = 3;
inline void ApConfig::clear_encryption() {
  encryption_ = 0;
}
inline ::es_config::ApConfig_EncryptionType ApConfig::_internal_encryption() const {
  return static_cast< ::es_config::ApConfig_EncryptionType >(encryption_);
}
inline ::es_config::ApConfig_EncryptionType ApConfig::encryption() const {
  // @@protoc_insertion_point(field_get:es_config.ApConfig.encryption)
  return _internal_encryption();
}
inline void ApConfig::_internal_set_encryption(::es_config::ApConfig_EncryptionType value) {
  
  encryption_ = value;
}
inline void ApConfig::set_encryption(::es_config::ApConfig_EncryptionType value) {
  _internal_set_encryption(value);
  // @@protoc_insertion_point(field_set:es_config.ApConfig.encryption)
}

// .es_config.ApConfig.ProtocolType protocol = 4;
inline void ApConfig::clear_protocol() {
  protocol_ = 0;
}
inline ::es_config::ApConfig_ProtocolType ApConfig::_internal_protocol() const {
  return static_cast< ::es_config::ApConfig_ProtocolType >(protocol_);
}
inline ::es_config::ApConfig_ProtocolType ApConfig::protocol() const {
  // @@protoc_insertion_point(field_get:es_config.ApConfig.protocol)
  return _internal_protocol();
}
inline void ApConfig::_internal_set_protocol(::es_config::ApConfig_ProtocolType value) {
  
  protocol_ = value;
}
inline void ApConfig::set_protocol(::es_config::ApConfig_ProtocolType value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:es_config.ApConfig.protocol)
}

// bool enable = 5;
inline void ApConfig::clear_enable() {
  enable_ = false;
}
inline bool ApConfig::_internal_enable() const {
  return enable_;
}
inline bool ApConfig::enable() const {
  // @@protoc_insertion_point(field_get:es_config.ApConfig.enable)
  return _internal_enable();
}
inline void ApConfig::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void ApConfig::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:es_config.ApConfig.enable)
}

// -------------------------------------------------------------------

// G4Config

// string model = 1;
inline void G4Config::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& G4Config::model() const {
  // @@protoc_insertion_point(field_get:es_config.G4Config.model)
  return _internal_model();
}
inline void G4Config::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:es_config.G4Config.model)
}
inline std::string* G4Config::mutable_model() {
  // @@protoc_insertion_point(field_mutable:es_config.G4Config.model)
  return _internal_mutable_model();
}
inline const std::string& G4Config::_internal_model() const {
  return model_.Get();
}
inline void G4Config::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void G4Config::set_model(std::string&& value) {
  
  model_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.G4Config.model)
}
inline void G4Config::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.G4Config.model)
}
inline void G4Config::set_model(const char* value,
    size_t size) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.G4Config.model)
}
inline std::string* G4Config::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* G4Config::release_model() {
  // @@protoc_insertion_point(field_release:es_config.G4Config.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void G4Config::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.G4Config.model)
}

// string config_path = 2;
inline void G4Config::clear_config_path() {
  config_path_.ClearToEmpty();
}
inline const std::string& G4Config::config_path() const {
  // @@protoc_insertion_point(field_get:es_config.G4Config.config_path)
  return _internal_config_path();
}
inline void G4Config::set_config_path(const std::string& value) {
  _internal_set_config_path(value);
  // @@protoc_insertion_point(field_set:es_config.G4Config.config_path)
}
inline std::string* G4Config::mutable_config_path() {
  // @@protoc_insertion_point(field_mutable:es_config.G4Config.config_path)
  return _internal_mutable_config_path();
}
inline const std::string& G4Config::_internal_config_path() const {
  return config_path_.Get();
}
inline void G4Config::_internal_set_config_path(const std::string& value) {
  
  config_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void G4Config::set_config_path(std::string&& value) {
  
  config_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.G4Config.config_path)
}
inline void G4Config::set_config_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.G4Config.config_path)
}
inline void G4Config::set_config_path(const char* value,
    size_t size) {
  
  config_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.G4Config.config_path)
}
inline std::string* G4Config::_internal_mutable_config_path() {
  
  return config_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* G4Config::release_config_path() {
  // @@protoc_insertion_point(field_release:es_config.G4Config.config_path)
  return config_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void G4Config::set_allocated_config_path(std::string* config_path) {
  if (config_path != nullptr) {
    
  } else {
    
  }
  config_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.G4Config.config_path)
}

// string reset_gpio = 3;
inline void G4Config::clear_reset_gpio() {
  reset_gpio_.ClearToEmpty();
}
inline const std::string& G4Config::reset_gpio() const {
  // @@protoc_insertion_point(field_get:es_config.G4Config.reset_gpio)
  return _internal_reset_gpio();
}
inline void G4Config::set_reset_gpio(const std::string& value) {
  _internal_set_reset_gpio(value);
  // @@protoc_insertion_point(field_set:es_config.G4Config.reset_gpio)
}
inline std::string* G4Config::mutable_reset_gpio() {
  // @@protoc_insertion_point(field_mutable:es_config.G4Config.reset_gpio)
  return _internal_mutable_reset_gpio();
}
inline const std::string& G4Config::_internal_reset_gpio() const {
  return reset_gpio_.Get();
}
inline void G4Config::_internal_set_reset_gpio(const std::string& value) {
  
  reset_gpio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void G4Config::set_reset_gpio(std::string&& value) {
  
  reset_gpio_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.G4Config.reset_gpio)
}
inline void G4Config::set_reset_gpio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reset_gpio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.G4Config.reset_gpio)
}
inline void G4Config::set_reset_gpio(const char* value,
    size_t size) {
  
  reset_gpio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.G4Config.reset_gpio)
}
inline std::string* G4Config::_internal_mutable_reset_gpio() {
  
  return reset_gpio_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* G4Config::release_reset_gpio() {
  // @@protoc_insertion_point(field_release:es_config.G4Config.reset_gpio)
  return reset_gpio_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void G4Config::set_allocated_reset_gpio(std::string* reset_gpio) {
  if (reset_gpio != nullptr) {
    
  } else {
    
  }
  reset_gpio_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reset_gpio,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.G4Config.reset_gpio)
}

// string at_port = 4;
inline void G4Config::clear_at_port() {
  at_port_.ClearToEmpty();
}
inline const std::string& G4Config::at_port() const {
  // @@protoc_insertion_point(field_get:es_config.G4Config.at_port)
  return _internal_at_port();
}
inline void G4Config::set_at_port(const std::string& value) {
  _internal_set_at_port(value);
  // @@protoc_insertion_point(field_set:es_config.G4Config.at_port)
}
inline std::string* G4Config::mutable_at_port() {
  // @@protoc_insertion_point(field_mutable:es_config.G4Config.at_port)
  return _internal_mutable_at_port();
}
inline const std::string& G4Config::_internal_at_port() const {
  return at_port_.Get();
}
inline void G4Config::_internal_set_at_port(const std::string& value) {
  
  at_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void G4Config::set_at_port(std::string&& value) {
  
  at_port_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.G4Config.at_port)
}
inline void G4Config::set_at_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  at_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.G4Config.at_port)
}
inline void G4Config::set_at_port(const char* value,
    size_t size) {
  
  at_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.G4Config.at_port)
}
inline std::string* G4Config::_internal_mutable_at_port() {
  
  return at_port_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* G4Config::release_at_port() {
  // @@protoc_insertion_point(field_release:es_config.G4Config.at_port)
  return at_port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void G4Config::set_allocated_at_port(std::string* at_port) {
  if (at_port != nullptr) {
    
  } else {
    
  }
  at_port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), at_port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.G4Config.at_port)
}

// bool enable = 5;
inline void G4Config::clear_enable() {
  enable_ = false;
}
inline bool G4Config::_internal_enable() const {
  return enable_;
}
inline bool G4Config::enable() const {
  // @@protoc_insertion_point(field_get:es_config.G4Config.enable)
  return _internal_enable();
}
inline void G4Config::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void G4Config::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:es_config.G4Config.enable)
}

// -------------------------------------------------------------------

// EthConfig

// bool enable = 1;
inline void EthConfig::clear_enable() {
  enable_ = false;
}
inline bool EthConfig::_internal_enable() const {
  return enable_;
}
inline bool EthConfig::enable() const {
  // @@protoc_insertion_point(field_get:es_config.EthConfig.enable)
  return _internal_enable();
}
inline void EthConfig::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void EthConfig::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:es_config.EthConfig.enable)
}

// string static_ip = 2;
inline void EthConfig::clear_static_ip() {
  static_ip_.ClearToEmpty();
}
inline const std::string& EthConfig::static_ip() const {
  // @@protoc_insertion_point(field_get:es_config.EthConfig.static_ip)
  return _internal_static_ip();
}
inline void EthConfig::set_static_ip(const std::string& value) {
  _internal_set_static_ip(value);
  // @@protoc_insertion_point(field_set:es_config.EthConfig.static_ip)
}
inline std::string* EthConfig::mutable_static_ip() {
  // @@protoc_insertion_point(field_mutable:es_config.EthConfig.static_ip)
  return _internal_mutable_static_ip();
}
inline const std::string& EthConfig::_internal_static_ip() const {
  return static_ip_.Get();
}
inline void EthConfig::_internal_set_static_ip(const std::string& value) {
  
  static_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EthConfig::set_static_ip(std::string&& value) {
  
  static_ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.EthConfig.static_ip)
}
inline void EthConfig::set_static_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  static_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.EthConfig.static_ip)
}
inline void EthConfig::set_static_ip(const char* value,
    size_t size) {
  
  static_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.EthConfig.static_ip)
}
inline std::string* EthConfig::_internal_mutable_static_ip() {
  
  return static_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EthConfig::release_static_ip() {
  // @@protoc_insertion_point(field_release:es_config.EthConfig.static_ip)
  return static_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EthConfig::set_allocated_static_ip(std::string* static_ip) {
  if (static_ip != nullptr) {
    
  } else {
    
  }
  static_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), static_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.EthConfig.static_ip)
}

// string static_gateway = 3;
inline void EthConfig::clear_static_gateway() {
  static_gateway_.ClearToEmpty();
}
inline const std::string& EthConfig::static_gateway() const {
  // @@protoc_insertion_point(field_get:es_config.EthConfig.static_gateway)
  return _internal_static_gateway();
}
inline void EthConfig::set_static_gateway(const std::string& value) {
  _internal_set_static_gateway(value);
  // @@protoc_insertion_point(field_set:es_config.EthConfig.static_gateway)
}
inline std::string* EthConfig::mutable_static_gateway() {
  // @@protoc_insertion_point(field_mutable:es_config.EthConfig.static_gateway)
  return _internal_mutable_static_gateway();
}
inline const std::string& EthConfig::_internal_static_gateway() const {
  return static_gateway_.Get();
}
inline void EthConfig::_internal_set_static_gateway(const std::string& value) {
  
  static_gateway_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EthConfig::set_static_gateway(std::string&& value) {
  
  static_gateway_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.EthConfig.static_gateway)
}
inline void EthConfig::set_static_gateway(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  static_gateway_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.EthConfig.static_gateway)
}
inline void EthConfig::set_static_gateway(const char* value,
    size_t size) {
  
  static_gateway_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.EthConfig.static_gateway)
}
inline std::string* EthConfig::_internal_mutable_static_gateway() {
  
  return static_gateway_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EthConfig::release_static_gateway() {
  // @@protoc_insertion_point(field_release:es_config.EthConfig.static_gateway)
  return static_gateway_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EthConfig::set_allocated_static_gateway(std::string* static_gateway) {
  if (static_gateway != nullptr) {
    
  } else {
    
  }
  static_gateway_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), static_gateway,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.EthConfig.static_gateway)
}

// string static_netmask = 4;
inline void EthConfig::clear_static_netmask() {
  static_netmask_.ClearToEmpty();
}
inline const std::string& EthConfig::static_netmask() const {
  // @@protoc_insertion_point(field_get:es_config.EthConfig.static_netmask)
  return _internal_static_netmask();
}
inline void EthConfig::set_static_netmask(const std::string& value) {
  _internal_set_static_netmask(value);
  // @@protoc_insertion_point(field_set:es_config.EthConfig.static_netmask)
}
inline std::string* EthConfig::mutable_static_netmask() {
  // @@protoc_insertion_point(field_mutable:es_config.EthConfig.static_netmask)
  return _internal_mutable_static_netmask();
}
inline const std::string& EthConfig::_internal_static_netmask() const {
  return static_netmask_.Get();
}
inline void EthConfig::_internal_set_static_netmask(const std::string& value) {
  
  static_netmask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EthConfig::set_static_netmask(std::string&& value) {
  
  static_netmask_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.EthConfig.static_netmask)
}
inline void EthConfig::set_static_netmask(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  static_netmask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.EthConfig.static_netmask)
}
inline void EthConfig::set_static_netmask(const char* value,
    size_t size) {
  
  static_netmask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.EthConfig.static_netmask)
}
inline std::string* EthConfig::_internal_mutable_static_netmask() {
  
  return static_netmask_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EthConfig::release_static_netmask() {
  // @@protoc_insertion_point(field_release:es_config.EthConfig.static_netmask)
  return static_netmask_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EthConfig::set_allocated_static_netmask(std::string* static_netmask) {
  if (static_netmask != nullptr) {
    
  } else {
    
  }
  static_netmask_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), static_netmask,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.EthConfig.static_netmask)
}

// repeated string static_dns = 5;
inline int EthConfig::_internal_static_dns_size() const {
  return static_dns_.size();
}
inline int EthConfig::static_dns_size() const {
  return _internal_static_dns_size();
}
inline void EthConfig::clear_static_dns() {
  static_dns_.Clear();
}
inline std::string* EthConfig::add_static_dns() {
  // @@protoc_insertion_point(field_add_mutable:es_config.EthConfig.static_dns)
  return _internal_add_static_dns();
}
inline const std::string& EthConfig::_internal_static_dns(int index) const {
  return static_dns_.Get(index);
}
inline const std::string& EthConfig::static_dns(int index) const {
  // @@protoc_insertion_point(field_get:es_config.EthConfig.static_dns)
  return _internal_static_dns(index);
}
inline std::string* EthConfig::mutable_static_dns(int index) {
  // @@protoc_insertion_point(field_mutable:es_config.EthConfig.static_dns)
  return static_dns_.Mutable(index);
}
inline void EthConfig::set_static_dns(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:es_config.EthConfig.static_dns)
  static_dns_.Mutable(index)->assign(value);
}
inline void EthConfig::set_static_dns(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:es_config.EthConfig.static_dns)
  static_dns_.Mutable(index)->assign(std::move(value));
}
inline void EthConfig::set_static_dns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  static_dns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:es_config.EthConfig.static_dns)
}
inline void EthConfig::set_static_dns(int index, const char* value, size_t size) {
  static_dns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:es_config.EthConfig.static_dns)
}
inline std::string* EthConfig::_internal_add_static_dns() {
  return static_dns_.Add();
}
inline void EthConfig::add_static_dns(const std::string& value) {
  static_dns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:es_config.EthConfig.static_dns)
}
inline void EthConfig::add_static_dns(std::string&& value) {
  static_dns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:es_config.EthConfig.static_dns)
}
inline void EthConfig::add_static_dns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  static_dns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:es_config.EthConfig.static_dns)
}
inline void EthConfig::add_static_dns(const char* value, size_t size) {
  static_dns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:es_config.EthConfig.static_dns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EthConfig::static_dns() const {
  // @@protoc_insertion_point(field_list:es_config.EthConfig.static_dns)
  return static_dns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EthConfig::mutable_static_dns() {
  // @@protoc_insertion_point(field_mutable_list:es_config.EthConfig.static_dns)
  return &static_dns_;
}

// bool dhcp = 6;
inline void EthConfig::clear_dhcp() {
  dhcp_ = false;
}
inline bool EthConfig::_internal_dhcp() const {
  return dhcp_;
}
inline bool EthConfig::dhcp() const {
  // @@protoc_insertion_point(field_get:es_config.EthConfig.dhcp)
  return _internal_dhcp();
}
inline void EthConfig::_internal_set_dhcp(bool value) {
  
  dhcp_ = value;
}
inline void EthConfig::set_dhcp(bool value) {
  _internal_set_dhcp(value);
  // @@protoc_insertion_point(field_set:es_config.EthConfig.dhcp)
}

// -------------------------------------------------------------------

// NtpConfig

// repeated string server_list = 1;
inline int NtpConfig::_internal_server_list_size() const {
  return server_list_.size();
}
inline int NtpConfig::server_list_size() const {
  return _internal_server_list_size();
}
inline void NtpConfig::clear_server_list() {
  server_list_.Clear();
}
inline std::string* NtpConfig::add_server_list() {
  // @@protoc_insertion_point(field_add_mutable:es_config.NtpConfig.server_list)
  return _internal_add_server_list();
}
inline const std::string& NtpConfig::_internal_server_list(int index) const {
  return server_list_.Get(index);
}
inline const std::string& NtpConfig::server_list(int index) const {
  // @@protoc_insertion_point(field_get:es_config.NtpConfig.server_list)
  return _internal_server_list(index);
}
inline std::string* NtpConfig::mutable_server_list(int index) {
  // @@protoc_insertion_point(field_mutable:es_config.NtpConfig.server_list)
  return server_list_.Mutable(index);
}
inline void NtpConfig::set_server_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:es_config.NtpConfig.server_list)
  server_list_.Mutable(index)->assign(value);
}
inline void NtpConfig::set_server_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:es_config.NtpConfig.server_list)
  server_list_.Mutable(index)->assign(std::move(value));
}
inline void NtpConfig::set_server_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  server_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:es_config.NtpConfig.server_list)
}
inline void NtpConfig::set_server_list(int index, const char* value, size_t size) {
  server_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:es_config.NtpConfig.server_list)
}
inline std::string* NtpConfig::_internal_add_server_list() {
  return server_list_.Add();
}
inline void NtpConfig::add_server_list(const std::string& value) {
  server_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:es_config.NtpConfig.server_list)
}
inline void NtpConfig::add_server_list(std::string&& value) {
  server_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:es_config.NtpConfig.server_list)
}
inline void NtpConfig::add_server_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  server_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:es_config.NtpConfig.server_list)
}
inline void NtpConfig::add_server_list(const char* value, size_t size) {
  server_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:es_config.NtpConfig.server_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NtpConfig::server_list() const {
  // @@protoc_insertion_point(field_list:es_config.NtpConfig.server_list)
  return server_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NtpConfig::mutable_server_list() {
  // @@protoc_insertion_point(field_mutable_list:es_config.NtpConfig.server_list)
  return &server_list_;
}

// uint32 interval = 2;
inline void NtpConfig::clear_interval() {
  interval_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NtpConfig::_internal_interval() const {
  return interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NtpConfig::interval() const {
  // @@protoc_insertion_point(field_get:es_config.NtpConfig.interval)
  return _internal_interval();
}
inline void NtpConfig::_internal_set_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  interval_ = value;
}
inline void NtpConfig::set_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:es_config.NtpConfig.interval)
}

// bool enable = 3;
inline void NtpConfig::clear_enable() {
  enable_ = false;
}
inline bool NtpConfig::_internal_enable() const {
  return enable_;
}
inline bool NtpConfig::enable() const {
  // @@protoc_insertion_point(field_get:es_config.NtpConfig.enable)
  return _internal_enable();
}
inline void NtpConfig::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void NtpConfig::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:es_config.NtpConfig.enable)
}

// -------------------------------------------------------------------

// GpioConfig_GpioPin

// uint32 number = 1;
inline void GpioConfig_GpioPin::clear_number() {
  number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpioConfig_GpioPin::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpioConfig_GpioPin::number() const {
  // @@protoc_insertion_point(field_get:es_config.GpioConfig.GpioPin.number)
  return _internal_number();
}
inline void GpioConfig_GpioPin::_internal_set_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_ = value;
}
inline void GpioConfig_GpioPin::set_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:es_config.GpioConfig.GpioPin.number)
}

// bool is_output = 2;
inline void GpioConfig_GpioPin::clear_is_output() {
  is_output_ = false;
}
inline bool GpioConfig_GpioPin::_internal_is_output() const {
  return is_output_;
}
inline bool GpioConfig_GpioPin::is_output() const {
  // @@protoc_insertion_point(field_get:es_config.GpioConfig.GpioPin.is_output)
  return _internal_is_output();
}
inline void GpioConfig_GpioPin::_internal_set_is_output(bool value) {
  
  is_output_ = value;
}
inline void GpioConfig_GpioPin::set_is_output(bool value) {
  _internal_set_is_output(value);
  // @@protoc_insertion_point(field_set:es_config.GpioConfig.GpioPin.is_output)
}

// bool is_on1off0 = 3;
inline void GpioConfig_GpioPin::clear_is_on1off0() {
  is_on1off0_ = false;
}
inline bool GpioConfig_GpioPin::_internal_is_on1off0() const {
  return is_on1off0_;
}
inline bool GpioConfig_GpioPin::is_on1off0() const {
  // @@protoc_insertion_point(field_get:es_config.GpioConfig.GpioPin.is_on1off0)
  return _internal_is_on1off0();
}
inline void GpioConfig_GpioPin::_internal_set_is_on1off0(bool value) {
  
  is_on1off0_ = value;
}
inline void GpioConfig_GpioPin::set_is_on1off0(bool value) {
  _internal_set_is_on1off0(value);
  // @@protoc_insertion_point(field_set:es_config.GpioConfig.GpioPin.is_on1off0)
}

// -------------------------------------------------------------------

// GpioConfig

// .es_config.GpioConfig.GpioPin g4_reset = 1;
inline bool GpioConfig::_internal_has_g4_reset() const {
  return this != internal_default_instance() && g4_reset_ != nullptr;
}
inline bool GpioConfig::has_g4_reset() const {
  return _internal_has_g4_reset();
}
inline void GpioConfig::clear_g4_reset() {
  if (GetArena() == nullptr && g4_reset_ != nullptr) {
    delete g4_reset_;
  }
  g4_reset_ = nullptr;
}
inline const ::es_config::GpioConfig_GpioPin& GpioConfig::_internal_g4_reset() const {
  const ::es_config::GpioConfig_GpioPin* p = g4_reset_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::GpioConfig_GpioPin&>(
      ::es_config::_GpioConfig_GpioPin_default_instance_);
}
inline const ::es_config::GpioConfig_GpioPin& GpioConfig::g4_reset() const {
  // @@protoc_insertion_point(field_get:es_config.GpioConfig.g4_reset)
  return _internal_g4_reset();
}
inline void GpioConfig::unsafe_arena_set_allocated_g4_reset(
    ::es_config::GpioConfig_GpioPin* g4_reset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g4_reset_);
  }
  g4_reset_ = g4_reset;
  if (g4_reset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.GpioConfig.g4_reset)
}
inline ::es_config::GpioConfig_GpioPin* GpioConfig::release_g4_reset() {
  
  ::es_config::GpioConfig_GpioPin* temp = g4_reset_;
  g4_reset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::GpioConfig_GpioPin* GpioConfig::unsafe_arena_release_g4_reset() {
  // @@protoc_insertion_point(field_release:es_config.GpioConfig.g4_reset)
  
  ::es_config::GpioConfig_GpioPin* temp = g4_reset_;
  g4_reset_ = nullptr;
  return temp;
}
inline ::es_config::GpioConfig_GpioPin* GpioConfig::_internal_mutable_g4_reset() {
  
  if (g4_reset_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::GpioConfig_GpioPin>(GetArena());
    g4_reset_ = p;
  }
  return g4_reset_;
}
inline ::es_config::GpioConfig_GpioPin* GpioConfig::mutable_g4_reset() {
  // @@protoc_insertion_point(field_mutable:es_config.GpioConfig.g4_reset)
  return _internal_mutable_g4_reset();
}
inline void GpioConfig::set_allocated_g4_reset(::es_config::GpioConfig_GpioPin* g4_reset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete g4_reset_;
  }
  if (g4_reset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(g4_reset);
    if (message_arena != submessage_arena) {
      g4_reset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g4_reset, submessage_arena);
    }
    
  } else {
    
  }
  g4_reset_ = g4_reset;
  // @@protoc_insertion_point(field_set_allocated:es_config.GpioConfig.g4_reset)
}

// .es_config.GpioConfig.GpioPin sys_reset = 2;
inline bool GpioConfig::_internal_has_sys_reset() const {
  return this != internal_default_instance() && sys_reset_ != nullptr;
}
inline bool GpioConfig::has_sys_reset() const {
  return _internal_has_sys_reset();
}
inline void GpioConfig::clear_sys_reset() {
  if (GetArena() == nullptr && sys_reset_ != nullptr) {
    delete sys_reset_;
  }
  sys_reset_ = nullptr;
}
inline const ::es_config::GpioConfig_GpioPin& GpioConfig::_internal_sys_reset() const {
  const ::es_config::GpioConfig_GpioPin* p = sys_reset_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::GpioConfig_GpioPin&>(
      ::es_config::_GpioConfig_GpioPin_default_instance_);
}
inline const ::es_config::GpioConfig_GpioPin& GpioConfig::sys_reset() const {
  // @@protoc_insertion_point(field_get:es_config.GpioConfig.sys_reset)
  return _internal_sys_reset();
}
inline void GpioConfig::unsafe_arena_set_allocated_sys_reset(
    ::es_config::GpioConfig_GpioPin* sys_reset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sys_reset_);
  }
  sys_reset_ = sys_reset;
  if (sys_reset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.GpioConfig.sys_reset)
}
inline ::es_config::GpioConfig_GpioPin* GpioConfig::release_sys_reset() {
  
  ::es_config::GpioConfig_GpioPin* temp = sys_reset_;
  sys_reset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::GpioConfig_GpioPin* GpioConfig::unsafe_arena_release_sys_reset() {
  // @@protoc_insertion_point(field_release:es_config.GpioConfig.sys_reset)
  
  ::es_config::GpioConfig_GpioPin* temp = sys_reset_;
  sys_reset_ = nullptr;
  return temp;
}
inline ::es_config::GpioConfig_GpioPin* GpioConfig::_internal_mutable_sys_reset() {
  
  if (sys_reset_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::GpioConfig_GpioPin>(GetArena());
    sys_reset_ = p;
  }
  return sys_reset_;
}
inline ::es_config::GpioConfig_GpioPin* GpioConfig::mutable_sys_reset() {
  // @@protoc_insertion_point(field_mutable:es_config.GpioConfig.sys_reset)
  return _internal_mutable_sys_reset();
}
inline void GpioConfig::set_allocated_sys_reset(::es_config::GpioConfig_GpioPin* sys_reset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sys_reset_;
  }
  if (sys_reset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sys_reset);
    if (message_arena != submessage_arena) {
      sys_reset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sys_reset, submessage_arena);
    }
    
  } else {
    
  }
  sys_reset_ = sys_reset;
  // @@protoc_insertion_point(field_set_allocated:es_config.GpioConfig.sys_reset)
}

// .es_config.GpioConfig.GpioPin ems_rw_485 = 3;
inline bool GpioConfig::_internal_has_ems_rw_485() const {
  return this != internal_default_instance() && ems_rw_485_ != nullptr;
}
inline bool GpioConfig::has_ems_rw_485() const {
  return _internal_has_ems_rw_485();
}
inline void GpioConfig::clear_ems_rw_485() {
  if (GetArena() == nullptr && ems_rw_485_ != nullptr) {
    delete ems_rw_485_;
  }
  ems_rw_485_ = nullptr;
}
inline const ::es_config::GpioConfig_GpioPin& GpioConfig::_internal_ems_rw_485() const {
  const ::es_config::GpioConfig_GpioPin* p = ems_rw_485_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::GpioConfig_GpioPin&>(
      ::es_config::_GpioConfig_GpioPin_default_instance_);
}
inline const ::es_config::GpioConfig_GpioPin& GpioConfig::ems_rw_485() const {
  // @@protoc_insertion_point(field_get:es_config.GpioConfig.ems_rw_485)
  return _internal_ems_rw_485();
}
inline void GpioConfig::unsafe_arena_set_allocated_ems_rw_485(
    ::es_config::GpioConfig_GpioPin* ems_rw_485) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ems_rw_485_);
  }
  ems_rw_485_ = ems_rw_485;
  if (ems_rw_485) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.GpioConfig.ems_rw_485)
}
inline ::es_config::GpioConfig_GpioPin* GpioConfig::release_ems_rw_485() {
  
  ::es_config::GpioConfig_GpioPin* temp = ems_rw_485_;
  ems_rw_485_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::GpioConfig_GpioPin* GpioConfig::unsafe_arena_release_ems_rw_485() {
  // @@protoc_insertion_point(field_release:es_config.GpioConfig.ems_rw_485)
  
  ::es_config::GpioConfig_GpioPin* temp = ems_rw_485_;
  ems_rw_485_ = nullptr;
  return temp;
}
inline ::es_config::GpioConfig_GpioPin* GpioConfig::_internal_mutable_ems_rw_485() {
  
  if (ems_rw_485_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::GpioConfig_GpioPin>(GetArena());
    ems_rw_485_ = p;
  }
  return ems_rw_485_;
}
inline ::es_config::GpioConfig_GpioPin* GpioConfig::mutable_ems_rw_485() {
  // @@protoc_insertion_point(field_mutable:es_config.GpioConfig.ems_rw_485)
  return _internal_mutable_ems_rw_485();
}
inline void GpioConfig::set_allocated_ems_rw_485(::es_config::GpioConfig_GpioPin* ems_rw_485) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ems_rw_485_;
  }
  if (ems_rw_485) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ems_rw_485);
    if (message_arena != submessage_arena) {
      ems_rw_485 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ems_rw_485, submessage_arena);
    }
    
  } else {
    
  }
  ems_rw_485_ = ems_rw_485;
  // @@protoc_insertion_point(field_set_allocated:es_config.GpioConfig.ems_rw_485)
}

// -------------------------------------------------------------------

// OcppConfig

// string url = 1;
inline void OcppConfig::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& OcppConfig::url() const {
  // @@protoc_insertion_point(field_get:es_config.OcppConfig.url)
  return _internal_url();
}
inline void OcppConfig::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:es_config.OcppConfig.url)
}
inline std::string* OcppConfig::mutable_url() {
  // @@protoc_insertion_point(field_mutable:es_config.OcppConfig.url)
  return _internal_mutable_url();
}
inline const std::string& OcppConfig::_internal_url() const {
  return url_.Get();
}
inline void OcppConfig::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OcppConfig::set_url(std::string&& value) {
  
  url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.OcppConfig.url)
}
inline void OcppConfig::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.OcppConfig.url)
}
inline void OcppConfig::set_url(const char* value,
    size_t size) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.OcppConfig.url)
}
inline std::string* OcppConfig::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OcppConfig::release_url() {
  // @@protoc_insertion_point(field_release:es_config.OcppConfig.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OcppConfig::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.OcppConfig.url)
}

// string host = 2;
inline void OcppConfig::clear_host() {
  host_.ClearToEmpty();
}
inline const std::string& OcppConfig::host() const {
  // @@protoc_insertion_point(field_get:es_config.OcppConfig.host)
  return _internal_host();
}
inline void OcppConfig::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:es_config.OcppConfig.host)
}
inline std::string* OcppConfig::mutable_host() {
  // @@protoc_insertion_point(field_mutable:es_config.OcppConfig.host)
  return _internal_mutable_host();
}
inline const std::string& OcppConfig::_internal_host() const {
  return host_.Get();
}
inline void OcppConfig::_internal_set_host(const std::string& value) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OcppConfig::set_host(std::string&& value) {
  
  host_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.OcppConfig.host)
}
inline void OcppConfig::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.OcppConfig.host)
}
inline void OcppConfig::set_host(const char* value,
    size_t size) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.OcppConfig.host)
}
inline std::string* OcppConfig::_internal_mutable_host() {
  
  return host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OcppConfig::release_host() {
  // @@protoc_insertion_point(field_release:es_config.OcppConfig.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OcppConfig::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.OcppConfig.host)
}

// uint32 port = 3;
inline void OcppConfig::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OcppConfig::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OcppConfig::port() const {
  // @@protoc_insertion_point(field_get:es_config.OcppConfig.port)
  return _internal_port();
}
inline void OcppConfig::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void OcppConfig::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:es_config.OcppConfig.port)
}

// string path = 4;
inline void OcppConfig::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& OcppConfig::path() const {
  // @@protoc_insertion_point(field_get:es_config.OcppConfig.path)
  return _internal_path();
}
inline void OcppConfig::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:es_config.OcppConfig.path)
}
inline std::string* OcppConfig::mutable_path() {
  // @@protoc_insertion_point(field_mutable:es_config.OcppConfig.path)
  return _internal_mutable_path();
}
inline const std::string& OcppConfig::_internal_path() const {
  return path_.Get();
}
inline void OcppConfig::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OcppConfig::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.OcppConfig.path)
}
inline void OcppConfig::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.OcppConfig.path)
}
inline void OcppConfig::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.OcppConfig.path)
}
inline std::string* OcppConfig::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OcppConfig::release_path() {
  // @@protoc_insertion_point(field_release:es_config.OcppConfig.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OcppConfig::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.OcppConfig.path)
}

// uint32 profile = 5;
inline void OcppConfig::clear_profile() {
  profile_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OcppConfig::_internal_profile() const {
  return profile_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OcppConfig::profile() const {
  // @@protoc_insertion_point(field_get:es_config.OcppConfig.profile)
  return _internal_profile();
}
inline void OcppConfig::_internal_set_profile(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  profile_ = value;
}
inline void OcppConfig::set_profile(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_profile(value);
  // @@protoc_insertion_point(field_set:es_config.OcppConfig.profile)
}

// string cert_path = 6;
inline void OcppConfig::clear_cert_path() {
  cert_path_.ClearToEmpty();
}
inline const std::string& OcppConfig::cert_path() const {
  // @@protoc_insertion_point(field_get:es_config.OcppConfig.cert_path)
  return _internal_cert_path();
}
inline void OcppConfig::set_cert_path(const std::string& value) {
  _internal_set_cert_path(value);
  // @@protoc_insertion_point(field_set:es_config.OcppConfig.cert_path)
}
inline std::string* OcppConfig::mutable_cert_path() {
  // @@protoc_insertion_point(field_mutable:es_config.OcppConfig.cert_path)
  return _internal_mutable_cert_path();
}
inline const std::string& OcppConfig::_internal_cert_path() const {
  return cert_path_.Get();
}
inline void OcppConfig::_internal_set_cert_path(const std::string& value) {
  
  cert_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OcppConfig::set_cert_path(std::string&& value) {
  
  cert_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.OcppConfig.cert_path)
}
inline void OcppConfig::set_cert_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cert_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.OcppConfig.cert_path)
}
inline void OcppConfig::set_cert_path(const char* value,
    size_t size) {
  
  cert_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.OcppConfig.cert_path)
}
inline std::string* OcppConfig::_internal_mutable_cert_path() {
  
  return cert_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OcppConfig::release_cert_path() {
  // @@protoc_insertion_point(field_release:es_config.OcppConfig.cert_path)
  return cert_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OcppConfig::set_allocated_cert_path(std::string* cert_path) {
  if (cert_path != nullptr) {
    
  } else {
    
  }
  cert_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cert_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.OcppConfig.cert_path)
}

// bool enable = 7;
inline void OcppConfig::clear_enable() {
  enable_ = false;
}
inline bool OcppConfig::_internal_enable() const {
  return enable_;
}
inline bool OcppConfig::enable() const {
  // @@protoc_insertion_point(field_get:es_config.OcppConfig.enable)
  return _internal_enable();
}
inline void OcppConfig::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void OcppConfig::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:es_config.OcppConfig.enable)
}

// -------------------------------------------------------------------

// OtaConfig

// string download_path = 1;
inline void OtaConfig::clear_download_path() {
  download_path_.ClearToEmpty();
}
inline const std::string& OtaConfig::download_path() const {
  // @@protoc_insertion_point(field_get:es_config.OtaConfig.download_path)
  return _internal_download_path();
}
inline void OtaConfig::set_download_path(const std::string& value) {
  _internal_set_download_path(value);
  // @@protoc_insertion_point(field_set:es_config.OtaConfig.download_path)
}
inline std::string* OtaConfig::mutable_download_path() {
  // @@protoc_insertion_point(field_mutable:es_config.OtaConfig.download_path)
  return _internal_mutable_download_path();
}
inline const std::string& OtaConfig::_internal_download_path() const {
  return download_path_.Get();
}
inline void OtaConfig::_internal_set_download_path(const std::string& value) {
  
  download_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OtaConfig::set_download_path(std::string&& value) {
  
  download_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.OtaConfig.download_path)
}
inline void OtaConfig::set_download_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  download_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.OtaConfig.download_path)
}
inline void OtaConfig::set_download_path(const char* value,
    size_t size) {
  
  download_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.OtaConfig.download_path)
}
inline std::string* OtaConfig::_internal_mutable_download_path() {
  
  return download_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OtaConfig::release_download_path() {
  // @@protoc_insertion_point(field_release:es_config.OtaConfig.download_path)
  return download_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OtaConfig::set_allocated_download_path(std::string* download_path) {
  if (download_path != nullptr) {
    
  } else {
    
  }
  download_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), download_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.OtaConfig.download_path)
}

// string cert_path = 2;
inline void OtaConfig::clear_cert_path() {
  cert_path_.ClearToEmpty();
}
inline const std::string& OtaConfig::cert_path() const {
  // @@protoc_insertion_point(field_get:es_config.OtaConfig.cert_path)
  return _internal_cert_path();
}
inline void OtaConfig::set_cert_path(const std::string& value) {
  _internal_set_cert_path(value);
  // @@protoc_insertion_point(field_set:es_config.OtaConfig.cert_path)
}
inline std::string* OtaConfig::mutable_cert_path() {
  // @@protoc_insertion_point(field_mutable:es_config.OtaConfig.cert_path)
  return _internal_mutable_cert_path();
}
inline const std::string& OtaConfig::_internal_cert_path() const {
  return cert_path_.Get();
}
inline void OtaConfig::_internal_set_cert_path(const std::string& value) {
  
  cert_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OtaConfig::set_cert_path(std::string&& value) {
  
  cert_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.OtaConfig.cert_path)
}
inline void OtaConfig::set_cert_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cert_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.OtaConfig.cert_path)
}
inline void OtaConfig::set_cert_path(const char* value,
    size_t size) {
  
  cert_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.OtaConfig.cert_path)
}
inline std::string* OtaConfig::_internal_mutable_cert_path() {
  
  return cert_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OtaConfig::release_cert_path() {
  // @@protoc_insertion_point(field_release:es_config.OtaConfig.cert_path)
  return cert_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OtaConfig::set_allocated_cert_path(std::string* cert_path) {
  if (cert_path != nullptr) {
    
  } else {
    
  }
  cert_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cert_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.OtaConfig.cert_path)
}

// bool enable = 3;
inline void OtaConfig::clear_enable() {
  enable_ = false;
}
inline bool OtaConfig::_internal_enable() const {
  return enable_;
}
inline bool OtaConfig::enable() const {
  // @@protoc_insertion_point(field_get:es_config.OtaConfig.enable)
  return _internal_enable();
}
inline void OtaConfig::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void OtaConfig::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:es_config.OtaConfig.enable)
}

// -------------------------------------------------------------------

// UartConfig_UartSetting

// string path = 1;
inline void UartConfig_UartSetting::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& UartConfig_UartSetting::path() const {
  // @@protoc_insertion_point(field_get:es_config.UartConfig.UartSetting.path)
  return _internal_path();
}
inline void UartConfig_UartSetting::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:es_config.UartConfig.UartSetting.path)
}
inline std::string* UartConfig_UartSetting::mutable_path() {
  // @@protoc_insertion_point(field_mutable:es_config.UartConfig.UartSetting.path)
  return _internal_mutable_path();
}
inline const std::string& UartConfig_UartSetting::_internal_path() const {
  return path_.Get();
}
inline void UartConfig_UartSetting::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UartConfig_UartSetting::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.UartConfig.UartSetting.path)
}
inline void UartConfig_UartSetting::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.UartConfig.UartSetting.path)
}
inline void UartConfig_UartSetting::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.UartConfig.UartSetting.path)
}
inline std::string* UartConfig_UartSetting::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UartConfig_UartSetting::release_path() {
  // @@protoc_insertion_point(field_release:es_config.UartConfig.UartSetting.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UartConfig_UartSetting::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.UartConfig.UartSetting.path)
}

// .es_config.UartConfig.BaudRate baudrate = 2;
inline void UartConfig_UartSetting::clear_baudrate() {
  baudrate_ = 0;
}
inline ::es_config::UartConfig_BaudRate UartConfig_UartSetting::_internal_baudrate() const {
  return static_cast< ::es_config::UartConfig_BaudRate >(baudrate_);
}
inline ::es_config::UartConfig_BaudRate UartConfig_UartSetting::baudrate() const {
  // @@protoc_insertion_point(field_get:es_config.UartConfig.UartSetting.baudrate)
  return _internal_baudrate();
}
inline void UartConfig_UartSetting::_internal_set_baudrate(::es_config::UartConfig_BaudRate value) {
  
  baudrate_ = value;
}
inline void UartConfig_UartSetting::set_baudrate(::es_config::UartConfig_BaudRate value) {
  _internal_set_baudrate(value);
  // @@protoc_insertion_point(field_set:es_config.UartConfig.UartSetting.baudrate)
}

// uint32 bsize = 3;
inline void UartConfig_UartSetting::clear_bsize() {
  bsize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UartConfig_UartSetting::_internal_bsize() const {
  return bsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UartConfig_UartSetting::bsize() const {
  // @@protoc_insertion_point(field_get:es_config.UartConfig.UartSetting.bsize)
  return _internal_bsize();
}
inline void UartConfig_UartSetting::_internal_set_bsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bsize_ = value;
}
inline void UartConfig_UartSetting::set_bsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bsize(value);
  // @@protoc_insertion_point(field_set:es_config.UartConfig.UartSetting.bsize)
}

// .es_config.UartConfig.Parity parity = 4;
inline void UartConfig_UartSetting::clear_parity() {
  parity_ = 0;
}
inline ::es_config::UartConfig_Parity UartConfig_UartSetting::_internal_parity() const {
  return static_cast< ::es_config::UartConfig_Parity >(parity_);
}
inline ::es_config::UartConfig_Parity UartConfig_UartSetting::parity() const {
  // @@protoc_insertion_point(field_get:es_config.UartConfig.UartSetting.parity)
  return _internal_parity();
}
inline void UartConfig_UartSetting::_internal_set_parity(::es_config::UartConfig_Parity value) {
  
  parity_ = value;
}
inline void UartConfig_UartSetting::set_parity(::es_config::UartConfig_Parity value) {
  _internal_set_parity(value);
  // @@protoc_insertion_point(field_set:es_config.UartConfig.UartSetting.parity)
}

// .es_config.UartConfig.StopBits stopbit = 5;
inline void UartConfig_UartSetting::clear_stopbit() {
  stopbit_ = 0;
}
inline ::es_config::UartConfig_StopBits UartConfig_UartSetting::_internal_stopbit() const {
  return static_cast< ::es_config::UartConfig_StopBits >(stopbit_);
}
inline ::es_config::UartConfig_StopBits UartConfig_UartSetting::stopbit() const {
  // @@protoc_insertion_point(field_get:es_config.UartConfig.UartSetting.stopbit)
  return _internal_stopbit();
}
inline void UartConfig_UartSetting::_internal_set_stopbit(::es_config::UartConfig_StopBits value) {
  
  stopbit_ = value;
}
inline void UartConfig_UartSetting::set_stopbit(::es_config::UartConfig_StopBits value) {
  _internal_set_stopbit(value);
  // @@protoc_insertion_point(field_set:es_config.UartConfig.UartSetting.stopbit)
}

// bool is_485 = 6;
inline void UartConfig_UartSetting::clear_is_485() {
  is_485_ = false;
}
inline bool UartConfig_UartSetting::_internal_is_485() const {
  return is_485_;
}
inline bool UartConfig_UartSetting::is_485() const {
  // @@protoc_insertion_point(field_get:es_config.UartConfig.UartSetting.is_485)
  return _internal_is_485();
}
inline void UartConfig_UartSetting::_internal_set_is_485(bool value) {
  
  is_485_ = value;
}
inline void UartConfig_UartSetting::set_is_485(bool value) {
  _internal_set_is_485(value);
  // @@protoc_insertion_point(field_set:es_config.UartConfig.UartSetting.is_485)
}

// string rw_485 = 7;
inline void UartConfig_UartSetting::clear_rw_485() {
  rw_485_.ClearToEmpty();
}
inline const std::string& UartConfig_UartSetting::rw_485() const {
  // @@protoc_insertion_point(field_get:es_config.UartConfig.UartSetting.rw_485)
  return _internal_rw_485();
}
inline void UartConfig_UartSetting::set_rw_485(const std::string& value) {
  _internal_set_rw_485(value);
  // @@protoc_insertion_point(field_set:es_config.UartConfig.UartSetting.rw_485)
}
inline std::string* UartConfig_UartSetting::mutable_rw_485() {
  // @@protoc_insertion_point(field_mutable:es_config.UartConfig.UartSetting.rw_485)
  return _internal_mutable_rw_485();
}
inline const std::string& UartConfig_UartSetting::_internal_rw_485() const {
  return rw_485_.Get();
}
inline void UartConfig_UartSetting::_internal_set_rw_485(const std::string& value) {
  
  rw_485_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UartConfig_UartSetting::set_rw_485(std::string&& value) {
  
  rw_485_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.UartConfig.UartSetting.rw_485)
}
inline void UartConfig_UartSetting::set_rw_485(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rw_485_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.UartConfig.UartSetting.rw_485)
}
inline void UartConfig_UartSetting::set_rw_485(const char* value,
    size_t size) {
  
  rw_485_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.UartConfig.UartSetting.rw_485)
}
inline std::string* UartConfig_UartSetting::_internal_mutable_rw_485() {
  
  return rw_485_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UartConfig_UartSetting::release_rw_485() {
  // @@protoc_insertion_point(field_release:es_config.UartConfig.UartSetting.rw_485)
  return rw_485_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UartConfig_UartSetting::set_allocated_rw_485(std::string* rw_485) {
  if (rw_485 != nullptr) {
    
  } else {
    
  }
  rw_485_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rw_485,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.UartConfig.UartSetting.rw_485)
}

// -------------------------------------------------------------------

// UartConfig

// .es_config.UartConfig.UartSetting ccu_control = 1;
inline bool UartConfig::_internal_has_ccu_control() const {
  return this != internal_default_instance() && ccu_control_ != nullptr;
}
inline bool UartConfig::has_ccu_control() const {
  return _internal_has_ccu_control();
}
inline void UartConfig::clear_ccu_control() {
  if (GetArena() == nullptr && ccu_control_ != nullptr) {
    delete ccu_control_;
  }
  ccu_control_ = nullptr;
}
inline const ::es_config::UartConfig_UartSetting& UartConfig::_internal_ccu_control() const {
  const ::es_config::UartConfig_UartSetting* p = ccu_control_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::UartConfig_UartSetting&>(
      ::es_config::_UartConfig_UartSetting_default_instance_);
}
inline const ::es_config::UartConfig_UartSetting& UartConfig::ccu_control() const {
  // @@protoc_insertion_point(field_get:es_config.UartConfig.ccu_control)
  return _internal_ccu_control();
}
inline void UartConfig::unsafe_arena_set_allocated_ccu_control(
    ::es_config::UartConfig_UartSetting* ccu_control) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ccu_control_);
  }
  ccu_control_ = ccu_control;
  if (ccu_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.UartConfig.ccu_control)
}
inline ::es_config::UartConfig_UartSetting* UartConfig::release_ccu_control() {
  
  ::es_config::UartConfig_UartSetting* temp = ccu_control_;
  ccu_control_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::UartConfig_UartSetting* UartConfig::unsafe_arena_release_ccu_control() {
  // @@protoc_insertion_point(field_release:es_config.UartConfig.ccu_control)
  
  ::es_config::UartConfig_UartSetting* temp = ccu_control_;
  ccu_control_ = nullptr;
  return temp;
}
inline ::es_config::UartConfig_UartSetting* UartConfig::_internal_mutable_ccu_control() {
  
  if (ccu_control_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::UartConfig_UartSetting>(GetArena());
    ccu_control_ = p;
  }
  return ccu_control_;
}
inline ::es_config::UartConfig_UartSetting* UartConfig::mutable_ccu_control() {
  // @@protoc_insertion_point(field_mutable:es_config.UartConfig.ccu_control)
  return _internal_mutable_ccu_control();
}
inline void UartConfig::set_allocated_ccu_control(::es_config::UartConfig_UartSetting* ccu_control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ccu_control_;
  }
  if (ccu_control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ccu_control);
    if (message_arena != submessage_arena) {
      ccu_control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ccu_control, submessage_arena);
    }
    
  } else {
    
  }
  ccu_control_ = ccu_control;
  // @@protoc_insertion_point(field_set_allocated:es_config.UartConfig.ccu_control)
}

// .es_config.UartConfig.UartSetting ccu_debug = 2;
inline bool UartConfig::_internal_has_ccu_debug() const {
  return this != internal_default_instance() && ccu_debug_ != nullptr;
}
inline bool UartConfig::has_ccu_debug() const {
  return _internal_has_ccu_debug();
}
inline void UartConfig::clear_ccu_debug() {
  if (GetArena() == nullptr && ccu_debug_ != nullptr) {
    delete ccu_debug_;
  }
  ccu_debug_ = nullptr;
}
inline const ::es_config::UartConfig_UartSetting& UartConfig::_internal_ccu_debug() const {
  const ::es_config::UartConfig_UartSetting* p = ccu_debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::UartConfig_UartSetting&>(
      ::es_config::_UartConfig_UartSetting_default_instance_);
}
inline const ::es_config::UartConfig_UartSetting& UartConfig::ccu_debug() const {
  // @@protoc_insertion_point(field_get:es_config.UartConfig.ccu_debug)
  return _internal_ccu_debug();
}
inline void UartConfig::unsafe_arena_set_allocated_ccu_debug(
    ::es_config::UartConfig_UartSetting* ccu_debug) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ccu_debug_);
  }
  ccu_debug_ = ccu_debug;
  if (ccu_debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.UartConfig.ccu_debug)
}
inline ::es_config::UartConfig_UartSetting* UartConfig::release_ccu_debug() {
  
  ::es_config::UartConfig_UartSetting* temp = ccu_debug_;
  ccu_debug_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::UartConfig_UartSetting* UartConfig::unsafe_arena_release_ccu_debug() {
  // @@protoc_insertion_point(field_release:es_config.UartConfig.ccu_debug)
  
  ::es_config::UartConfig_UartSetting* temp = ccu_debug_;
  ccu_debug_ = nullptr;
  return temp;
}
inline ::es_config::UartConfig_UartSetting* UartConfig::_internal_mutable_ccu_debug() {
  
  if (ccu_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::UartConfig_UartSetting>(GetArena());
    ccu_debug_ = p;
  }
  return ccu_debug_;
}
inline ::es_config::UartConfig_UartSetting* UartConfig::mutable_ccu_debug() {
  // @@protoc_insertion_point(field_mutable:es_config.UartConfig.ccu_debug)
  return _internal_mutable_ccu_debug();
}
inline void UartConfig::set_allocated_ccu_debug(::es_config::UartConfig_UartSetting* ccu_debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ccu_debug_;
  }
  if (ccu_debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ccu_debug);
    if (message_arena != submessage_arena) {
      ccu_debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ccu_debug, submessage_arena);
    }
    
  } else {
    
  }
  ccu_debug_ = ccu_debug;
  // @@protoc_insertion_point(field_set_allocated:es_config.UartConfig.ccu_debug)
}

// .es_config.UartConfig.UartSetting rfid_control = 3;
inline bool UartConfig::_internal_has_rfid_control() const {
  return this != internal_default_instance() && rfid_control_ != nullptr;
}
inline bool UartConfig::has_rfid_control() const {
  return _internal_has_rfid_control();
}
inline void UartConfig::clear_rfid_control() {
  if (GetArena() == nullptr && rfid_control_ != nullptr) {
    delete rfid_control_;
  }
  rfid_control_ = nullptr;
}
inline const ::es_config::UartConfig_UartSetting& UartConfig::_internal_rfid_control() const {
  const ::es_config::UartConfig_UartSetting* p = rfid_control_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::UartConfig_UartSetting&>(
      ::es_config::_UartConfig_UartSetting_default_instance_);
}
inline const ::es_config::UartConfig_UartSetting& UartConfig::rfid_control() const {
  // @@protoc_insertion_point(field_get:es_config.UartConfig.rfid_control)
  return _internal_rfid_control();
}
inline void UartConfig::unsafe_arena_set_allocated_rfid_control(
    ::es_config::UartConfig_UartSetting* rfid_control) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rfid_control_);
  }
  rfid_control_ = rfid_control;
  if (rfid_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.UartConfig.rfid_control)
}
inline ::es_config::UartConfig_UartSetting* UartConfig::release_rfid_control() {
  
  ::es_config::UartConfig_UartSetting* temp = rfid_control_;
  rfid_control_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::UartConfig_UartSetting* UartConfig::unsafe_arena_release_rfid_control() {
  // @@protoc_insertion_point(field_release:es_config.UartConfig.rfid_control)
  
  ::es_config::UartConfig_UartSetting* temp = rfid_control_;
  rfid_control_ = nullptr;
  return temp;
}
inline ::es_config::UartConfig_UartSetting* UartConfig::_internal_mutable_rfid_control() {
  
  if (rfid_control_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::UartConfig_UartSetting>(GetArena());
    rfid_control_ = p;
  }
  return rfid_control_;
}
inline ::es_config::UartConfig_UartSetting* UartConfig::mutable_rfid_control() {
  // @@protoc_insertion_point(field_mutable:es_config.UartConfig.rfid_control)
  return _internal_mutable_rfid_control();
}
inline void UartConfig::set_allocated_rfid_control(::es_config::UartConfig_UartSetting* rfid_control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rfid_control_;
  }
  if (rfid_control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rfid_control);
    if (message_arena != submessage_arena) {
      rfid_control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rfid_control, submessage_arena);
    }
    
  } else {
    
  }
  rfid_control_ = rfid_control;
  // @@protoc_insertion_point(field_set_allocated:es_config.UartConfig.rfid_control)
}

// .es_config.UartConfig.UartSetting pos_control = 4;
inline bool UartConfig::_internal_has_pos_control() const {
  return this != internal_default_instance() && pos_control_ != nullptr;
}
inline bool UartConfig::has_pos_control() const {
  return _internal_has_pos_control();
}
inline void UartConfig::clear_pos_control() {
  if (GetArena() == nullptr && pos_control_ != nullptr) {
    delete pos_control_;
  }
  pos_control_ = nullptr;
}
inline const ::es_config::UartConfig_UartSetting& UartConfig::_internal_pos_control() const {
  const ::es_config::UartConfig_UartSetting* p = pos_control_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::UartConfig_UartSetting&>(
      ::es_config::_UartConfig_UartSetting_default_instance_);
}
inline const ::es_config::UartConfig_UartSetting& UartConfig::pos_control() const {
  // @@protoc_insertion_point(field_get:es_config.UartConfig.pos_control)
  return _internal_pos_control();
}
inline void UartConfig::unsafe_arena_set_allocated_pos_control(
    ::es_config::UartConfig_UartSetting* pos_control) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_control_);
  }
  pos_control_ = pos_control;
  if (pos_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.UartConfig.pos_control)
}
inline ::es_config::UartConfig_UartSetting* UartConfig::release_pos_control() {
  
  ::es_config::UartConfig_UartSetting* temp = pos_control_;
  pos_control_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::UartConfig_UartSetting* UartConfig::unsafe_arena_release_pos_control() {
  // @@protoc_insertion_point(field_release:es_config.UartConfig.pos_control)
  
  ::es_config::UartConfig_UartSetting* temp = pos_control_;
  pos_control_ = nullptr;
  return temp;
}
inline ::es_config::UartConfig_UartSetting* UartConfig::_internal_mutable_pos_control() {
  
  if (pos_control_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::UartConfig_UartSetting>(GetArena());
    pos_control_ = p;
  }
  return pos_control_;
}
inline ::es_config::UartConfig_UartSetting* UartConfig::mutable_pos_control() {
  // @@protoc_insertion_point(field_mutable:es_config.UartConfig.pos_control)
  return _internal_mutable_pos_control();
}
inline void UartConfig::set_allocated_pos_control(::es_config::UartConfig_UartSetting* pos_control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pos_control_;
  }
  if (pos_control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pos_control);
    if (message_arena != submessage_arena) {
      pos_control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_control, submessage_arena);
    }
    
  } else {
    
  }
  pos_control_ = pos_control;
  // @@protoc_insertion_point(field_set_allocated:es_config.UartConfig.pos_control)
}

// .es_config.UartConfig.UartSetting g4_at = 5;
inline bool UartConfig::_internal_has_g4_at() const {
  return this != internal_default_instance() && g4_at_ != nullptr;
}
inline bool UartConfig::has_g4_at() const {
  return _internal_has_g4_at();
}
inline void UartConfig::clear_g4_at() {
  if (GetArena() == nullptr && g4_at_ != nullptr) {
    delete g4_at_;
  }
  g4_at_ = nullptr;
}
inline const ::es_config::UartConfig_UartSetting& UartConfig::_internal_g4_at() const {
  const ::es_config::UartConfig_UartSetting* p = g4_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::es_config::UartConfig_UartSetting&>(
      ::es_config::_UartConfig_UartSetting_default_instance_);
}
inline const ::es_config::UartConfig_UartSetting& UartConfig::g4_at() const {
  // @@protoc_insertion_point(field_get:es_config.UartConfig.g4_at)
  return _internal_g4_at();
}
inline void UartConfig::unsafe_arena_set_allocated_g4_at(
    ::es_config::UartConfig_UartSetting* g4_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g4_at_);
  }
  g4_at_ = g4_at;
  if (g4_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:es_config.UartConfig.g4_at)
}
inline ::es_config::UartConfig_UartSetting* UartConfig::release_g4_at() {
  
  ::es_config::UartConfig_UartSetting* temp = g4_at_;
  g4_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::es_config::UartConfig_UartSetting* UartConfig::unsafe_arena_release_g4_at() {
  // @@protoc_insertion_point(field_release:es_config.UartConfig.g4_at)
  
  ::es_config::UartConfig_UartSetting* temp = g4_at_;
  g4_at_ = nullptr;
  return temp;
}
inline ::es_config::UartConfig_UartSetting* UartConfig::_internal_mutable_g4_at() {
  
  if (g4_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::es_config::UartConfig_UartSetting>(GetArena());
    g4_at_ = p;
  }
  return g4_at_;
}
inline ::es_config::UartConfig_UartSetting* UartConfig::mutable_g4_at() {
  // @@protoc_insertion_point(field_mutable:es_config.UartConfig.g4_at)
  return _internal_mutable_g4_at();
}
inline void UartConfig::set_allocated_g4_at(::es_config::UartConfig_UartSetting* g4_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete g4_at_;
  }
  if (g4_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(g4_at);
    if (message_arena != submessage_arena) {
      g4_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g4_at, submessage_arena);
    }
    
  } else {
    
  }
  g4_at_ = g4_at;
  // @@protoc_insertion_point(field_set_allocated:es_config.UartConfig.g4_at)
}

// -------------------------------------------------------------------

// NetworkConfig

// .es_config.NetworkConfig.NetworkType net_type = 1;
inline void NetworkConfig::clear_net_type() {
  net_type_ = 0;
}
inline ::es_config::NetworkConfig_NetworkType NetworkConfig::_internal_net_type() const {
  return static_cast< ::es_config::NetworkConfig_NetworkType >(net_type_);
}
inline ::es_config::NetworkConfig_NetworkType NetworkConfig::net_type() const {
  // @@protoc_insertion_point(field_get:es_config.NetworkConfig.net_type)
  return _internal_net_type();
}
inline void NetworkConfig::_internal_set_net_type(::es_config::NetworkConfig_NetworkType value) {
  
  net_type_ = value;
}
inline void NetworkConfig::set_net_type(::es_config::NetworkConfig_NetworkType value) {
  _internal_set_net_type(value);
  // @@protoc_insertion_point(field_set:es_config.NetworkConfig.net_type)
}

// -------------------------------------------------------------------

// WorkModeConfig

// .es_config.WorkModeConfig.WorkMode work_mode = 1;
inline void WorkModeConfig::clear_work_mode() {
  work_mode_ = 0;
}
inline ::es_config::WorkModeConfig_WorkMode WorkModeConfig::_internal_work_mode() const {
  return static_cast< ::es_config::WorkModeConfig_WorkMode >(work_mode_);
}
inline ::es_config::WorkModeConfig_WorkMode WorkModeConfig::work_mode() const {
  // @@protoc_insertion_point(field_get:es_config.WorkModeConfig.work_mode)
  return _internal_work_mode();
}
inline void WorkModeConfig::_internal_set_work_mode(::es_config::WorkModeConfig_WorkMode value) {
  
  work_mode_ = value;
}
inline void WorkModeConfig::set_work_mode(::es_config::WorkModeConfig_WorkMode value) {
  _internal_set_work_mode(value);
  // @@protoc_insertion_point(field_set:es_config.WorkModeConfig.work_mode)
}

// -------------------------------------------------------------------

// ChargerConfig

// string model = 1;
inline void ChargerConfig::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& ChargerConfig::model() const {
  // @@protoc_insertion_point(field_get:es_config.ChargerConfig.model)
  return _internal_model();
}
inline void ChargerConfig::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:es_config.ChargerConfig.model)
}
inline std::string* ChargerConfig::mutable_model() {
  // @@protoc_insertion_point(field_mutable:es_config.ChargerConfig.model)
  return _internal_mutable_model();
}
inline const std::string& ChargerConfig::_internal_model() const {
  return model_.Get();
}
inline void ChargerConfig::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChargerConfig::set_model(std::string&& value) {
  
  model_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:es_config.ChargerConfig.model)
}
inline void ChargerConfig::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:es_config.ChargerConfig.model)
}
inline void ChargerConfig::set_model(const char* value,
    size_t size) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:es_config.ChargerConfig.model)
}
inline std::string* ChargerConfig::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChargerConfig::release_model() {
  // @@protoc_insertion_point(field_release:es_config.ChargerConfig.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChargerConfig::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:es_config.ChargerConfig.model)
}

// uint32 max_current = 2;
inline void ChargerConfig::clear_max_current() {
  max_current_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChargerConfig::_internal_max_current() const {
  return max_current_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChargerConfig::max_current() const {
  // @@protoc_insertion_point(field_get:es_config.ChargerConfig.max_current)
  return _internal_max_current();
}
inline void ChargerConfig::_internal_set_max_current(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_current_ = value;
}
inline void ChargerConfig::set_max_current(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_current(value);
  // @@protoc_insertion_point(field_set:es_config.ChargerConfig.max_current)
}

// uint32 min_current = 3;
inline void ChargerConfig::clear_min_current() {
  min_current_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChargerConfig::_internal_min_current() const {
  return min_current_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChargerConfig::min_current() const {
  // @@protoc_insertion_point(field_get:es_config.ChargerConfig.min_current)
  return _internal_min_current();
}
inline void ChargerConfig::_internal_set_min_current(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  min_current_ = value;
}
inline void ChargerConfig::set_min_current(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_current(value);
  // @@protoc_insertion_point(field_set:es_config.ChargerConfig.min_current)
}

// uint32 max_voltage = 4;
inline void ChargerConfig::clear_max_voltage() {
  max_voltage_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChargerConfig::_internal_max_voltage() const {
  return max_voltage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChargerConfig::max_voltage() const {
  // @@protoc_insertion_point(field_get:es_config.ChargerConfig.max_voltage)
  return _internal_max_voltage();
}
inline void ChargerConfig::_internal_set_max_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_voltage_ = value;
}
inline void ChargerConfig::set_max_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_voltage(value);
  // @@protoc_insertion_point(field_set:es_config.ChargerConfig.max_voltage)
}

// uint32 min_voltage = 5;
inline void ChargerConfig::clear_min_voltage() {
  min_voltage_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChargerConfig::_internal_min_voltage() const {
  return min_voltage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChargerConfig::min_voltage() const {
  // @@protoc_insertion_point(field_get:es_config.ChargerConfig.min_voltage)
  return _internal_min_voltage();
}
inline void ChargerConfig::_internal_set_min_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  min_voltage_ = value;
}
inline void ChargerConfig::set_min_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_voltage(value);
  // @@protoc_insertion_point(field_set:es_config.ChargerConfig.min_voltage)
}

// uint32 max_power = 6;
inline void ChargerConfig::clear_max_power() {
  max_power_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChargerConfig::_internal_max_power() const {
  return max_power_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChargerConfig::max_power() const {
  // @@protoc_insertion_point(field_get:es_config.ChargerConfig.max_power)
  return _internal_max_power();
}
inline void ChargerConfig::_internal_set_max_power(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_power_ = value;
}
inline void ChargerConfig::set_max_power(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_power(value);
  // @@protoc_insertion_point(field_set:es_config.ChargerConfig.max_power)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace es_config

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::es_config::WiFiConfig_EncryptionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es_config::WiFiConfig_EncryptionType>() {
  return ::es_config::WiFiConfig_EncryptionType_descriptor();
}
template <> struct is_proto_enum< ::es_config::WiFiConfig_ProtocolType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es_config::WiFiConfig_ProtocolType>() {
  return ::es_config::WiFiConfig_ProtocolType_descriptor();
}
template <> struct is_proto_enum< ::es_config::ApConfig_EncryptionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es_config::ApConfig_EncryptionType>() {
  return ::es_config::ApConfig_EncryptionType_descriptor();
}
template <> struct is_proto_enum< ::es_config::ApConfig_ProtocolType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es_config::ApConfig_ProtocolType>() {
  return ::es_config::ApConfig_ProtocolType_descriptor();
}
template <> struct is_proto_enum< ::es_config::UartConfig_Parity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es_config::UartConfig_Parity>() {
  return ::es_config::UartConfig_Parity_descriptor();
}
template <> struct is_proto_enum< ::es_config::UartConfig_StopBits> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es_config::UartConfig_StopBits>() {
  return ::es_config::UartConfig_StopBits_descriptor();
}
template <> struct is_proto_enum< ::es_config::UartConfig_BaudRate> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es_config::UartConfig_BaudRate>() {
  return ::es_config::UartConfig_BaudRate_descriptor();
}
template <> struct is_proto_enum< ::es_config::NetworkConfig_NetworkType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es_config::NetworkConfig_NetworkType>() {
  return ::es_config::NetworkConfig_NetworkType_descriptor();
}
template <> struct is_proto_enum< ::es_config::WorkModeConfig_WorkMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es_config::WorkModeConfig_WorkMode>() {
  return ::es_config::WorkModeConfig_WorkMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
